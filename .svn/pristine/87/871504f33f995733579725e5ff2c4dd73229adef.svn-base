/*
 * FreeModbus Libary: BARE Port
 * Copyright (C) 2006 Christian Walter <wolti@sil.at>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * File: $Id: portserial.c,v 1.1 2006/08/22 21:35:13 wolti Exp $
 */


/* Standard includes. */
#include <stdio.h>

/* Scheduler includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

/* Library includes. */
#include "stm32l432xx.h"
#include "stm32l4xx_it.h"

/* ----------------------- Modbus includes ----------------------------------*/
#include "port.h"
#include "mb.h"
#include "mbport.h"
#include "serie.h"


extern void Usart1Pass(void);
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable ) //控制串口的收发中断
{
	if(TRUE==xRxEnable)
    SERIE_EnableIT(USART_IT_RXNE);
	else
    SERIE_DisableIT(USART_IT_RXNE);

	if(TRUE==xTxEnable)
    SERIE_EnableIT(USART_IT_TXE);
	else
    SERIE_DisableIT(USART_IT_TXE);
}
/*****************************************
* 配置串口 目前除了波特率其他参数无效 
* Usart1 9600-8-N-1
*****************************************/
BOOL 
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{

	SERIE_Init(ulBaudRate);
	return TRUE;
	/*GPIO_InitTypeDef GPIO_InitStructure;*/
	/*USART_InitTypeDef USART_InitStructure;*/
	/*USART_ClockInitTypeDef USART_ClockInitStructure;*/
	/*NVIC_InitTypeDef NVIC_InitStructure;*/

	/*//使能串口1，PA，AFIO总线*/
	/*RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | */
	/*RCC_APB2Periph_AFIO |*/
	/*RCC_APB2Periph_USART1 , */
	/*ENABLE);*/

	/**//* A9 USART_Tx */
	/*GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;*/
	/*GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;*/
	/*GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;		//推挽输出-TX*/
	/*GPIO_Init(GPIOA, &GPIO_InitStructure);*/

	/**//* A10 USART_Rx  */
	/*GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;*/
	/*GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入-RX*/
	/*GPIO_Init(GPIOA, &GPIO_InitStructure);*/


	/*USART_InitStructure.USART_BaudRate = ulBaudRate; //目前只修改波特率*/
	/*USART_InitStructure.USART_WordLength = USART_WordLength_8b;*/
	/*USART_InitStructure.USART_StopBits = USART_StopBits_1;*/
	/*USART_InitStructure.USART_Parity = USART_Parity_No;*/
	/*USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;*/
	/*USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;*/

	/*USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;*/
	/*USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;*/
	/*USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;*/
	/*USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable;*/

	/*USART_ClockInit(USART, &USART_ClockInitStructure);*/
	/*USART_Init(USART, &USART_InitStructure);*/

	/*NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1); //两级占先 八级副优先*/

	/**//* Enable USART_IRQn  Channel */
	/*NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;*/
	/*NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;*/
	/*NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;*/
	/*NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;*/
	/*NVIC_Init(&NVIC_InitStructure);*/
	/**//* ENABLE the USARTx */
	/*USART_Cmd(USART, ENABLE);*/

	/*return TRUE;*/
}


BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
	/*SERIE_Write(&ucByte, 1, UART_DEFAULT_TIMEOUT);*/
  //HAL_UART_Transmit(&UartHandle, &ucByte, 1U, 2000);
  SERIE_Transmit(&ucByte, 1U, 2000);
  //USART_SendData(USART1, ucByte);
	return TRUE;
}


BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
	/*SERIE_Read(pucByte, 1, UART_DEFAULT_TIMEOUT);*/
	//*pucByte = USART_ReceiveData(USART1);
  //HAL_UART_Receive(&UartHandle, pucByte, 1U, 2000);
  SERIE_Receive(pucByte, 1U, 2000);
	return TRUE;
}

/* Create an interrupt handler for the transmit buffer empty interrupt
 * (or an equivalent) for your target processor. This function should then
 * call pxMBFrameCBTransmitterEmpty( ) which tells the protocol stack that
 * a new character can be sent. The protocol stack will then call 
 * xMBPortSerialPutByte( ) to send the character.
 */
/*void prvvUARTTxReadyISR( void )*/
/*{*/
/*pxMBFrameCBTransmitterEmpty(  );*/
/*}*/

/* Create an interrupt handler for the receive interrupt for your target
 * processor. This function should then call pxMBFrameCBByteReceived( ). The
 * protocol stack will then call xMBPortSerialGetByte( ) to retrieve the
 * character.
 */
/*void prvvUARTRxISR( void )*/
/*{*/
/*pxMBFrameCBByteReceived(  );*/
/*}*/
