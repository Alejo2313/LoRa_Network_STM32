
Lora_stm32l0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008190  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  08008250  08008250  00018250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085cc  080085cc  000185cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000000  080085dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005f0  200000b0  0800868c  000200b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006a0  0800868c  000206a0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ad9e  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006340  00000000  00000000  0004ae76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001330  00000000  00000000  000511b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001670  00000000  00000000  000524e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c1a8  00000000  00000000  00053b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006546  00000000  00000000  0005fd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00066246  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003ba0  00000000  00000000  000662c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000b95c  00000000  00000000  00069e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b0 	.word	0x200000b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008238 	.word	0x08008238

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b4 	.word	0x200000b4
 8000104:	08008238 	.word	0x08008238

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	1c10      	adds	r0, r2, #0
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	1c19      	adds	r1, r3, #0
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 f813 	bl	8001444 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff6d 	bl	8001308 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f805 	bl	8001444 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fffb 	bl	8001444 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ff8d 	bl	800137c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ff83 	bl	800137c <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	1c08      	adds	r0, r1, #0
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f824 	bl	8000500 <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_d2uiz>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	2200      	movs	r2, #0
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <__aeabi_d2uiz+0x38>)
 80004ca:	0004      	movs	r4, r0
 80004cc:	000d      	movs	r5, r1
 80004ce:	f7ff ffcf 	bl	8000470 <__aeabi_dcmpge>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d104      	bne.n	80004e0 <__aeabi_d2uiz+0x1c>
 80004d6:	0020      	movs	r0, r4
 80004d8:	0029      	movs	r1, r5
 80004da:	f001 fdab 	bl	8002034 <__aeabi_d2iz>
 80004de:	bd70      	pop	{r4, r5, r6, pc}
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <__aeabi_d2uiz+0x38>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	0020      	movs	r0, r4
 80004e6:	0029      	movs	r1, r5
 80004e8:	f001 fa8e 	bl	8001a08 <__aeabi_dsub>
 80004ec:	f001 fda2 	bl	8002034 <__aeabi_d2iz>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	061b      	lsls	r3, r3, #24
 80004f4:	469c      	mov	ip, r3
 80004f6:	4460      	add	r0, ip
 80004f8:	e7f1      	b.n	80004de <__aeabi_d2uiz+0x1a>
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	41e00000 	.word	0x41e00000

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	46de      	mov	lr, fp
 800050a:	b5e0      	push	{r5, r6, r7, lr}
 800050c:	0004      	movs	r4, r0
 800050e:	b083      	sub	sp, #12
 8000510:	000d      	movs	r5, r1
 8000512:	4692      	mov	sl, r2
 8000514:	4699      	mov	r9, r3
 8000516:	428b      	cmp	r3, r1
 8000518:	d82f      	bhi.n	800057a <__udivmoddi4+0x7a>
 800051a:	d02c      	beq.n	8000576 <__udivmoddi4+0x76>
 800051c:	4649      	mov	r1, r9
 800051e:	4650      	mov	r0, sl
 8000520:	f001 fe54 	bl	80021cc <__clzdi2>
 8000524:	0029      	movs	r1, r5
 8000526:	0006      	movs	r6, r0
 8000528:	0020      	movs	r0, r4
 800052a:	f001 fe4f 	bl	80021cc <__clzdi2>
 800052e:	1a33      	subs	r3, r6, r0
 8000530:	4698      	mov	r8, r3
 8000532:	3b20      	subs	r3, #32
 8000534:	469b      	mov	fp, r3
 8000536:	d500      	bpl.n	800053a <__udivmoddi4+0x3a>
 8000538:	e074      	b.n	8000624 <__udivmoddi4+0x124>
 800053a:	4653      	mov	r3, sl
 800053c:	465a      	mov	r2, fp
 800053e:	4093      	lsls	r3, r2
 8000540:	001f      	movs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4642      	mov	r2, r8
 8000546:	4093      	lsls	r3, r2
 8000548:	001e      	movs	r6, r3
 800054a:	42af      	cmp	r7, r5
 800054c:	d829      	bhi.n	80005a2 <__udivmoddi4+0xa2>
 800054e:	d026      	beq.n	800059e <__udivmoddi4+0x9e>
 8000550:	465b      	mov	r3, fp
 8000552:	1ba4      	subs	r4, r4, r6
 8000554:	41bd      	sbcs	r5, r7
 8000556:	2b00      	cmp	r3, #0
 8000558:	da00      	bge.n	800055c <__udivmoddi4+0x5c>
 800055a:	e079      	b.n	8000650 <__udivmoddi4+0x150>
 800055c:	2200      	movs	r2, #0
 800055e:	2300      	movs	r3, #0
 8000560:	9200      	str	r2, [sp, #0]
 8000562:	9301      	str	r3, [sp, #4]
 8000564:	2301      	movs	r3, #1
 8000566:	465a      	mov	r2, fp
 8000568:	4093      	lsls	r3, r2
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2301      	movs	r3, #1
 800056e:	4642      	mov	r2, r8
 8000570:	4093      	lsls	r3, r2
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	e019      	b.n	80005aa <__udivmoddi4+0xaa>
 8000576:	4282      	cmp	r2, r0
 8000578:	d9d0      	bls.n	800051c <__udivmoddi4+0x1c>
 800057a:	2200      	movs	r2, #0
 800057c:	2300      	movs	r3, #0
 800057e:	9200      	str	r2, [sp, #0]
 8000580:	9301      	str	r3, [sp, #4]
 8000582:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <__udivmoddi4+0x8c>
 8000588:	601c      	str	r4, [r3, #0]
 800058a:	605d      	str	r5, [r3, #4]
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	b003      	add	sp, #12
 8000592:	bc3c      	pop	{r2, r3, r4, r5}
 8000594:	4690      	mov	r8, r2
 8000596:	4699      	mov	r9, r3
 8000598:	46a2      	mov	sl, r4
 800059a:	46ab      	mov	fp, r5
 800059c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d9d6      	bls.n	8000550 <__udivmoddi4+0x50>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	4643      	mov	r3, r8
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0e8      	beq.n	8000582 <__udivmoddi4+0x82>
 80005b0:	07fb      	lsls	r3, r7, #31
 80005b2:	0872      	lsrs	r2, r6, #1
 80005b4:	431a      	orrs	r2, r3
 80005b6:	4646      	mov	r6, r8
 80005b8:	087b      	lsrs	r3, r7, #1
 80005ba:	e00e      	b.n	80005da <__udivmoddi4+0xda>
 80005bc:	42ab      	cmp	r3, r5
 80005be:	d101      	bne.n	80005c4 <__udivmoddi4+0xc4>
 80005c0:	42a2      	cmp	r2, r4
 80005c2:	d80c      	bhi.n	80005de <__udivmoddi4+0xde>
 80005c4:	1aa4      	subs	r4, r4, r2
 80005c6:	419d      	sbcs	r5, r3
 80005c8:	2001      	movs	r0, #1
 80005ca:	1924      	adds	r4, r4, r4
 80005cc:	416d      	adcs	r5, r5
 80005ce:	2100      	movs	r1, #0
 80005d0:	3e01      	subs	r6, #1
 80005d2:	1824      	adds	r4, r4, r0
 80005d4:	414d      	adcs	r5, r1
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d006      	beq.n	80005e8 <__udivmoddi4+0xe8>
 80005da:	42ab      	cmp	r3, r5
 80005dc:	d9ee      	bls.n	80005bc <__udivmoddi4+0xbc>
 80005de:	3e01      	subs	r6, #1
 80005e0:	1924      	adds	r4, r4, r4
 80005e2:	416d      	adcs	r5, r5
 80005e4:	2e00      	cmp	r6, #0
 80005e6:	d1f8      	bne.n	80005da <__udivmoddi4+0xda>
 80005e8:	465b      	mov	r3, fp
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	1900      	adds	r0, r0, r4
 80005f0:	4169      	adcs	r1, r5
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db22      	blt.n	800063c <__udivmoddi4+0x13c>
 80005f6:	002b      	movs	r3, r5
 80005f8:	465a      	mov	r2, fp
 80005fa:	40d3      	lsrs	r3, r2
 80005fc:	002a      	movs	r2, r5
 80005fe:	4644      	mov	r4, r8
 8000600:	40e2      	lsrs	r2, r4
 8000602:	001c      	movs	r4, r3
 8000604:	465b      	mov	r3, fp
 8000606:	0015      	movs	r5, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	db2c      	blt.n	8000666 <__udivmoddi4+0x166>
 800060c:	0026      	movs	r6, r4
 800060e:	409e      	lsls	r6, r3
 8000610:	0033      	movs	r3, r6
 8000612:	0026      	movs	r6, r4
 8000614:	4647      	mov	r7, r8
 8000616:	40be      	lsls	r6, r7
 8000618:	0032      	movs	r2, r6
 800061a:	1a80      	subs	r0, r0, r2
 800061c:	4199      	sbcs	r1, r3
 800061e:	9000      	str	r0, [sp, #0]
 8000620:	9101      	str	r1, [sp, #4]
 8000622:	e7ae      	b.n	8000582 <__udivmoddi4+0x82>
 8000624:	4642      	mov	r2, r8
 8000626:	2320      	movs	r3, #32
 8000628:	1a9b      	subs	r3, r3, r2
 800062a:	4652      	mov	r2, sl
 800062c:	40da      	lsrs	r2, r3
 800062e:	4641      	mov	r1, r8
 8000630:	0013      	movs	r3, r2
 8000632:	464a      	mov	r2, r9
 8000634:	408a      	lsls	r2, r1
 8000636:	0017      	movs	r7, r2
 8000638:	431f      	orrs	r7, r3
 800063a:	e782      	b.n	8000542 <__udivmoddi4+0x42>
 800063c:	4642      	mov	r2, r8
 800063e:	2320      	movs	r3, #32
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	002a      	movs	r2, r5
 8000644:	4646      	mov	r6, r8
 8000646:	409a      	lsls	r2, r3
 8000648:	0023      	movs	r3, r4
 800064a:	40f3      	lsrs	r3, r6
 800064c:	4313      	orrs	r3, r2
 800064e:	e7d5      	b.n	80005fc <__udivmoddi4+0xfc>
 8000650:	4642      	mov	r2, r8
 8000652:	2320      	movs	r3, #32
 8000654:	2100      	movs	r1, #0
 8000656:	1a9b      	subs	r3, r3, r2
 8000658:	2200      	movs	r2, #0
 800065a:	9100      	str	r1, [sp, #0]
 800065c:	9201      	str	r2, [sp, #4]
 800065e:	2201      	movs	r2, #1
 8000660:	40da      	lsrs	r2, r3
 8000662:	9201      	str	r2, [sp, #4]
 8000664:	e782      	b.n	800056c <__udivmoddi4+0x6c>
 8000666:	4642      	mov	r2, r8
 8000668:	2320      	movs	r3, #32
 800066a:	0026      	movs	r6, r4
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	40de      	lsrs	r6, r3
 8000670:	002f      	movs	r7, r5
 8000672:	46b4      	mov	ip, r6
 8000674:	4097      	lsls	r7, r2
 8000676:	4666      	mov	r6, ip
 8000678:	003b      	movs	r3, r7
 800067a:	4333      	orrs	r3, r6
 800067c:	e7c9      	b.n	8000612 <__udivmoddi4+0x112>
 800067e:	46c0      	nop			; (mov r8, r8)

08000680 <__aeabi_dadd>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	4645      	mov	r5, r8
 8000684:	46de      	mov	lr, fp
 8000686:	4657      	mov	r7, sl
 8000688:	464e      	mov	r6, r9
 800068a:	030c      	lsls	r4, r1, #12
 800068c:	b5e0      	push	{r5, r6, r7, lr}
 800068e:	004e      	lsls	r6, r1, #1
 8000690:	0fc9      	lsrs	r1, r1, #31
 8000692:	4688      	mov	r8, r1
 8000694:	000d      	movs	r5, r1
 8000696:	0a61      	lsrs	r1, r4, #9
 8000698:	0f44      	lsrs	r4, r0, #29
 800069a:	430c      	orrs	r4, r1
 800069c:	00c7      	lsls	r7, r0, #3
 800069e:	0319      	lsls	r1, r3, #12
 80006a0:	0058      	lsls	r0, r3, #1
 80006a2:	0fdb      	lsrs	r3, r3, #31
 80006a4:	469b      	mov	fp, r3
 80006a6:	0a4b      	lsrs	r3, r1, #9
 80006a8:	0f51      	lsrs	r1, r2, #29
 80006aa:	430b      	orrs	r3, r1
 80006ac:	0d76      	lsrs	r6, r6, #21
 80006ae:	0d40      	lsrs	r0, r0, #21
 80006b0:	0019      	movs	r1, r3
 80006b2:	00d2      	lsls	r2, r2, #3
 80006b4:	45d8      	cmp	r8, fp
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3a>
 80006b8:	e0ae      	b.n	8000818 <__aeabi_dadd+0x198>
 80006ba:	1a35      	subs	r5, r6, r0
 80006bc:	2d00      	cmp	r5, #0
 80006be:	dc00      	bgt.n	80006c2 <__aeabi_dadd+0x42>
 80006c0:	e0f6      	b.n	80008b0 <__aeabi_dadd+0x230>
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d10f      	bne.n	80006e6 <__aeabi_dadd+0x66>
 80006c6:	4313      	orrs	r3, r2
 80006c8:	d100      	bne.n	80006cc <__aeabi_dadd+0x4c>
 80006ca:	e0db      	b.n	8000884 <__aeabi_dadd+0x204>
 80006cc:	1e6b      	subs	r3, r5, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d000      	beq.n	80006d4 <__aeabi_dadd+0x54>
 80006d2:	e137      	b.n	8000944 <__aeabi_dadd+0x2c4>
 80006d4:	1aba      	subs	r2, r7, r2
 80006d6:	4297      	cmp	r7, r2
 80006d8:	41bf      	sbcs	r7, r7
 80006da:	1a64      	subs	r4, r4, r1
 80006dc:	427f      	negs	r7, r7
 80006de:	1be4      	subs	r4, r4, r7
 80006e0:	2601      	movs	r6, #1
 80006e2:	0017      	movs	r7, r2
 80006e4:	e024      	b.n	8000730 <__aeabi_dadd+0xb0>
 80006e6:	4bc6      	ldr	r3, [pc, #792]	; (8000a00 <__aeabi_dadd+0x380>)
 80006e8:	429e      	cmp	r6, r3
 80006ea:	d04d      	beq.n	8000788 <__aeabi_dadd+0x108>
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	041b      	lsls	r3, r3, #16
 80006f0:	4319      	orrs	r1, r3
 80006f2:	2d38      	cmp	r5, #56	; 0x38
 80006f4:	dd00      	ble.n	80006f8 <__aeabi_dadd+0x78>
 80006f6:	e107      	b.n	8000908 <__aeabi_dadd+0x288>
 80006f8:	2d1f      	cmp	r5, #31
 80006fa:	dd00      	ble.n	80006fe <__aeabi_dadd+0x7e>
 80006fc:	e138      	b.n	8000970 <__aeabi_dadd+0x2f0>
 80006fe:	2020      	movs	r0, #32
 8000700:	1b43      	subs	r3, r0, r5
 8000702:	469a      	mov	sl, r3
 8000704:	000b      	movs	r3, r1
 8000706:	4650      	mov	r0, sl
 8000708:	4083      	lsls	r3, r0
 800070a:	4699      	mov	r9, r3
 800070c:	0013      	movs	r3, r2
 800070e:	4648      	mov	r0, r9
 8000710:	40eb      	lsrs	r3, r5
 8000712:	4318      	orrs	r0, r3
 8000714:	0003      	movs	r3, r0
 8000716:	4650      	mov	r0, sl
 8000718:	4082      	lsls	r2, r0
 800071a:	1e50      	subs	r0, r2, #1
 800071c:	4182      	sbcs	r2, r0
 800071e:	40e9      	lsrs	r1, r5
 8000720:	431a      	orrs	r2, r3
 8000722:	1aba      	subs	r2, r7, r2
 8000724:	1a61      	subs	r1, r4, r1
 8000726:	4297      	cmp	r7, r2
 8000728:	41a4      	sbcs	r4, r4
 800072a:	0017      	movs	r7, r2
 800072c:	4264      	negs	r4, r4
 800072e:	1b0c      	subs	r4, r1, r4
 8000730:	0223      	lsls	r3, r4, #8
 8000732:	d562      	bpl.n	80007fa <__aeabi_dadd+0x17a>
 8000734:	0264      	lsls	r4, r4, #9
 8000736:	0a65      	lsrs	r5, r4, #9
 8000738:	2d00      	cmp	r5, #0
 800073a:	d100      	bne.n	800073e <__aeabi_dadd+0xbe>
 800073c:	e0df      	b.n	80008fe <__aeabi_dadd+0x27e>
 800073e:	0028      	movs	r0, r5
 8000740:	f001 fd26 	bl	8002190 <__clzsi2>
 8000744:	0003      	movs	r3, r0
 8000746:	3b08      	subs	r3, #8
 8000748:	2b1f      	cmp	r3, #31
 800074a:	dd00      	ble.n	800074e <__aeabi_dadd+0xce>
 800074c:	e0d2      	b.n	80008f4 <__aeabi_dadd+0x274>
 800074e:	2220      	movs	r2, #32
 8000750:	003c      	movs	r4, r7
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	409d      	lsls	r5, r3
 8000756:	40d4      	lsrs	r4, r2
 8000758:	409f      	lsls	r7, r3
 800075a:	4325      	orrs	r5, r4
 800075c:	429e      	cmp	r6, r3
 800075e:	dd00      	ble.n	8000762 <__aeabi_dadd+0xe2>
 8000760:	e0c4      	b.n	80008ec <__aeabi_dadd+0x26c>
 8000762:	1b9e      	subs	r6, r3, r6
 8000764:	1c73      	adds	r3, r6, #1
 8000766:	2b1f      	cmp	r3, #31
 8000768:	dd00      	ble.n	800076c <__aeabi_dadd+0xec>
 800076a:	e0f1      	b.n	8000950 <__aeabi_dadd+0x2d0>
 800076c:	2220      	movs	r2, #32
 800076e:	0038      	movs	r0, r7
 8000770:	0029      	movs	r1, r5
 8000772:	1ad2      	subs	r2, r2, r3
 8000774:	40d8      	lsrs	r0, r3
 8000776:	4091      	lsls	r1, r2
 8000778:	4097      	lsls	r7, r2
 800077a:	002c      	movs	r4, r5
 800077c:	4301      	orrs	r1, r0
 800077e:	1e78      	subs	r0, r7, #1
 8000780:	4187      	sbcs	r7, r0
 8000782:	40dc      	lsrs	r4, r3
 8000784:	2600      	movs	r6, #0
 8000786:	430f      	orrs	r7, r1
 8000788:	077b      	lsls	r3, r7, #29
 800078a:	d009      	beq.n	80007a0 <__aeabi_dadd+0x120>
 800078c:	230f      	movs	r3, #15
 800078e:	403b      	ands	r3, r7
 8000790:	2b04      	cmp	r3, #4
 8000792:	d005      	beq.n	80007a0 <__aeabi_dadd+0x120>
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	42bb      	cmp	r3, r7
 8000798:	41bf      	sbcs	r7, r7
 800079a:	427f      	negs	r7, r7
 800079c:	19e4      	adds	r4, r4, r7
 800079e:	001f      	movs	r7, r3
 80007a0:	0223      	lsls	r3, r4, #8
 80007a2:	d52c      	bpl.n	80007fe <__aeabi_dadd+0x17e>
 80007a4:	4b96      	ldr	r3, [pc, #600]	; (8000a00 <__aeabi_dadd+0x380>)
 80007a6:	3601      	adds	r6, #1
 80007a8:	429e      	cmp	r6, r3
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x12e>
 80007ac:	e09a      	b.n	80008e4 <__aeabi_dadd+0x264>
 80007ae:	4645      	mov	r5, r8
 80007b0:	4b94      	ldr	r3, [pc, #592]	; (8000a04 <__aeabi_dadd+0x384>)
 80007b2:	08ff      	lsrs	r7, r7, #3
 80007b4:	401c      	ands	r4, r3
 80007b6:	0760      	lsls	r0, r4, #29
 80007b8:	0576      	lsls	r6, r6, #21
 80007ba:	0264      	lsls	r4, r4, #9
 80007bc:	4307      	orrs	r7, r0
 80007be:	0b24      	lsrs	r4, r4, #12
 80007c0:	0d76      	lsrs	r6, r6, #21
 80007c2:	2100      	movs	r1, #0
 80007c4:	0324      	lsls	r4, r4, #12
 80007c6:	0b23      	lsrs	r3, r4, #12
 80007c8:	0d0c      	lsrs	r4, r1, #20
 80007ca:	4a8f      	ldr	r2, [pc, #572]	; (8000a08 <__aeabi_dadd+0x388>)
 80007cc:	0524      	lsls	r4, r4, #20
 80007ce:	431c      	orrs	r4, r3
 80007d0:	4014      	ands	r4, r2
 80007d2:	0533      	lsls	r3, r6, #20
 80007d4:	4323      	orrs	r3, r4
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	07ed      	lsls	r5, r5, #31
 80007da:	085b      	lsrs	r3, r3, #1
 80007dc:	432b      	orrs	r3, r5
 80007de:	0038      	movs	r0, r7
 80007e0:	0019      	movs	r1, r3
 80007e2:	bc3c      	pop	{r2, r3, r4, r5}
 80007e4:	4690      	mov	r8, r2
 80007e6:	4699      	mov	r9, r3
 80007e8:	46a2      	mov	sl, r4
 80007ea:	46ab      	mov	fp, r5
 80007ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ee:	4664      	mov	r4, ip
 80007f0:	4304      	orrs	r4, r0
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x176>
 80007f4:	e211      	b.n	8000c1a <__aeabi_dadd+0x59a>
 80007f6:	0004      	movs	r4, r0
 80007f8:	4667      	mov	r7, ip
 80007fa:	077b      	lsls	r3, r7, #29
 80007fc:	d1c6      	bne.n	800078c <__aeabi_dadd+0x10c>
 80007fe:	4645      	mov	r5, r8
 8000800:	0760      	lsls	r0, r4, #29
 8000802:	08ff      	lsrs	r7, r7, #3
 8000804:	4307      	orrs	r7, r0
 8000806:	08e4      	lsrs	r4, r4, #3
 8000808:	4b7d      	ldr	r3, [pc, #500]	; (8000a00 <__aeabi_dadd+0x380>)
 800080a:	429e      	cmp	r6, r3
 800080c:	d030      	beq.n	8000870 <__aeabi_dadd+0x1f0>
 800080e:	0324      	lsls	r4, r4, #12
 8000810:	0576      	lsls	r6, r6, #21
 8000812:	0b24      	lsrs	r4, r4, #12
 8000814:	0d76      	lsrs	r6, r6, #21
 8000816:	e7d4      	b.n	80007c2 <__aeabi_dadd+0x142>
 8000818:	1a33      	subs	r3, r6, r0
 800081a:	469a      	mov	sl, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	dd78      	ble.n	8000912 <__aeabi_dadd+0x292>
 8000820:	2800      	cmp	r0, #0
 8000822:	d031      	beq.n	8000888 <__aeabi_dadd+0x208>
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <__aeabi_dadd+0x380>)
 8000826:	4286      	cmp	r6, r0
 8000828:	d0ae      	beq.n	8000788 <__aeabi_dadd+0x108>
 800082a:	2080      	movs	r0, #128	; 0x80
 800082c:	0400      	lsls	r0, r0, #16
 800082e:	4301      	orrs	r1, r0
 8000830:	4653      	mov	r3, sl
 8000832:	2b38      	cmp	r3, #56	; 0x38
 8000834:	dc00      	bgt.n	8000838 <__aeabi_dadd+0x1b8>
 8000836:	e0e9      	b.n	8000a0c <__aeabi_dadd+0x38c>
 8000838:	430a      	orrs	r2, r1
 800083a:	1e51      	subs	r1, r2, #1
 800083c:	418a      	sbcs	r2, r1
 800083e:	2100      	movs	r1, #0
 8000840:	19d2      	adds	r2, r2, r7
 8000842:	42ba      	cmp	r2, r7
 8000844:	41bf      	sbcs	r7, r7
 8000846:	1909      	adds	r1, r1, r4
 8000848:	427c      	negs	r4, r7
 800084a:	0017      	movs	r7, r2
 800084c:	190c      	adds	r4, r1, r4
 800084e:	0223      	lsls	r3, r4, #8
 8000850:	d5d3      	bpl.n	80007fa <__aeabi_dadd+0x17a>
 8000852:	4b6b      	ldr	r3, [pc, #428]	; (8000a00 <__aeabi_dadd+0x380>)
 8000854:	3601      	adds	r6, #1
 8000856:	429e      	cmp	r6, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x1dc>
 800085a:	e13a      	b.n	8000ad2 <__aeabi_dadd+0x452>
 800085c:	2001      	movs	r0, #1
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <__aeabi_dadd+0x384>)
 8000860:	401c      	ands	r4, r3
 8000862:	087b      	lsrs	r3, r7, #1
 8000864:	4007      	ands	r7, r0
 8000866:	431f      	orrs	r7, r3
 8000868:	07e0      	lsls	r0, r4, #31
 800086a:	4307      	orrs	r7, r0
 800086c:	0864      	lsrs	r4, r4, #1
 800086e:	e78b      	b.n	8000788 <__aeabi_dadd+0x108>
 8000870:	0023      	movs	r3, r4
 8000872:	433b      	orrs	r3, r7
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x1f8>
 8000876:	e1cb      	b.n	8000c10 <__aeabi_dadd+0x590>
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	0312      	lsls	r2, r2, #12
 800087c:	4314      	orrs	r4, r2
 800087e:	0324      	lsls	r4, r4, #12
 8000880:	0b24      	lsrs	r4, r4, #12
 8000882:	e79e      	b.n	80007c2 <__aeabi_dadd+0x142>
 8000884:	002e      	movs	r6, r5
 8000886:	e77f      	b.n	8000788 <__aeabi_dadd+0x108>
 8000888:	0008      	movs	r0, r1
 800088a:	4310      	orrs	r0, r2
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x210>
 800088e:	e0b4      	b.n	80009fa <__aeabi_dadd+0x37a>
 8000890:	1e58      	subs	r0, r3, #1
 8000892:	2800      	cmp	r0, #0
 8000894:	d000      	beq.n	8000898 <__aeabi_dadd+0x218>
 8000896:	e0de      	b.n	8000a56 <__aeabi_dadd+0x3d6>
 8000898:	18ba      	adds	r2, r7, r2
 800089a:	42ba      	cmp	r2, r7
 800089c:	419b      	sbcs	r3, r3
 800089e:	1864      	adds	r4, r4, r1
 80008a0:	425b      	negs	r3, r3
 80008a2:	18e4      	adds	r4, r4, r3
 80008a4:	0017      	movs	r7, r2
 80008a6:	2601      	movs	r6, #1
 80008a8:	0223      	lsls	r3, r4, #8
 80008aa:	d5a6      	bpl.n	80007fa <__aeabi_dadd+0x17a>
 80008ac:	2602      	movs	r6, #2
 80008ae:	e7d5      	b.n	800085c <__aeabi_dadd+0x1dc>
 80008b0:	2d00      	cmp	r5, #0
 80008b2:	d16e      	bne.n	8000992 <__aeabi_dadd+0x312>
 80008b4:	1c70      	adds	r0, r6, #1
 80008b6:	0540      	lsls	r0, r0, #21
 80008b8:	0d40      	lsrs	r0, r0, #21
 80008ba:	2801      	cmp	r0, #1
 80008bc:	dc00      	bgt.n	80008c0 <__aeabi_dadd+0x240>
 80008be:	e0f9      	b.n	8000ab4 <__aeabi_dadd+0x434>
 80008c0:	1ab8      	subs	r0, r7, r2
 80008c2:	4684      	mov	ip, r0
 80008c4:	4287      	cmp	r7, r0
 80008c6:	4180      	sbcs	r0, r0
 80008c8:	1ae5      	subs	r5, r4, r3
 80008ca:	4240      	negs	r0, r0
 80008cc:	1a2d      	subs	r5, r5, r0
 80008ce:	0228      	lsls	r0, r5, #8
 80008d0:	d400      	bmi.n	80008d4 <__aeabi_dadd+0x254>
 80008d2:	e089      	b.n	80009e8 <__aeabi_dadd+0x368>
 80008d4:	1bd7      	subs	r7, r2, r7
 80008d6:	42ba      	cmp	r2, r7
 80008d8:	4192      	sbcs	r2, r2
 80008da:	1b1c      	subs	r4, r3, r4
 80008dc:	4252      	negs	r2, r2
 80008de:	1aa5      	subs	r5, r4, r2
 80008e0:	46d8      	mov	r8, fp
 80008e2:	e729      	b.n	8000738 <__aeabi_dadd+0xb8>
 80008e4:	4645      	mov	r5, r8
 80008e6:	2400      	movs	r4, #0
 80008e8:	2700      	movs	r7, #0
 80008ea:	e76a      	b.n	80007c2 <__aeabi_dadd+0x142>
 80008ec:	4c45      	ldr	r4, [pc, #276]	; (8000a04 <__aeabi_dadd+0x384>)
 80008ee:	1af6      	subs	r6, r6, r3
 80008f0:	402c      	ands	r4, r5
 80008f2:	e749      	b.n	8000788 <__aeabi_dadd+0x108>
 80008f4:	003d      	movs	r5, r7
 80008f6:	3828      	subs	r0, #40	; 0x28
 80008f8:	4085      	lsls	r5, r0
 80008fa:	2700      	movs	r7, #0
 80008fc:	e72e      	b.n	800075c <__aeabi_dadd+0xdc>
 80008fe:	0038      	movs	r0, r7
 8000900:	f001 fc46 	bl	8002190 <__clzsi2>
 8000904:	3020      	adds	r0, #32
 8000906:	e71d      	b.n	8000744 <__aeabi_dadd+0xc4>
 8000908:	430a      	orrs	r2, r1
 800090a:	1e51      	subs	r1, r2, #1
 800090c:	418a      	sbcs	r2, r1
 800090e:	2100      	movs	r1, #0
 8000910:	e707      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000912:	2b00      	cmp	r3, #0
 8000914:	d000      	beq.n	8000918 <__aeabi_dadd+0x298>
 8000916:	e0f3      	b.n	8000b00 <__aeabi_dadd+0x480>
 8000918:	1c70      	adds	r0, r6, #1
 800091a:	0543      	lsls	r3, r0, #21
 800091c:	0d5b      	lsrs	r3, r3, #21
 800091e:	2b01      	cmp	r3, #1
 8000920:	dc00      	bgt.n	8000924 <__aeabi_dadd+0x2a4>
 8000922:	e0ad      	b.n	8000a80 <__aeabi_dadd+0x400>
 8000924:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <__aeabi_dadd+0x380>)
 8000926:	4298      	cmp	r0, r3
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x2ac>
 800092a:	e0d1      	b.n	8000ad0 <__aeabi_dadd+0x450>
 800092c:	18ba      	adds	r2, r7, r2
 800092e:	42ba      	cmp	r2, r7
 8000930:	41bf      	sbcs	r7, r7
 8000932:	1864      	adds	r4, r4, r1
 8000934:	427f      	negs	r7, r7
 8000936:	19e4      	adds	r4, r4, r7
 8000938:	07e7      	lsls	r7, r4, #31
 800093a:	0852      	lsrs	r2, r2, #1
 800093c:	4317      	orrs	r7, r2
 800093e:	0864      	lsrs	r4, r4, #1
 8000940:	0006      	movs	r6, r0
 8000942:	e721      	b.n	8000788 <__aeabi_dadd+0x108>
 8000944:	482e      	ldr	r0, [pc, #184]	; (8000a00 <__aeabi_dadd+0x380>)
 8000946:	4285      	cmp	r5, r0
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x2cc>
 800094a:	e093      	b.n	8000a74 <__aeabi_dadd+0x3f4>
 800094c:	001d      	movs	r5, r3
 800094e:	e6d0      	b.n	80006f2 <__aeabi_dadd+0x72>
 8000950:	0029      	movs	r1, r5
 8000952:	3e1f      	subs	r6, #31
 8000954:	40f1      	lsrs	r1, r6
 8000956:	2b20      	cmp	r3, #32
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x2dc>
 800095a:	e08d      	b.n	8000a78 <__aeabi_dadd+0x3f8>
 800095c:	2240      	movs	r2, #64	; 0x40
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	409d      	lsls	r5, r3
 8000962:	432f      	orrs	r7, r5
 8000964:	1e7d      	subs	r5, r7, #1
 8000966:	41af      	sbcs	r7, r5
 8000968:	2400      	movs	r4, #0
 800096a:	430f      	orrs	r7, r1
 800096c:	2600      	movs	r6, #0
 800096e:	e744      	b.n	80007fa <__aeabi_dadd+0x17a>
 8000970:	002b      	movs	r3, r5
 8000972:	0008      	movs	r0, r1
 8000974:	3b20      	subs	r3, #32
 8000976:	40d8      	lsrs	r0, r3
 8000978:	0003      	movs	r3, r0
 800097a:	2d20      	cmp	r5, #32
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x300>
 800097e:	e07d      	b.n	8000a7c <__aeabi_dadd+0x3fc>
 8000980:	2040      	movs	r0, #64	; 0x40
 8000982:	1b45      	subs	r5, r0, r5
 8000984:	40a9      	lsls	r1, r5
 8000986:	430a      	orrs	r2, r1
 8000988:	1e51      	subs	r1, r2, #1
 800098a:	418a      	sbcs	r2, r1
 800098c:	2100      	movs	r1, #0
 800098e:	431a      	orrs	r2, r3
 8000990:	e6c7      	b.n	8000722 <__aeabi_dadd+0xa2>
 8000992:	2e00      	cmp	r6, #0
 8000994:	d050      	beq.n	8000a38 <__aeabi_dadd+0x3b8>
 8000996:	4e1a      	ldr	r6, [pc, #104]	; (8000a00 <__aeabi_dadd+0x380>)
 8000998:	42b0      	cmp	r0, r6
 800099a:	d057      	beq.n	8000a4c <__aeabi_dadd+0x3cc>
 800099c:	2680      	movs	r6, #128	; 0x80
 800099e:	426b      	negs	r3, r5
 80009a0:	4699      	mov	r9, r3
 80009a2:	0436      	lsls	r6, r6, #16
 80009a4:	4334      	orrs	r4, r6
 80009a6:	464b      	mov	r3, r9
 80009a8:	2b38      	cmp	r3, #56	; 0x38
 80009aa:	dd00      	ble.n	80009ae <__aeabi_dadd+0x32e>
 80009ac:	e0d6      	b.n	8000b5c <__aeabi_dadd+0x4dc>
 80009ae:	2b1f      	cmp	r3, #31
 80009b0:	dd00      	ble.n	80009b4 <__aeabi_dadd+0x334>
 80009b2:	e135      	b.n	8000c20 <__aeabi_dadd+0x5a0>
 80009b4:	2620      	movs	r6, #32
 80009b6:	1af5      	subs	r5, r6, r3
 80009b8:	0026      	movs	r6, r4
 80009ba:	40ae      	lsls	r6, r5
 80009bc:	46b2      	mov	sl, r6
 80009be:	003e      	movs	r6, r7
 80009c0:	40de      	lsrs	r6, r3
 80009c2:	46ac      	mov	ip, r5
 80009c4:	0035      	movs	r5, r6
 80009c6:	4656      	mov	r6, sl
 80009c8:	432e      	orrs	r6, r5
 80009ca:	4665      	mov	r5, ip
 80009cc:	40af      	lsls	r7, r5
 80009ce:	1e7d      	subs	r5, r7, #1
 80009d0:	41af      	sbcs	r7, r5
 80009d2:	40dc      	lsrs	r4, r3
 80009d4:	4337      	orrs	r7, r6
 80009d6:	1bd7      	subs	r7, r2, r7
 80009d8:	42ba      	cmp	r2, r7
 80009da:	4192      	sbcs	r2, r2
 80009dc:	1b0c      	subs	r4, r1, r4
 80009de:	4252      	negs	r2, r2
 80009e0:	1aa4      	subs	r4, r4, r2
 80009e2:	0006      	movs	r6, r0
 80009e4:	46d8      	mov	r8, fp
 80009e6:	e6a3      	b.n	8000730 <__aeabi_dadd+0xb0>
 80009e8:	4664      	mov	r4, ip
 80009ea:	4667      	mov	r7, ip
 80009ec:	432c      	orrs	r4, r5
 80009ee:	d000      	beq.n	80009f2 <__aeabi_dadd+0x372>
 80009f0:	e6a2      	b.n	8000738 <__aeabi_dadd+0xb8>
 80009f2:	2500      	movs	r5, #0
 80009f4:	2600      	movs	r6, #0
 80009f6:	2700      	movs	r7, #0
 80009f8:	e706      	b.n	8000808 <__aeabi_dadd+0x188>
 80009fa:	001e      	movs	r6, r3
 80009fc:	e6c4      	b.n	8000788 <__aeabi_dadd+0x108>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	000007ff 	.word	0x000007ff
 8000a04:	ff7fffff 	.word	0xff7fffff
 8000a08:	800fffff 	.word	0x800fffff
 8000a0c:	2b1f      	cmp	r3, #31
 8000a0e:	dc63      	bgt.n	8000ad8 <__aeabi_dadd+0x458>
 8000a10:	2020      	movs	r0, #32
 8000a12:	1ac3      	subs	r3, r0, r3
 8000a14:	0008      	movs	r0, r1
 8000a16:	4098      	lsls	r0, r3
 8000a18:	469c      	mov	ip, r3
 8000a1a:	4683      	mov	fp, r0
 8000a1c:	4653      	mov	r3, sl
 8000a1e:	0010      	movs	r0, r2
 8000a20:	40d8      	lsrs	r0, r3
 8000a22:	0003      	movs	r3, r0
 8000a24:	4658      	mov	r0, fp
 8000a26:	4318      	orrs	r0, r3
 8000a28:	4663      	mov	r3, ip
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	1e53      	subs	r3, r2, #1
 8000a2e:	419a      	sbcs	r2, r3
 8000a30:	4653      	mov	r3, sl
 8000a32:	4302      	orrs	r2, r0
 8000a34:	40d9      	lsrs	r1, r3
 8000a36:	e703      	b.n	8000840 <__aeabi_dadd+0x1c0>
 8000a38:	0026      	movs	r6, r4
 8000a3a:	433e      	orrs	r6, r7
 8000a3c:	d006      	beq.n	8000a4c <__aeabi_dadd+0x3cc>
 8000a3e:	43eb      	mvns	r3, r5
 8000a40:	4699      	mov	r9, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d0c7      	beq.n	80009d6 <__aeabi_dadd+0x356>
 8000a46:	4e94      	ldr	r6, [pc, #592]	; (8000c98 <__aeabi_dadd+0x618>)
 8000a48:	42b0      	cmp	r0, r6
 8000a4a:	d1ac      	bne.n	80009a6 <__aeabi_dadd+0x326>
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	0017      	movs	r7, r2
 8000a50:	0006      	movs	r6, r0
 8000a52:	46d8      	mov	r8, fp
 8000a54:	e698      	b.n	8000788 <__aeabi_dadd+0x108>
 8000a56:	4b90      	ldr	r3, [pc, #576]	; (8000c98 <__aeabi_dadd+0x618>)
 8000a58:	459a      	cmp	sl, r3
 8000a5a:	d00b      	beq.n	8000a74 <__aeabi_dadd+0x3f4>
 8000a5c:	4682      	mov	sl, r0
 8000a5e:	e6e7      	b.n	8000830 <__aeabi_dadd+0x1b0>
 8000a60:	2800      	cmp	r0, #0
 8000a62:	d000      	beq.n	8000a66 <__aeabi_dadd+0x3e6>
 8000a64:	e09e      	b.n	8000ba4 <__aeabi_dadd+0x524>
 8000a66:	0018      	movs	r0, r3
 8000a68:	4310      	orrs	r0, r2
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dadd+0x3ee>
 8000a6c:	e0e9      	b.n	8000c42 <__aeabi_dadd+0x5c2>
 8000a6e:	001c      	movs	r4, r3
 8000a70:	0017      	movs	r7, r2
 8000a72:	46d8      	mov	r8, fp
 8000a74:	4e88      	ldr	r6, [pc, #544]	; (8000c98 <__aeabi_dadd+0x618>)
 8000a76:	e687      	b.n	8000788 <__aeabi_dadd+0x108>
 8000a78:	2500      	movs	r5, #0
 8000a7a:	e772      	b.n	8000962 <__aeabi_dadd+0x2e2>
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	e782      	b.n	8000986 <__aeabi_dadd+0x306>
 8000a80:	0023      	movs	r3, r4
 8000a82:	433b      	orrs	r3, r7
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x40a>
 8000a88:	e0ab      	b.n	8000be2 <__aeabi_dadd+0x562>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x410>
 8000a8e:	e0e7      	b.n	8000c60 <__aeabi_dadd+0x5e0>
 8000a90:	000b      	movs	r3, r1
 8000a92:	4313      	orrs	r3, r2
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x418>
 8000a96:	e677      	b.n	8000788 <__aeabi_dadd+0x108>
 8000a98:	18ba      	adds	r2, r7, r2
 8000a9a:	42ba      	cmp	r2, r7
 8000a9c:	41bf      	sbcs	r7, r7
 8000a9e:	1864      	adds	r4, r4, r1
 8000aa0:	427f      	negs	r7, r7
 8000aa2:	19e4      	adds	r4, r4, r7
 8000aa4:	0223      	lsls	r3, r4, #8
 8000aa6:	d400      	bmi.n	8000aaa <__aeabi_dadd+0x42a>
 8000aa8:	e0f2      	b.n	8000c90 <__aeabi_dadd+0x610>
 8000aaa:	4b7c      	ldr	r3, [pc, #496]	; (8000c9c <__aeabi_dadd+0x61c>)
 8000aac:	0017      	movs	r7, r2
 8000aae:	401c      	ands	r4, r3
 8000ab0:	0006      	movs	r6, r0
 8000ab2:	e669      	b.n	8000788 <__aeabi_dadd+0x108>
 8000ab4:	0020      	movs	r0, r4
 8000ab6:	4338      	orrs	r0, r7
 8000ab8:	2e00      	cmp	r6, #0
 8000aba:	d1d1      	bne.n	8000a60 <__aeabi_dadd+0x3e0>
 8000abc:	2800      	cmp	r0, #0
 8000abe:	d15b      	bne.n	8000b78 <__aeabi_dadd+0x4f8>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	4314      	orrs	r4, r2
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x448>
 8000ac6:	e0a8      	b.n	8000c1a <__aeabi_dadd+0x59a>
 8000ac8:	001c      	movs	r4, r3
 8000aca:	0017      	movs	r7, r2
 8000acc:	46d8      	mov	r8, fp
 8000ace:	e65b      	b.n	8000788 <__aeabi_dadd+0x108>
 8000ad0:	0006      	movs	r6, r0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	2700      	movs	r7, #0
 8000ad6:	e697      	b.n	8000808 <__aeabi_dadd+0x188>
 8000ad8:	4650      	mov	r0, sl
 8000ada:	000b      	movs	r3, r1
 8000adc:	3820      	subs	r0, #32
 8000ade:	40c3      	lsrs	r3, r0
 8000ae0:	4699      	mov	r9, r3
 8000ae2:	4653      	mov	r3, sl
 8000ae4:	2b20      	cmp	r3, #32
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dadd+0x46a>
 8000ae8:	e095      	b.n	8000c16 <__aeabi_dadd+0x596>
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	4650      	mov	r0, sl
 8000aee:	1a1b      	subs	r3, r3, r0
 8000af0:	4099      	lsls	r1, r3
 8000af2:	430a      	orrs	r2, r1
 8000af4:	1e51      	subs	r1, r2, #1
 8000af6:	418a      	sbcs	r2, r1
 8000af8:	464b      	mov	r3, r9
 8000afa:	2100      	movs	r1, #0
 8000afc:	431a      	orrs	r2, r3
 8000afe:	e69f      	b.n	8000840 <__aeabi_dadd+0x1c0>
 8000b00:	2e00      	cmp	r6, #0
 8000b02:	d130      	bne.n	8000b66 <__aeabi_dadd+0x4e6>
 8000b04:	0026      	movs	r6, r4
 8000b06:	433e      	orrs	r6, r7
 8000b08:	d067      	beq.n	8000bda <__aeabi_dadd+0x55a>
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d01c      	beq.n	8000b4c <__aeabi_dadd+0x4cc>
 8000b12:	4e61      	ldr	r6, [pc, #388]	; (8000c98 <__aeabi_dadd+0x618>)
 8000b14:	42b0      	cmp	r0, r6
 8000b16:	d060      	beq.n	8000bda <__aeabi_dadd+0x55a>
 8000b18:	4653      	mov	r3, sl
 8000b1a:	2b38      	cmp	r3, #56	; 0x38
 8000b1c:	dd00      	ble.n	8000b20 <__aeabi_dadd+0x4a0>
 8000b1e:	e096      	b.n	8000c4e <__aeabi_dadd+0x5ce>
 8000b20:	2b1f      	cmp	r3, #31
 8000b22:	dd00      	ble.n	8000b26 <__aeabi_dadd+0x4a6>
 8000b24:	e09f      	b.n	8000c66 <__aeabi_dadd+0x5e6>
 8000b26:	2620      	movs	r6, #32
 8000b28:	1af3      	subs	r3, r6, r3
 8000b2a:	0026      	movs	r6, r4
 8000b2c:	409e      	lsls	r6, r3
 8000b2e:	469c      	mov	ip, r3
 8000b30:	46b3      	mov	fp, r6
 8000b32:	4653      	mov	r3, sl
 8000b34:	003e      	movs	r6, r7
 8000b36:	40de      	lsrs	r6, r3
 8000b38:	0033      	movs	r3, r6
 8000b3a:	465e      	mov	r6, fp
 8000b3c:	431e      	orrs	r6, r3
 8000b3e:	4663      	mov	r3, ip
 8000b40:	409f      	lsls	r7, r3
 8000b42:	1e7b      	subs	r3, r7, #1
 8000b44:	419f      	sbcs	r7, r3
 8000b46:	4653      	mov	r3, sl
 8000b48:	40dc      	lsrs	r4, r3
 8000b4a:	4337      	orrs	r7, r6
 8000b4c:	18bf      	adds	r7, r7, r2
 8000b4e:	4297      	cmp	r7, r2
 8000b50:	4192      	sbcs	r2, r2
 8000b52:	1864      	adds	r4, r4, r1
 8000b54:	4252      	negs	r2, r2
 8000b56:	18a4      	adds	r4, r4, r2
 8000b58:	0006      	movs	r6, r0
 8000b5a:	e678      	b.n	800084e <__aeabi_dadd+0x1ce>
 8000b5c:	4327      	orrs	r7, r4
 8000b5e:	1e7c      	subs	r4, r7, #1
 8000b60:	41a7      	sbcs	r7, r4
 8000b62:	2400      	movs	r4, #0
 8000b64:	e737      	b.n	80009d6 <__aeabi_dadd+0x356>
 8000b66:	4e4c      	ldr	r6, [pc, #304]	; (8000c98 <__aeabi_dadd+0x618>)
 8000b68:	42b0      	cmp	r0, r6
 8000b6a:	d036      	beq.n	8000bda <__aeabi_dadd+0x55a>
 8000b6c:	2680      	movs	r6, #128	; 0x80
 8000b6e:	425b      	negs	r3, r3
 8000b70:	0436      	lsls	r6, r6, #16
 8000b72:	469a      	mov	sl, r3
 8000b74:	4334      	orrs	r4, r6
 8000b76:	e7cf      	b.n	8000b18 <__aeabi_dadd+0x498>
 8000b78:	0018      	movs	r0, r3
 8000b7a:	4310      	orrs	r0, r2
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x500>
 8000b7e:	e603      	b.n	8000788 <__aeabi_dadd+0x108>
 8000b80:	1ab8      	subs	r0, r7, r2
 8000b82:	4684      	mov	ip, r0
 8000b84:	4567      	cmp	r7, ip
 8000b86:	41ad      	sbcs	r5, r5
 8000b88:	1ae0      	subs	r0, r4, r3
 8000b8a:	426d      	negs	r5, r5
 8000b8c:	1b40      	subs	r0, r0, r5
 8000b8e:	0205      	lsls	r5, r0, #8
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_dadd+0x514>
 8000b92:	e62c      	b.n	80007ee <__aeabi_dadd+0x16e>
 8000b94:	1bd7      	subs	r7, r2, r7
 8000b96:	42ba      	cmp	r2, r7
 8000b98:	4192      	sbcs	r2, r2
 8000b9a:	1b1c      	subs	r4, r3, r4
 8000b9c:	4252      	negs	r2, r2
 8000b9e:	1aa4      	subs	r4, r4, r2
 8000ba0:	46d8      	mov	r8, fp
 8000ba2:	e5f1      	b.n	8000788 <__aeabi_dadd+0x108>
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	4310      	orrs	r0, r2
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x52c>
 8000baa:	e763      	b.n	8000a74 <__aeabi_dadd+0x3f4>
 8000bac:	08f8      	lsrs	r0, r7, #3
 8000bae:	0767      	lsls	r7, r4, #29
 8000bb0:	4307      	orrs	r7, r0
 8000bb2:	2080      	movs	r0, #128	; 0x80
 8000bb4:	08e4      	lsrs	r4, r4, #3
 8000bb6:	0300      	lsls	r0, r0, #12
 8000bb8:	4204      	tst	r4, r0
 8000bba:	d008      	beq.n	8000bce <__aeabi_dadd+0x54e>
 8000bbc:	08dd      	lsrs	r5, r3, #3
 8000bbe:	4205      	tst	r5, r0
 8000bc0:	d105      	bne.n	8000bce <__aeabi_dadd+0x54e>
 8000bc2:	08d2      	lsrs	r2, r2, #3
 8000bc4:	0759      	lsls	r1, r3, #29
 8000bc6:	4311      	orrs	r1, r2
 8000bc8:	000f      	movs	r7, r1
 8000bca:	002c      	movs	r4, r5
 8000bcc:	46d8      	mov	r8, fp
 8000bce:	0f7b      	lsrs	r3, r7, #29
 8000bd0:	00e4      	lsls	r4, r4, #3
 8000bd2:	431c      	orrs	r4, r3
 8000bd4:	00ff      	lsls	r7, r7, #3
 8000bd6:	4e30      	ldr	r6, [pc, #192]	; (8000c98 <__aeabi_dadd+0x618>)
 8000bd8:	e5d6      	b.n	8000788 <__aeabi_dadd+0x108>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	0017      	movs	r7, r2
 8000bde:	0006      	movs	r6, r0
 8000be0:	e5d2      	b.n	8000788 <__aeabi_dadd+0x108>
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d038      	beq.n	8000c58 <__aeabi_dadd+0x5d8>
 8000be6:	000b      	movs	r3, r1
 8000be8:	4313      	orrs	r3, r2
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x56e>
 8000bec:	e742      	b.n	8000a74 <__aeabi_dadd+0x3f4>
 8000bee:	08f8      	lsrs	r0, r7, #3
 8000bf0:	0767      	lsls	r7, r4, #29
 8000bf2:	4307      	orrs	r7, r0
 8000bf4:	2080      	movs	r0, #128	; 0x80
 8000bf6:	08e4      	lsrs	r4, r4, #3
 8000bf8:	0300      	lsls	r0, r0, #12
 8000bfa:	4204      	tst	r4, r0
 8000bfc:	d0e7      	beq.n	8000bce <__aeabi_dadd+0x54e>
 8000bfe:	08cb      	lsrs	r3, r1, #3
 8000c00:	4203      	tst	r3, r0
 8000c02:	d1e4      	bne.n	8000bce <__aeabi_dadd+0x54e>
 8000c04:	08d2      	lsrs	r2, r2, #3
 8000c06:	0749      	lsls	r1, r1, #29
 8000c08:	4311      	orrs	r1, r2
 8000c0a:	000f      	movs	r7, r1
 8000c0c:	001c      	movs	r4, r3
 8000c0e:	e7de      	b.n	8000bce <__aeabi_dadd+0x54e>
 8000c10:	2700      	movs	r7, #0
 8000c12:	2400      	movs	r4, #0
 8000c14:	e5d5      	b.n	80007c2 <__aeabi_dadd+0x142>
 8000c16:	2100      	movs	r1, #0
 8000c18:	e76b      	b.n	8000af2 <__aeabi_dadd+0x472>
 8000c1a:	2500      	movs	r5, #0
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	e5f3      	b.n	8000808 <__aeabi_dadd+0x188>
 8000c20:	464e      	mov	r6, r9
 8000c22:	0025      	movs	r5, r4
 8000c24:	3e20      	subs	r6, #32
 8000c26:	40f5      	lsrs	r5, r6
 8000c28:	464b      	mov	r3, r9
 8000c2a:	002e      	movs	r6, r5
 8000c2c:	2b20      	cmp	r3, #32
 8000c2e:	d02d      	beq.n	8000c8c <__aeabi_dadd+0x60c>
 8000c30:	2540      	movs	r5, #64	; 0x40
 8000c32:	1aed      	subs	r5, r5, r3
 8000c34:	40ac      	lsls	r4, r5
 8000c36:	4327      	orrs	r7, r4
 8000c38:	1e7c      	subs	r4, r7, #1
 8000c3a:	41a7      	sbcs	r7, r4
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	4337      	orrs	r7, r6
 8000c40:	e6c9      	b.n	80009d6 <__aeabi_dadd+0x356>
 8000c42:	2480      	movs	r4, #128	; 0x80
 8000c44:	2500      	movs	r5, #0
 8000c46:	0324      	lsls	r4, r4, #12
 8000c48:	4e13      	ldr	r6, [pc, #76]	; (8000c98 <__aeabi_dadd+0x618>)
 8000c4a:	2700      	movs	r7, #0
 8000c4c:	e5dc      	b.n	8000808 <__aeabi_dadd+0x188>
 8000c4e:	4327      	orrs	r7, r4
 8000c50:	1e7c      	subs	r4, r7, #1
 8000c52:	41a7      	sbcs	r7, r4
 8000c54:	2400      	movs	r4, #0
 8000c56:	e779      	b.n	8000b4c <__aeabi_dadd+0x4cc>
 8000c58:	000c      	movs	r4, r1
 8000c5a:	0017      	movs	r7, r2
 8000c5c:	4e0e      	ldr	r6, [pc, #56]	; (8000c98 <__aeabi_dadd+0x618>)
 8000c5e:	e593      	b.n	8000788 <__aeabi_dadd+0x108>
 8000c60:	000c      	movs	r4, r1
 8000c62:	0017      	movs	r7, r2
 8000c64:	e590      	b.n	8000788 <__aeabi_dadd+0x108>
 8000c66:	4656      	mov	r6, sl
 8000c68:	0023      	movs	r3, r4
 8000c6a:	3e20      	subs	r6, #32
 8000c6c:	40f3      	lsrs	r3, r6
 8000c6e:	4699      	mov	r9, r3
 8000c70:	4653      	mov	r3, sl
 8000c72:	2b20      	cmp	r3, #32
 8000c74:	d00e      	beq.n	8000c94 <__aeabi_dadd+0x614>
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	4656      	mov	r6, sl
 8000c7a:	1b9b      	subs	r3, r3, r6
 8000c7c:	409c      	lsls	r4, r3
 8000c7e:	4327      	orrs	r7, r4
 8000c80:	1e7c      	subs	r4, r7, #1
 8000c82:	41a7      	sbcs	r7, r4
 8000c84:	464b      	mov	r3, r9
 8000c86:	2400      	movs	r4, #0
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e75f      	b.n	8000b4c <__aeabi_dadd+0x4cc>
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	e7d2      	b.n	8000c36 <__aeabi_dadd+0x5b6>
 8000c90:	0017      	movs	r7, r2
 8000c92:	e5b2      	b.n	80007fa <__aeabi_dadd+0x17a>
 8000c94:	2400      	movs	r4, #0
 8000c96:	e7f2      	b.n	8000c7e <__aeabi_dadd+0x5fe>
 8000c98:	000007ff 	.word	0x000007ff
 8000c9c:	ff7fffff 	.word	0xff7fffff

08000ca0 <__aeabi_ddiv>:
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	4657      	mov	r7, sl
 8000ca4:	4645      	mov	r5, r8
 8000ca6:	46de      	mov	lr, fp
 8000ca8:	464e      	mov	r6, r9
 8000caa:	b5e0      	push	{r5, r6, r7, lr}
 8000cac:	004c      	lsls	r4, r1, #1
 8000cae:	030e      	lsls	r6, r1, #12
 8000cb0:	b087      	sub	sp, #28
 8000cb2:	4683      	mov	fp, r0
 8000cb4:	4692      	mov	sl, r2
 8000cb6:	001d      	movs	r5, r3
 8000cb8:	4680      	mov	r8, r0
 8000cba:	0b36      	lsrs	r6, r6, #12
 8000cbc:	0d64      	lsrs	r4, r4, #21
 8000cbe:	0fcf      	lsrs	r7, r1, #31
 8000cc0:	2c00      	cmp	r4, #0
 8000cc2:	d04f      	beq.n	8000d64 <__aeabi_ddiv+0xc4>
 8000cc4:	4b6f      	ldr	r3, [pc, #444]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000cc6:	429c      	cmp	r4, r3
 8000cc8:	d035      	beq.n	8000d36 <__aeabi_ddiv+0x96>
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	0f42      	lsrs	r2, r0, #29
 8000cce:	041b      	lsls	r3, r3, #16
 8000cd0:	00f6      	lsls	r6, r6, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	4333      	orrs	r3, r6
 8000cd6:	4699      	mov	r9, r3
 8000cd8:	00c3      	lsls	r3, r0, #3
 8000cda:	4698      	mov	r8, r3
 8000cdc:	4b6a      	ldr	r3, [pc, #424]	; (8000e88 <__aeabi_ddiv+0x1e8>)
 8000cde:	2600      	movs	r6, #0
 8000ce0:	469c      	mov	ip, r3
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	4464      	add	r4, ip
 8000ce6:	9303      	str	r3, [sp, #12]
 8000ce8:	032b      	lsls	r3, r5, #12
 8000cea:	0b1b      	lsrs	r3, r3, #12
 8000cec:	469b      	mov	fp, r3
 8000cee:	006b      	lsls	r3, r5, #1
 8000cf0:	0fed      	lsrs	r5, r5, #31
 8000cf2:	4650      	mov	r0, sl
 8000cf4:	0d5b      	lsrs	r3, r3, #21
 8000cf6:	9501      	str	r5, [sp, #4]
 8000cf8:	d05e      	beq.n	8000db8 <__aeabi_ddiv+0x118>
 8000cfa:	4a62      	ldr	r2, [pc, #392]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d053      	beq.n	8000da8 <__aeabi_ddiv+0x108>
 8000d00:	465a      	mov	r2, fp
 8000d02:	00d1      	lsls	r1, r2, #3
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	0f40      	lsrs	r0, r0, #29
 8000d08:	0412      	lsls	r2, r2, #16
 8000d0a:	4302      	orrs	r2, r0
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	4693      	mov	fp, r2
 8000d10:	4652      	mov	r2, sl
 8000d12:	00d1      	lsls	r1, r2, #3
 8000d14:	4a5c      	ldr	r2, [pc, #368]	; (8000e88 <__aeabi_ddiv+0x1e8>)
 8000d16:	4694      	mov	ip, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4463      	add	r3, ip
 8000d1c:	0038      	movs	r0, r7
 8000d1e:	4068      	eors	r0, r5
 8000d20:	4684      	mov	ip, r0
 8000d22:	9002      	str	r0, [sp, #8]
 8000d24:	1ae4      	subs	r4, r4, r3
 8000d26:	4316      	orrs	r6, r2
 8000d28:	2e0f      	cmp	r6, #15
 8000d2a:	d900      	bls.n	8000d2e <__aeabi_ddiv+0x8e>
 8000d2c:	e0b4      	b.n	8000e98 <__aeabi_ddiv+0x1f8>
 8000d2e:	4b57      	ldr	r3, [pc, #348]	; (8000e8c <__aeabi_ddiv+0x1ec>)
 8000d30:	00b6      	lsls	r6, r6, #2
 8000d32:	599b      	ldr	r3, [r3, r6]
 8000d34:	469f      	mov	pc, r3
 8000d36:	0003      	movs	r3, r0
 8000d38:	4333      	orrs	r3, r6
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	d16c      	bne.n	8000e18 <__aeabi_ddiv+0x178>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	4698      	mov	r8, r3
 8000d42:	3302      	adds	r3, #2
 8000d44:	2608      	movs	r6, #8
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	e7ce      	b.n	8000ce8 <__aeabi_ddiv+0x48>
 8000d4a:	46cb      	mov	fp, r9
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	9a03      	ldr	r2, [sp, #12]
 8000d50:	9701      	str	r7, [sp, #4]
 8000d52:	2a02      	cmp	r2, #2
 8000d54:	d165      	bne.n	8000e22 <__aeabi_ddiv+0x182>
 8000d56:	9b01      	ldr	r3, [sp, #4]
 8000d58:	4c4a      	ldr	r4, [pc, #296]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000d5a:	469c      	mov	ip, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4698      	mov	r8, r3
 8000d62:	e06b      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 8000d64:	0003      	movs	r3, r0
 8000d66:	4333      	orrs	r3, r6
 8000d68:	4699      	mov	r9, r3
 8000d6a:	d04e      	beq.n	8000e0a <__aeabi_ddiv+0x16a>
 8000d6c:	2e00      	cmp	r6, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_ddiv+0xd2>
 8000d70:	e1bc      	b.n	80010ec <__aeabi_ddiv+0x44c>
 8000d72:	0030      	movs	r0, r6
 8000d74:	f001 fa0c 	bl	8002190 <__clzsi2>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	3b0b      	subs	r3, #11
 8000d7c:	2b1c      	cmp	r3, #28
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_ddiv+0xe2>
 8000d80:	e1ac      	b.n	80010dc <__aeabi_ddiv+0x43c>
 8000d82:	221d      	movs	r2, #29
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	465a      	mov	r2, fp
 8000d88:	0001      	movs	r1, r0
 8000d8a:	40da      	lsrs	r2, r3
 8000d8c:	3908      	subs	r1, #8
 8000d8e:	408e      	lsls	r6, r1
 8000d90:	0013      	movs	r3, r2
 8000d92:	4333      	orrs	r3, r6
 8000d94:	4699      	mov	r9, r3
 8000d96:	465b      	mov	r3, fp
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	4698      	mov	r8, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4c3c      	ldr	r4, [pc, #240]	; (8000e90 <__aeabi_ddiv+0x1f0>)
 8000da0:	2600      	movs	r6, #0
 8000da2:	1a24      	subs	r4, r4, r0
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	e79f      	b.n	8000ce8 <__aeabi_ddiv+0x48>
 8000da8:	4651      	mov	r1, sl
 8000daa:	465a      	mov	r2, fp
 8000dac:	4311      	orrs	r1, r2
 8000dae:	d129      	bne.n	8000e04 <__aeabi_ddiv+0x164>
 8000db0:	2200      	movs	r2, #0
 8000db2:	4693      	mov	fp, r2
 8000db4:	3202      	adds	r2, #2
 8000db6:	e7b1      	b.n	8000d1c <__aeabi_ddiv+0x7c>
 8000db8:	4659      	mov	r1, fp
 8000dba:	4301      	orrs	r1, r0
 8000dbc:	d01e      	beq.n	8000dfc <__aeabi_ddiv+0x15c>
 8000dbe:	465b      	mov	r3, fp
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d100      	bne.n	8000dc6 <__aeabi_ddiv+0x126>
 8000dc4:	e19e      	b.n	8001104 <__aeabi_ddiv+0x464>
 8000dc6:	4658      	mov	r0, fp
 8000dc8:	f001 f9e2 	bl	8002190 <__clzsi2>
 8000dcc:	0003      	movs	r3, r0
 8000dce:	3b0b      	subs	r3, #11
 8000dd0:	2b1c      	cmp	r3, #28
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_ddiv+0x136>
 8000dd4:	e18f      	b.n	80010f6 <__aeabi_ddiv+0x456>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	4659      	mov	r1, fp
 8000dda:	3a08      	subs	r2, #8
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	468b      	mov	fp, r1
 8000de0:	211d      	movs	r1, #29
 8000de2:	1acb      	subs	r3, r1, r3
 8000de4:	4651      	mov	r1, sl
 8000de6:	40d9      	lsrs	r1, r3
 8000de8:	000b      	movs	r3, r1
 8000dea:	4659      	mov	r1, fp
 8000dec:	430b      	orrs	r3, r1
 8000dee:	4651      	mov	r1, sl
 8000df0:	469b      	mov	fp, r3
 8000df2:	4091      	lsls	r1, r2
 8000df4:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <__aeabi_ddiv+0x1f0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	1a1b      	subs	r3, r3, r0
 8000dfa:	e78f      	b.n	8000d1c <__aeabi_ddiv+0x7c>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	2201      	movs	r2, #1
 8000e00:	469b      	mov	fp, r3
 8000e02:	e78b      	b.n	8000d1c <__aeabi_ddiv+0x7c>
 8000e04:	4651      	mov	r1, sl
 8000e06:	2203      	movs	r2, #3
 8000e08:	e788      	b.n	8000d1c <__aeabi_ddiv+0x7c>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4698      	mov	r8, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	2604      	movs	r6, #4
 8000e12:	2400      	movs	r4, #0
 8000e14:	9303      	str	r3, [sp, #12]
 8000e16:	e767      	b.n	8000ce8 <__aeabi_ddiv+0x48>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	46b1      	mov	r9, r6
 8000e1c:	9303      	str	r3, [sp, #12]
 8000e1e:	260c      	movs	r6, #12
 8000e20:	e762      	b.n	8000ce8 <__aeabi_ddiv+0x48>
 8000e22:	2a03      	cmp	r2, #3
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x188>
 8000e26:	e25c      	b.n	80012e2 <__aeabi_ddiv+0x642>
 8000e28:	9b01      	ldr	r3, [sp, #4]
 8000e2a:	2a01      	cmp	r2, #1
 8000e2c:	d000      	beq.n	8000e30 <__aeabi_ddiv+0x190>
 8000e2e:	e1e4      	b.n	80011fa <__aeabi_ddiv+0x55a>
 8000e30:	4013      	ands	r3, r2
 8000e32:	469c      	mov	ip, r3
 8000e34:	2300      	movs	r3, #0
 8000e36:	2400      	movs	r4, #0
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	0312      	lsls	r2, r2, #12
 8000e40:	0b13      	lsrs	r3, r2, #12
 8000e42:	0d0a      	lsrs	r2, r1, #20
 8000e44:	0512      	lsls	r2, r2, #20
 8000e46:	431a      	orrs	r2, r3
 8000e48:	0523      	lsls	r3, r4, #20
 8000e4a:	4c12      	ldr	r4, [pc, #72]	; (8000e94 <__aeabi_ddiv+0x1f4>)
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	4022      	ands	r2, r4
 8000e50:	4313      	orrs	r3, r2
 8000e52:	4662      	mov	r2, ip
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	07d2      	lsls	r2, r2, #31
 8000e58:	085b      	lsrs	r3, r3, #1
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	b007      	add	sp, #28
 8000e60:	bc3c      	pop	{r2, r3, r4, r5}
 8000e62:	4690      	mov	r8, r2
 8000e64:	4699      	mov	r9, r3
 8000e66:	46a2      	mov	sl, r4
 8000e68:	46ab      	mov	fp, r5
 8000e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	469c      	mov	ip, r3
 8000e72:	0312      	lsls	r2, r2, #12
 8000e74:	4698      	mov	r8, r3
 8000e76:	4c03      	ldr	r4, [pc, #12]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000e78:	e7e0      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4c01      	ldr	r4, [pc, #4]	; (8000e84 <__aeabi_ddiv+0x1e4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4698      	mov	r8, r3
 8000e82:	e7db      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 8000e84:	000007ff 	.word	0x000007ff
 8000e88:	fffffc01 	.word	0xfffffc01
 8000e8c:	08008250 	.word	0x08008250
 8000e90:	fffffc0d 	.word	0xfffffc0d
 8000e94:	800fffff 	.word	0x800fffff
 8000e98:	45d9      	cmp	r9, fp
 8000e9a:	d900      	bls.n	8000e9e <__aeabi_ddiv+0x1fe>
 8000e9c:	e139      	b.n	8001112 <__aeabi_ddiv+0x472>
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_ddiv+0x202>
 8000ea0:	e134      	b.n	800110c <__aeabi_ddiv+0x46c>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	4646      	mov	r6, r8
 8000ea6:	464d      	mov	r5, r9
 8000ea8:	469a      	mov	sl, r3
 8000eaa:	3c01      	subs	r4, #1
 8000eac:	465b      	mov	r3, fp
 8000eae:	0e0a      	lsrs	r2, r1, #24
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	020b      	lsls	r3, r1, #8
 8000eb6:	0c17      	lsrs	r7, r2, #16
 8000eb8:	9303      	str	r3, [sp, #12]
 8000eba:	0413      	lsls	r3, r2, #16
 8000ebc:	0c1b      	lsrs	r3, r3, #16
 8000ebe:	0039      	movs	r1, r7
 8000ec0:	0028      	movs	r0, r5
 8000ec2:	4690      	mov	r8, r2
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	f7ff f929 	bl	800011c <__udivsi3>
 8000eca:	0002      	movs	r2, r0
 8000ecc:	9b01      	ldr	r3, [sp, #4]
 8000ece:	4683      	mov	fp, r0
 8000ed0:	435a      	muls	r2, r3
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	0039      	movs	r1, r7
 8000ed6:	4691      	mov	r9, r2
 8000ed8:	f7ff f9a6 	bl	8000228 <__aeabi_uidivmod>
 8000edc:	0c35      	lsrs	r5, r6, #16
 8000ede:	0409      	lsls	r1, r1, #16
 8000ee0:	430d      	orrs	r5, r1
 8000ee2:	45a9      	cmp	r9, r5
 8000ee4:	d90d      	bls.n	8000f02 <__aeabi_ddiv+0x262>
 8000ee6:	465b      	mov	r3, fp
 8000ee8:	4445      	add	r5, r8
 8000eea:	3b01      	subs	r3, #1
 8000eec:	45a8      	cmp	r8, r5
 8000eee:	d900      	bls.n	8000ef2 <__aeabi_ddiv+0x252>
 8000ef0:	e13a      	b.n	8001168 <__aeabi_ddiv+0x4c8>
 8000ef2:	45a9      	cmp	r9, r5
 8000ef4:	d800      	bhi.n	8000ef8 <__aeabi_ddiv+0x258>
 8000ef6:	e137      	b.n	8001168 <__aeabi_ddiv+0x4c8>
 8000ef8:	2302      	movs	r3, #2
 8000efa:	425b      	negs	r3, r3
 8000efc:	469c      	mov	ip, r3
 8000efe:	4445      	add	r5, r8
 8000f00:	44e3      	add	fp, ip
 8000f02:	464b      	mov	r3, r9
 8000f04:	1aeb      	subs	r3, r5, r3
 8000f06:	0039      	movs	r1, r7
 8000f08:	0018      	movs	r0, r3
 8000f0a:	9304      	str	r3, [sp, #16]
 8000f0c:	f7ff f906 	bl	800011c <__udivsi3>
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	0005      	movs	r5, r0
 8000f14:	4343      	muls	r3, r0
 8000f16:	0039      	movs	r1, r7
 8000f18:	9804      	ldr	r0, [sp, #16]
 8000f1a:	4699      	mov	r9, r3
 8000f1c:	f7ff f984 	bl	8000228 <__aeabi_uidivmod>
 8000f20:	0433      	lsls	r3, r6, #16
 8000f22:	0409      	lsls	r1, r1, #16
 8000f24:	0c1b      	lsrs	r3, r3, #16
 8000f26:	430b      	orrs	r3, r1
 8000f28:	4599      	cmp	r9, r3
 8000f2a:	d909      	bls.n	8000f40 <__aeabi_ddiv+0x2a0>
 8000f2c:	4443      	add	r3, r8
 8000f2e:	1e6a      	subs	r2, r5, #1
 8000f30:	4598      	cmp	r8, r3
 8000f32:	d900      	bls.n	8000f36 <__aeabi_ddiv+0x296>
 8000f34:	e11a      	b.n	800116c <__aeabi_ddiv+0x4cc>
 8000f36:	4599      	cmp	r9, r3
 8000f38:	d800      	bhi.n	8000f3c <__aeabi_ddiv+0x29c>
 8000f3a:	e117      	b.n	800116c <__aeabi_ddiv+0x4cc>
 8000f3c:	3d02      	subs	r5, #2
 8000f3e:	4443      	add	r3, r8
 8000f40:	464a      	mov	r2, r9
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	465a      	mov	r2, fp
 8000f46:	0412      	lsls	r2, r2, #16
 8000f48:	432a      	orrs	r2, r5
 8000f4a:	9903      	ldr	r1, [sp, #12]
 8000f4c:	4693      	mov	fp, r2
 8000f4e:	0c10      	lsrs	r0, r2, #16
 8000f50:	0c0a      	lsrs	r2, r1, #16
 8000f52:	4691      	mov	r9, r2
 8000f54:	0409      	lsls	r1, r1, #16
 8000f56:	465a      	mov	r2, fp
 8000f58:	0c09      	lsrs	r1, r1, #16
 8000f5a:	464e      	mov	r6, r9
 8000f5c:	000d      	movs	r5, r1
 8000f5e:	0412      	lsls	r2, r2, #16
 8000f60:	0c12      	lsrs	r2, r2, #16
 8000f62:	4345      	muls	r5, r0
 8000f64:	9105      	str	r1, [sp, #20]
 8000f66:	4351      	muls	r1, r2
 8000f68:	4372      	muls	r2, r6
 8000f6a:	4370      	muls	r0, r6
 8000f6c:	1952      	adds	r2, r2, r5
 8000f6e:	0c0e      	lsrs	r6, r1, #16
 8000f70:	18b2      	adds	r2, r6, r2
 8000f72:	4295      	cmp	r5, r2
 8000f74:	d903      	bls.n	8000f7e <__aeabi_ddiv+0x2de>
 8000f76:	2580      	movs	r5, #128	; 0x80
 8000f78:	026d      	lsls	r5, r5, #9
 8000f7a:	46ac      	mov	ip, r5
 8000f7c:	4460      	add	r0, ip
 8000f7e:	0c15      	lsrs	r5, r2, #16
 8000f80:	0409      	lsls	r1, r1, #16
 8000f82:	0412      	lsls	r2, r2, #16
 8000f84:	0c09      	lsrs	r1, r1, #16
 8000f86:	1828      	adds	r0, r5, r0
 8000f88:	1852      	adds	r2, r2, r1
 8000f8a:	4283      	cmp	r3, r0
 8000f8c:	d200      	bcs.n	8000f90 <__aeabi_ddiv+0x2f0>
 8000f8e:	e0ce      	b.n	800112e <__aeabi_ddiv+0x48e>
 8000f90:	d100      	bne.n	8000f94 <__aeabi_ddiv+0x2f4>
 8000f92:	e0c8      	b.n	8001126 <__aeabi_ddiv+0x486>
 8000f94:	1a1d      	subs	r5, r3, r0
 8000f96:	4653      	mov	r3, sl
 8000f98:	1a9e      	subs	r6, r3, r2
 8000f9a:	45b2      	cmp	sl, r6
 8000f9c:	4192      	sbcs	r2, r2
 8000f9e:	4252      	negs	r2, r2
 8000fa0:	1aab      	subs	r3, r5, r2
 8000fa2:	469a      	mov	sl, r3
 8000fa4:	4598      	cmp	r8, r3
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x30a>
 8000fa8:	e117      	b.n	80011da <__aeabi_ddiv+0x53a>
 8000faa:	0039      	movs	r1, r7
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff f8b5 	bl	800011c <__udivsi3>
 8000fb2:	9b01      	ldr	r3, [sp, #4]
 8000fb4:	0005      	movs	r5, r0
 8000fb6:	4343      	muls	r3, r0
 8000fb8:	0039      	movs	r1, r7
 8000fba:	4650      	mov	r0, sl
 8000fbc:	9304      	str	r3, [sp, #16]
 8000fbe:	f7ff f933 	bl	8000228 <__aeabi_uidivmod>
 8000fc2:	9804      	ldr	r0, [sp, #16]
 8000fc4:	040b      	lsls	r3, r1, #16
 8000fc6:	0c31      	lsrs	r1, r6, #16
 8000fc8:	4319      	orrs	r1, r3
 8000fca:	4288      	cmp	r0, r1
 8000fcc:	d909      	bls.n	8000fe2 <__aeabi_ddiv+0x342>
 8000fce:	4441      	add	r1, r8
 8000fd0:	1e6b      	subs	r3, r5, #1
 8000fd2:	4588      	cmp	r8, r1
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x338>
 8000fd6:	e107      	b.n	80011e8 <__aeabi_ddiv+0x548>
 8000fd8:	4288      	cmp	r0, r1
 8000fda:	d800      	bhi.n	8000fde <__aeabi_ddiv+0x33e>
 8000fdc:	e104      	b.n	80011e8 <__aeabi_ddiv+0x548>
 8000fde:	3d02      	subs	r5, #2
 8000fe0:	4441      	add	r1, r8
 8000fe2:	9b04      	ldr	r3, [sp, #16]
 8000fe4:	1acb      	subs	r3, r1, r3
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	0039      	movs	r1, r7
 8000fea:	9304      	str	r3, [sp, #16]
 8000fec:	f7ff f896 	bl	800011c <__udivsi3>
 8000ff0:	9b01      	ldr	r3, [sp, #4]
 8000ff2:	4682      	mov	sl, r0
 8000ff4:	4343      	muls	r3, r0
 8000ff6:	0039      	movs	r1, r7
 8000ff8:	9804      	ldr	r0, [sp, #16]
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f7ff f914 	bl	8000228 <__aeabi_uidivmod>
 8001000:	9801      	ldr	r0, [sp, #4]
 8001002:	040b      	lsls	r3, r1, #16
 8001004:	0431      	lsls	r1, r6, #16
 8001006:	0c09      	lsrs	r1, r1, #16
 8001008:	4319      	orrs	r1, r3
 800100a:	4288      	cmp	r0, r1
 800100c:	d90d      	bls.n	800102a <__aeabi_ddiv+0x38a>
 800100e:	4653      	mov	r3, sl
 8001010:	4441      	add	r1, r8
 8001012:	3b01      	subs	r3, #1
 8001014:	4588      	cmp	r8, r1
 8001016:	d900      	bls.n	800101a <__aeabi_ddiv+0x37a>
 8001018:	e0e8      	b.n	80011ec <__aeabi_ddiv+0x54c>
 800101a:	4288      	cmp	r0, r1
 800101c:	d800      	bhi.n	8001020 <__aeabi_ddiv+0x380>
 800101e:	e0e5      	b.n	80011ec <__aeabi_ddiv+0x54c>
 8001020:	2302      	movs	r3, #2
 8001022:	425b      	negs	r3, r3
 8001024:	469c      	mov	ip, r3
 8001026:	4441      	add	r1, r8
 8001028:	44e2      	add	sl, ip
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	042d      	lsls	r5, r5, #16
 800102e:	1ace      	subs	r6, r1, r3
 8001030:	4651      	mov	r1, sl
 8001032:	4329      	orrs	r1, r5
 8001034:	9d05      	ldr	r5, [sp, #20]
 8001036:	464f      	mov	r7, r9
 8001038:	002a      	movs	r2, r5
 800103a:	040b      	lsls	r3, r1, #16
 800103c:	0c08      	lsrs	r0, r1, #16
 800103e:	0c1b      	lsrs	r3, r3, #16
 8001040:	435a      	muls	r2, r3
 8001042:	4345      	muls	r5, r0
 8001044:	437b      	muls	r3, r7
 8001046:	4378      	muls	r0, r7
 8001048:	195b      	adds	r3, r3, r5
 800104a:	0c17      	lsrs	r7, r2, #16
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	429d      	cmp	r5, r3
 8001050:	d903      	bls.n	800105a <__aeabi_ddiv+0x3ba>
 8001052:	2580      	movs	r5, #128	; 0x80
 8001054:	026d      	lsls	r5, r5, #9
 8001056:	46ac      	mov	ip, r5
 8001058:	4460      	add	r0, ip
 800105a:	0c1d      	lsrs	r5, r3, #16
 800105c:	0412      	lsls	r2, r2, #16
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	0c12      	lsrs	r2, r2, #16
 8001062:	1828      	adds	r0, r5, r0
 8001064:	189b      	adds	r3, r3, r2
 8001066:	4286      	cmp	r6, r0
 8001068:	d200      	bcs.n	800106c <__aeabi_ddiv+0x3cc>
 800106a:	e093      	b.n	8001194 <__aeabi_ddiv+0x4f4>
 800106c:	d100      	bne.n	8001070 <__aeabi_ddiv+0x3d0>
 800106e:	e08e      	b.n	800118e <__aeabi_ddiv+0x4ee>
 8001070:	2301      	movs	r3, #1
 8001072:	4319      	orrs	r1, r3
 8001074:	4ba0      	ldr	r3, [pc, #640]	; (80012f8 <__aeabi_ddiv+0x658>)
 8001076:	18e3      	adds	r3, r4, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	dc00      	bgt.n	800107e <__aeabi_ddiv+0x3de>
 800107c:	e099      	b.n	80011b2 <__aeabi_ddiv+0x512>
 800107e:	074a      	lsls	r2, r1, #29
 8001080:	d000      	beq.n	8001084 <__aeabi_ddiv+0x3e4>
 8001082:	e09e      	b.n	80011c2 <__aeabi_ddiv+0x522>
 8001084:	465a      	mov	r2, fp
 8001086:	01d2      	lsls	r2, r2, #7
 8001088:	d506      	bpl.n	8001098 <__aeabi_ddiv+0x3f8>
 800108a:	465a      	mov	r2, fp
 800108c:	4b9b      	ldr	r3, [pc, #620]	; (80012fc <__aeabi_ddiv+0x65c>)
 800108e:	401a      	ands	r2, r3
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	4693      	mov	fp, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	18e3      	adds	r3, r4, r3
 8001098:	4a99      	ldr	r2, [pc, #612]	; (8001300 <__aeabi_ddiv+0x660>)
 800109a:	4293      	cmp	r3, r2
 800109c:	dd68      	ble.n	8001170 <__aeabi_ddiv+0x4d0>
 800109e:	2301      	movs	r3, #1
 80010a0:	9a02      	ldr	r2, [sp, #8]
 80010a2:	4c98      	ldr	r4, [pc, #608]	; (8001304 <__aeabi_ddiv+0x664>)
 80010a4:	401a      	ands	r2, r3
 80010a6:	2300      	movs	r3, #0
 80010a8:	4694      	mov	ip, r2
 80010aa:	4698      	mov	r8, r3
 80010ac:	2200      	movs	r2, #0
 80010ae:	e6c5      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	464b      	mov	r3, r9
 80010b4:	0312      	lsls	r2, r2, #12
 80010b6:	4213      	tst	r3, r2
 80010b8:	d00a      	beq.n	80010d0 <__aeabi_ddiv+0x430>
 80010ba:	465b      	mov	r3, fp
 80010bc:	4213      	tst	r3, r2
 80010be:	d106      	bne.n	80010ce <__aeabi_ddiv+0x42e>
 80010c0:	431a      	orrs	r2, r3
 80010c2:	0312      	lsls	r2, r2, #12
 80010c4:	0b12      	lsrs	r2, r2, #12
 80010c6:	46ac      	mov	ip, r5
 80010c8:	4688      	mov	r8, r1
 80010ca:	4c8e      	ldr	r4, [pc, #568]	; (8001304 <__aeabi_ddiv+0x664>)
 80010cc:	e6b6      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80010ce:	464b      	mov	r3, r9
 80010d0:	431a      	orrs	r2, r3
 80010d2:	0312      	lsls	r2, r2, #12
 80010d4:	0b12      	lsrs	r2, r2, #12
 80010d6:	46bc      	mov	ip, r7
 80010d8:	4c8a      	ldr	r4, [pc, #552]	; (8001304 <__aeabi_ddiv+0x664>)
 80010da:	e6af      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80010dc:	0003      	movs	r3, r0
 80010de:	465a      	mov	r2, fp
 80010e0:	3b28      	subs	r3, #40	; 0x28
 80010e2:	409a      	lsls	r2, r3
 80010e4:	2300      	movs	r3, #0
 80010e6:	4691      	mov	r9, r2
 80010e8:	4698      	mov	r8, r3
 80010ea:	e657      	b.n	8000d9c <__aeabi_ddiv+0xfc>
 80010ec:	4658      	mov	r0, fp
 80010ee:	f001 f84f 	bl	8002190 <__clzsi2>
 80010f2:	3020      	adds	r0, #32
 80010f4:	e640      	b.n	8000d78 <__aeabi_ddiv+0xd8>
 80010f6:	0003      	movs	r3, r0
 80010f8:	4652      	mov	r2, sl
 80010fa:	3b28      	subs	r3, #40	; 0x28
 80010fc:	409a      	lsls	r2, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	4693      	mov	fp, r2
 8001102:	e677      	b.n	8000df4 <__aeabi_ddiv+0x154>
 8001104:	f001 f844 	bl	8002190 <__clzsi2>
 8001108:	3020      	adds	r0, #32
 800110a:	e65f      	b.n	8000dcc <__aeabi_ddiv+0x12c>
 800110c:	4588      	cmp	r8, r1
 800110e:	d200      	bcs.n	8001112 <__aeabi_ddiv+0x472>
 8001110:	e6c7      	b.n	8000ea2 <__aeabi_ddiv+0x202>
 8001112:	464b      	mov	r3, r9
 8001114:	07de      	lsls	r6, r3, #31
 8001116:	085d      	lsrs	r5, r3, #1
 8001118:	4643      	mov	r3, r8
 800111a:	085b      	lsrs	r3, r3, #1
 800111c:	431e      	orrs	r6, r3
 800111e:	4643      	mov	r3, r8
 8001120:	07db      	lsls	r3, r3, #31
 8001122:	469a      	mov	sl, r3
 8001124:	e6c2      	b.n	8000eac <__aeabi_ddiv+0x20c>
 8001126:	2500      	movs	r5, #0
 8001128:	4592      	cmp	sl, r2
 800112a:	d300      	bcc.n	800112e <__aeabi_ddiv+0x48e>
 800112c:	e733      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 800112e:	9e03      	ldr	r6, [sp, #12]
 8001130:	4659      	mov	r1, fp
 8001132:	46b4      	mov	ip, r6
 8001134:	44e2      	add	sl, ip
 8001136:	45b2      	cmp	sl, r6
 8001138:	41ad      	sbcs	r5, r5
 800113a:	426d      	negs	r5, r5
 800113c:	4445      	add	r5, r8
 800113e:	18eb      	adds	r3, r5, r3
 8001140:	3901      	subs	r1, #1
 8001142:	4598      	cmp	r8, r3
 8001144:	d207      	bcs.n	8001156 <__aeabi_ddiv+0x4b6>
 8001146:	4298      	cmp	r0, r3
 8001148:	d900      	bls.n	800114c <__aeabi_ddiv+0x4ac>
 800114a:	e07f      	b.n	800124c <__aeabi_ddiv+0x5ac>
 800114c:	d100      	bne.n	8001150 <__aeabi_ddiv+0x4b0>
 800114e:	e0bc      	b.n	80012ca <__aeabi_ddiv+0x62a>
 8001150:	1a1d      	subs	r5, r3, r0
 8001152:	468b      	mov	fp, r1
 8001154:	e71f      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 8001156:	4598      	cmp	r8, r3
 8001158:	d1fa      	bne.n	8001150 <__aeabi_ddiv+0x4b0>
 800115a:	9d03      	ldr	r5, [sp, #12]
 800115c:	4555      	cmp	r5, sl
 800115e:	d9f2      	bls.n	8001146 <__aeabi_ddiv+0x4a6>
 8001160:	4643      	mov	r3, r8
 8001162:	468b      	mov	fp, r1
 8001164:	1a1d      	subs	r5, r3, r0
 8001166:	e716      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 8001168:	469b      	mov	fp, r3
 800116a:	e6ca      	b.n	8000f02 <__aeabi_ddiv+0x262>
 800116c:	0015      	movs	r5, r2
 800116e:	e6e7      	b.n	8000f40 <__aeabi_ddiv+0x2a0>
 8001170:	465a      	mov	r2, fp
 8001172:	08c9      	lsrs	r1, r1, #3
 8001174:	0752      	lsls	r2, r2, #29
 8001176:	430a      	orrs	r2, r1
 8001178:	055b      	lsls	r3, r3, #21
 800117a:	4690      	mov	r8, r2
 800117c:	0d5c      	lsrs	r4, r3, #21
 800117e:	465a      	mov	r2, fp
 8001180:	2301      	movs	r3, #1
 8001182:	9902      	ldr	r1, [sp, #8]
 8001184:	0252      	lsls	r2, r2, #9
 8001186:	4019      	ands	r1, r3
 8001188:	0b12      	lsrs	r2, r2, #12
 800118a:	468c      	mov	ip, r1
 800118c:	e656      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x4f4>
 8001192:	e76f      	b.n	8001074 <__aeabi_ddiv+0x3d4>
 8001194:	4446      	add	r6, r8
 8001196:	1e4a      	subs	r2, r1, #1
 8001198:	45b0      	cmp	r8, r6
 800119a:	d929      	bls.n	80011f0 <__aeabi_ddiv+0x550>
 800119c:	0011      	movs	r1, r2
 800119e:	4286      	cmp	r6, r0
 80011a0:	d000      	beq.n	80011a4 <__aeabi_ddiv+0x504>
 80011a2:	e765      	b.n	8001070 <__aeabi_ddiv+0x3d0>
 80011a4:	9a03      	ldr	r2, [sp, #12]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d000      	beq.n	80011ac <__aeabi_ddiv+0x50c>
 80011aa:	e761      	b.n	8001070 <__aeabi_ddiv+0x3d0>
 80011ac:	e762      	b.n	8001074 <__aeabi_ddiv+0x3d4>
 80011ae:	2101      	movs	r1, #1
 80011b0:	4249      	negs	r1, r1
 80011b2:	2001      	movs	r0, #1
 80011b4:	1ac2      	subs	r2, r0, r3
 80011b6:	2a38      	cmp	r2, #56	; 0x38
 80011b8:	dd21      	ble.n	80011fe <__aeabi_ddiv+0x55e>
 80011ba:	9b02      	ldr	r3, [sp, #8]
 80011bc:	4003      	ands	r3, r0
 80011be:	469c      	mov	ip, r3
 80011c0:	e638      	b.n	8000e34 <__aeabi_ddiv+0x194>
 80011c2:	220f      	movs	r2, #15
 80011c4:	400a      	ands	r2, r1
 80011c6:	2a04      	cmp	r2, #4
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x52c>
 80011ca:	e75b      	b.n	8001084 <__aeabi_ddiv+0x3e4>
 80011cc:	000a      	movs	r2, r1
 80011ce:	1d11      	adds	r1, r2, #4
 80011d0:	4291      	cmp	r1, r2
 80011d2:	4192      	sbcs	r2, r2
 80011d4:	4252      	negs	r2, r2
 80011d6:	4493      	add	fp, r2
 80011d8:	e754      	b.n	8001084 <__aeabi_ddiv+0x3e4>
 80011da:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <__aeabi_ddiv+0x658>)
 80011dc:	18e3      	adds	r3, r4, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	dde5      	ble.n	80011ae <__aeabi_ddiv+0x50e>
 80011e2:	2201      	movs	r2, #1
 80011e4:	4252      	negs	r2, r2
 80011e6:	e7f2      	b.n	80011ce <__aeabi_ddiv+0x52e>
 80011e8:	001d      	movs	r5, r3
 80011ea:	e6fa      	b.n	8000fe2 <__aeabi_ddiv+0x342>
 80011ec:	469a      	mov	sl, r3
 80011ee:	e71c      	b.n	800102a <__aeabi_ddiv+0x38a>
 80011f0:	42b0      	cmp	r0, r6
 80011f2:	d839      	bhi.n	8001268 <__aeabi_ddiv+0x5c8>
 80011f4:	d06e      	beq.n	80012d4 <__aeabi_ddiv+0x634>
 80011f6:	0011      	movs	r1, r2
 80011f8:	e73a      	b.n	8001070 <__aeabi_ddiv+0x3d0>
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	e73a      	b.n	8001074 <__aeabi_ddiv+0x3d4>
 80011fe:	2a1f      	cmp	r2, #31
 8001200:	dc3c      	bgt.n	800127c <__aeabi_ddiv+0x5dc>
 8001202:	2320      	movs	r3, #32
 8001204:	1a9b      	subs	r3, r3, r2
 8001206:	000c      	movs	r4, r1
 8001208:	4658      	mov	r0, fp
 800120a:	4099      	lsls	r1, r3
 800120c:	4098      	lsls	r0, r3
 800120e:	1e4b      	subs	r3, r1, #1
 8001210:	4199      	sbcs	r1, r3
 8001212:	465b      	mov	r3, fp
 8001214:	40d4      	lsrs	r4, r2
 8001216:	40d3      	lsrs	r3, r2
 8001218:	4320      	orrs	r0, r4
 800121a:	4308      	orrs	r0, r1
 800121c:	001a      	movs	r2, r3
 800121e:	0743      	lsls	r3, r0, #29
 8001220:	d009      	beq.n	8001236 <__aeabi_ddiv+0x596>
 8001222:	230f      	movs	r3, #15
 8001224:	4003      	ands	r3, r0
 8001226:	2b04      	cmp	r3, #4
 8001228:	d005      	beq.n	8001236 <__aeabi_ddiv+0x596>
 800122a:	0001      	movs	r1, r0
 800122c:	1d08      	adds	r0, r1, #4
 800122e:	4288      	cmp	r0, r1
 8001230:	419b      	sbcs	r3, r3
 8001232:	425b      	negs	r3, r3
 8001234:	18d2      	adds	r2, r2, r3
 8001236:	0213      	lsls	r3, r2, #8
 8001238:	d53a      	bpl.n	80012b0 <__aeabi_ddiv+0x610>
 800123a:	2301      	movs	r3, #1
 800123c:	9a02      	ldr	r2, [sp, #8]
 800123e:	2401      	movs	r4, #1
 8001240:	401a      	ands	r2, r3
 8001242:	2300      	movs	r3, #0
 8001244:	4694      	mov	ip, r2
 8001246:	4698      	mov	r8, r3
 8001248:	2200      	movs	r2, #0
 800124a:	e5f7      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 800124c:	2102      	movs	r1, #2
 800124e:	4249      	negs	r1, r1
 8001250:	468c      	mov	ip, r1
 8001252:	9d03      	ldr	r5, [sp, #12]
 8001254:	44e3      	add	fp, ip
 8001256:	46ac      	mov	ip, r5
 8001258:	44e2      	add	sl, ip
 800125a:	45aa      	cmp	sl, r5
 800125c:	41ad      	sbcs	r5, r5
 800125e:	426d      	negs	r5, r5
 8001260:	4445      	add	r5, r8
 8001262:	18ed      	adds	r5, r5, r3
 8001264:	1a2d      	subs	r5, r5, r0
 8001266:	e696      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 8001268:	1e8a      	subs	r2, r1, #2
 800126a:	9903      	ldr	r1, [sp, #12]
 800126c:	004d      	lsls	r5, r1, #1
 800126e:	428d      	cmp	r5, r1
 8001270:	4189      	sbcs	r1, r1
 8001272:	4249      	negs	r1, r1
 8001274:	4441      	add	r1, r8
 8001276:	1876      	adds	r6, r6, r1
 8001278:	9503      	str	r5, [sp, #12]
 800127a:	e78f      	b.n	800119c <__aeabi_ddiv+0x4fc>
 800127c:	201f      	movs	r0, #31
 800127e:	4240      	negs	r0, r0
 8001280:	1ac3      	subs	r3, r0, r3
 8001282:	4658      	mov	r0, fp
 8001284:	40d8      	lsrs	r0, r3
 8001286:	0003      	movs	r3, r0
 8001288:	2a20      	cmp	r2, #32
 800128a:	d028      	beq.n	80012de <__aeabi_ddiv+0x63e>
 800128c:	2040      	movs	r0, #64	; 0x40
 800128e:	465d      	mov	r5, fp
 8001290:	1a82      	subs	r2, r0, r2
 8001292:	4095      	lsls	r5, r2
 8001294:	4329      	orrs	r1, r5
 8001296:	1e4a      	subs	r2, r1, #1
 8001298:	4191      	sbcs	r1, r2
 800129a:	4319      	orrs	r1, r3
 800129c:	2307      	movs	r3, #7
 800129e:	2200      	movs	r2, #0
 80012a0:	400b      	ands	r3, r1
 80012a2:	d009      	beq.n	80012b8 <__aeabi_ddiv+0x618>
 80012a4:	230f      	movs	r3, #15
 80012a6:	2200      	movs	r2, #0
 80012a8:	400b      	ands	r3, r1
 80012aa:	0008      	movs	r0, r1
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d1bd      	bne.n	800122c <__aeabi_ddiv+0x58c>
 80012b0:	0001      	movs	r1, r0
 80012b2:	0753      	lsls	r3, r2, #29
 80012b4:	0252      	lsls	r2, r2, #9
 80012b6:	0b12      	lsrs	r2, r2, #12
 80012b8:	08c9      	lsrs	r1, r1, #3
 80012ba:	4319      	orrs	r1, r3
 80012bc:	2301      	movs	r3, #1
 80012be:	4688      	mov	r8, r1
 80012c0:	9902      	ldr	r1, [sp, #8]
 80012c2:	2400      	movs	r4, #0
 80012c4:	4019      	ands	r1, r3
 80012c6:	468c      	mov	ip, r1
 80012c8:	e5b8      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80012ca:	4552      	cmp	r2, sl
 80012cc:	d8be      	bhi.n	800124c <__aeabi_ddiv+0x5ac>
 80012ce:	468b      	mov	fp, r1
 80012d0:	2500      	movs	r5, #0
 80012d2:	e660      	b.n	8000f96 <__aeabi_ddiv+0x2f6>
 80012d4:	9d03      	ldr	r5, [sp, #12]
 80012d6:	429d      	cmp	r5, r3
 80012d8:	d3c6      	bcc.n	8001268 <__aeabi_ddiv+0x5c8>
 80012da:	0011      	movs	r1, r2
 80012dc:	e762      	b.n	80011a4 <__aeabi_ddiv+0x504>
 80012de:	2500      	movs	r5, #0
 80012e0:	e7d8      	b.n	8001294 <__aeabi_ddiv+0x5f4>
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	465b      	mov	r3, fp
 80012e6:	0312      	lsls	r2, r2, #12
 80012e8:	431a      	orrs	r2, r3
 80012ea:	9b01      	ldr	r3, [sp, #4]
 80012ec:	0312      	lsls	r2, r2, #12
 80012ee:	0b12      	lsrs	r2, r2, #12
 80012f0:	469c      	mov	ip, r3
 80012f2:	4688      	mov	r8, r1
 80012f4:	4c03      	ldr	r4, [pc, #12]	; (8001304 <__aeabi_ddiv+0x664>)
 80012f6:	e5a1      	b.n	8000e3c <__aeabi_ddiv+0x19c>
 80012f8:	000003ff 	.word	0x000003ff
 80012fc:	feffffff 	.word	0xfeffffff
 8001300:	000007fe 	.word	0x000007fe
 8001304:	000007ff 	.word	0x000007ff

08001308 <__eqdf2>:
 8001308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800130a:	464f      	mov	r7, r9
 800130c:	4646      	mov	r6, r8
 800130e:	46d6      	mov	lr, sl
 8001310:	005c      	lsls	r4, r3, #1
 8001312:	b5c0      	push	{r6, r7, lr}
 8001314:	031f      	lsls	r7, r3, #12
 8001316:	0fdb      	lsrs	r3, r3, #31
 8001318:	469a      	mov	sl, r3
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <__eqdf2+0x70>)
 800131c:	030e      	lsls	r6, r1, #12
 800131e:	004d      	lsls	r5, r1, #1
 8001320:	4684      	mov	ip, r0
 8001322:	4680      	mov	r8, r0
 8001324:	0b36      	lsrs	r6, r6, #12
 8001326:	0d6d      	lsrs	r5, r5, #21
 8001328:	0fc9      	lsrs	r1, r1, #31
 800132a:	4691      	mov	r9, r2
 800132c:	0b3f      	lsrs	r7, r7, #12
 800132e:	0d64      	lsrs	r4, r4, #21
 8001330:	2001      	movs	r0, #1
 8001332:	429d      	cmp	r5, r3
 8001334:	d008      	beq.n	8001348 <__eqdf2+0x40>
 8001336:	429c      	cmp	r4, r3
 8001338:	d001      	beq.n	800133e <__eqdf2+0x36>
 800133a:	42a5      	cmp	r5, r4
 800133c:	d00b      	beq.n	8001356 <__eqdf2+0x4e>
 800133e:	bc1c      	pop	{r2, r3, r4}
 8001340:	4690      	mov	r8, r2
 8001342:	4699      	mov	r9, r3
 8001344:	46a2      	mov	sl, r4
 8001346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001348:	4663      	mov	r3, ip
 800134a:	4333      	orrs	r3, r6
 800134c:	d1f7      	bne.n	800133e <__eqdf2+0x36>
 800134e:	42ac      	cmp	r4, r5
 8001350:	d1f5      	bne.n	800133e <__eqdf2+0x36>
 8001352:	433a      	orrs	r2, r7
 8001354:	d1f3      	bne.n	800133e <__eqdf2+0x36>
 8001356:	2001      	movs	r0, #1
 8001358:	42be      	cmp	r6, r7
 800135a:	d1f0      	bne.n	800133e <__eqdf2+0x36>
 800135c:	45c8      	cmp	r8, r9
 800135e:	d1ee      	bne.n	800133e <__eqdf2+0x36>
 8001360:	4551      	cmp	r1, sl
 8001362:	d007      	beq.n	8001374 <__eqdf2+0x6c>
 8001364:	2d00      	cmp	r5, #0
 8001366:	d1ea      	bne.n	800133e <__eqdf2+0x36>
 8001368:	4663      	mov	r3, ip
 800136a:	431e      	orrs	r6, r3
 800136c:	0030      	movs	r0, r6
 800136e:	1e46      	subs	r6, r0, #1
 8001370:	41b0      	sbcs	r0, r6
 8001372:	e7e4      	b.n	800133e <__eqdf2+0x36>
 8001374:	2000      	movs	r0, #0
 8001376:	e7e2      	b.n	800133e <__eqdf2+0x36>
 8001378:	000007ff 	.word	0x000007ff

0800137c <__gedf2>:
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	4645      	mov	r5, r8
 8001380:	46de      	mov	lr, fp
 8001382:	4657      	mov	r7, sl
 8001384:	464e      	mov	r6, r9
 8001386:	b5e0      	push	{r5, r6, r7, lr}
 8001388:	031f      	lsls	r7, r3, #12
 800138a:	0b3d      	lsrs	r5, r7, #12
 800138c:	4f2c      	ldr	r7, [pc, #176]	; (8001440 <__gedf2+0xc4>)
 800138e:	030e      	lsls	r6, r1, #12
 8001390:	004c      	lsls	r4, r1, #1
 8001392:	46ab      	mov	fp, r5
 8001394:	005d      	lsls	r5, r3, #1
 8001396:	4684      	mov	ip, r0
 8001398:	0b36      	lsrs	r6, r6, #12
 800139a:	0d64      	lsrs	r4, r4, #21
 800139c:	0fc9      	lsrs	r1, r1, #31
 800139e:	4690      	mov	r8, r2
 80013a0:	0d6d      	lsrs	r5, r5, #21
 80013a2:	0fdb      	lsrs	r3, r3, #31
 80013a4:	42bc      	cmp	r4, r7
 80013a6:	d02a      	beq.n	80013fe <__gedf2+0x82>
 80013a8:	4f25      	ldr	r7, [pc, #148]	; (8001440 <__gedf2+0xc4>)
 80013aa:	42bd      	cmp	r5, r7
 80013ac:	d02d      	beq.n	800140a <__gedf2+0x8e>
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d10f      	bne.n	80013d2 <__gedf2+0x56>
 80013b2:	4330      	orrs	r0, r6
 80013b4:	0007      	movs	r7, r0
 80013b6:	4681      	mov	r9, r0
 80013b8:	4278      	negs	r0, r7
 80013ba:	4178      	adcs	r0, r7
 80013bc:	b2c0      	uxtb	r0, r0
 80013be:	2d00      	cmp	r5, #0
 80013c0:	d117      	bne.n	80013f2 <__gedf2+0x76>
 80013c2:	465f      	mov	r7, fp
 80013c4:	433a      	orrs	r2, r7
 80013c6:	d114      	bne.n	80013f2 <__gedf2+0x76>
 80013c8:	464b      	mov	r3, r9
 80013ca:	2000      	movs	r0, #0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00a      	beq.n	80013e6 <__gedf2+0x6a>
 80013d0:	e006      	b.n	80013e0 <__gedf2+0x64>
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d102      	bne.n	80013dc <__gedf2+0x60>
 80013d6:	4658      	mov	r0, fp
 80013d8:	4302      	orrs	r2, r0
 80013da:	d001      	beq.n	80013e0 <__gedf2+0x64>
 80013dc:	4299      	cmp	r1, r3
 80013de:	d018      	beq.n	8001412 <__gedf2+0x96>
 80013e0:	4248      	negs	r0, r1
 80013e2:	2101      	movs	r1, #1
 80013e4:	4308      	orrs	r0, r1
 80013e6:	bc3c      	pop	{r2, r3, r4, r5}
 80013e8:	4690      	mov	r8, r2
 80013ea:	4699      	mov	r9, r3
 80013ec:	46a2      	mov	sl, r4
 80013ee:	46ab      	mov	fp, r5
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f2:	2800      	cmp	r0, #0
 80013f4:	d0f2      	beq.n	80013dc <__gedf2+0x60>
 80013f6:	2001      	movs	r0, #1
 80013f8:	3b01      	subs	r3, #1
 80013fa:	4318      	orrs	r0, r3
 80013fc:	e7f3      	b.n	80013e6 <__gedf2+0x6a>
 80013fe:	0037      	movs	r7, r6
 8001400:	4307      	orrs	r7, r0
 8001402:	d0d1      	beq.n	80013a8 <__gedf2+0x2c>
 8001404:	2002      	movs	r0, #2
 8001406:	4240      	negs	r0, r0
 8001408:	e7ed      	b.n	80013e6 <__gedf2+0x6a>
 800140a:	465f      	mov	r7, fp
 800140c:	4317      	orrs	r7, r2
 800140e:	d0ce      	beq.n	80013ae <__gedf2+0x32>
 8001410:	e7f8      	b.n	8001404 <__gedf2+0x88>
 8001412:	42ac      	cmp	r4, r5
 8001414:	dce4      	bgt.n	80013e0 <__gedf2+0x64>
 8001416:	da03      	bge.n	8001420 <__gedf2+0xa4>
 8001418:	1e48      	subs	r0, r1, #1
 800141a:	2101      	movs	r1, #1
 800141c:	4308      	orrs	r0, r1
 800141e:	e7e2      	b.n	80013e6 <__gedf2+0x6a>
 8001420:	455e      	cmp	r6, fp
 8001422:	d8dd      	bhi.n	80013e0 <__gedf2+0x64>
 8001424:	d006      	beq.n	8001434 <__gedf2+0xb8>
 8001426:	2000      	movs	r0, #0
 8001428:	455e      	cmp	r6, fp
 800142a:	d2dc      	bcs.n	80013e6 <__gedf2+0x6a>
 800142c:	2301      	movs	r3, #1
 800142e:	1e48      	subs	r0, r1, #1
 8001430:	4318      	orrs	r0, r3
 8001432:	e7d8      	b.n	80013e6 <__gedf2+0x6a>
 8001434:	45c4      	cmp	ip, r8
 8001436:	d8d3      	bhi.n	80013e0 <__gedf2+0x64>
 8001438:	2000      	movs	r0, #0
 800143a:	45c4      	cmp	ip, r8
 800143c:	d3f6      	bcc.n	800142c <__gedf2+0xb0>
 800143e:	e7d2      	b.n	80013e6 <__gedf2+0x6a>
 8001440:	000007ff 	.word	0x000007ff

08001444 <__ledf2>:
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	464e      	mov	r6, r9
 8001448:	4645      	mov	r5, r8
 800144a:	46de      	mov	lr, fp
 800144c:	4657      	mov	r7, sl
 800144e:	005c      	lsls	r4, r3, #1
 8001450:	b5e0      	push	{r5, r6, r7, lr}
 8001452:	031f      	lsls	r7, r3, #12
 8001454:	0fdb      	lsrs	r3, r3, #31
 8001456:	4699      	mov	r9, r3
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <__ledf2+0xc0>)
 800145a:	030e      	lsls	r6, r1, #12
 800145c:	004d      	lsls	r5, r1, #1
 800145e:	0fc9      	lsrs	r1, r1, #31
 8001460:	4684      	mov	ip, r0
 8001462:	0b36      	lsrs	r6, r6, #12
 8001464:	0d6d      	lsrs	r5, r5, #21
 8001466:	468b      	mov	fp, r1
 8001468:	4690      	mov	r8, r2
 800146a:	0b3f      	lsrs	r7, r7, #12
 800146c:	0d64      	lsrs	r4, r4, #21
 800146e:	429d      	cmp	r5, r3
 8001470:	d020      	beq.n	80014b4 <__ledf2+0x70>
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <__ledf2+0xc0>)
 8001474:	429c      	cmp	r4, r3
 8001476:	d022      	beq.n	80014be <__ledf2+0x7a>
 8001478:	2d00      	cmp	r5, #0
 800147a:	d112      	bne.n	80014a2 <__ledf2+0x5e>
 800147c:	4330      	orrs	r0, r6
 800147e:	4243      	negs	r3, r0
 8001480:	4143      	adcs	r3, r0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2c00      	cmp	r4, #0
 8001486:	d01f      	beq.n	80014c8 <__ledf2+0x84>
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00c      	beq.n	80014a6 <__ledf2+0x62>
 800148c:	464b      	mov	r3, r9
 800148e:	2001      	movs	r0, #1
 8001490:	3b01      	subs	r3, #1
 8001492:	4303      	orrs	r3, r0
 8001494:	0018      	movs	r0, r3
 8001496:	bc3c      	pop	{r2, r3, r4, r5}
 8001498:	4690      	mov	r8, r2
 800149a:	4699      	mov	r9, r3
 800149c:	46a2      	mov	sl, r4
 800149e:	46ab      	mov	fp, r5
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a2:	2c00      	cmp	r4, #0
 80014a4:	d016      	beq.n	80014d4 <__ledf2+0x90>
 80014a6:	45cb      	cmp	fp, r9
 80014a8:	d017      	beq.n	80014da <__ledf2+0x96>
 80014aa:	465b      	mov	r3, fp
 80014ac:	4259      	negs	r1, r3
 80014ae:	2301      	movs	r3, #1
 80014b0:	430b      	orrs	r3, r1
 80014b2:	e7ef      	b.n	8001494 <__ledf2+0x50>
 80014b4:	0031      	movs	r1, r6
 80014b6:	2302      	movs	r3, #2
 80014b8:	4301      	orrs	r1, r0
 80014ba:	d1eb      	bne.n	8001494 <__ledf2+0x50>
 80014bc:	e7d9      	b.n	8001472 <__ledf2+0x2e>
 80014be:	0039      	movs	r1, r7
 80014c0:	2302      	movs	r3, #2
 80014c2:	4311      	orrs	r1, r2
 80014c4:	d1e6      	bne.n	8001494 <__ledf2+0x50>
 80014c6:	e7d7      	b.n	8001478 <__ledf2+0x34>
 80014c8:	433a      	orrs	r2, r7
 80014ca:	d1dd      	bne.n	8001488 <__ledf2+0x44>
 80014cc:	2300      	movs	r3, #0
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d0e0      	beq.n	8001494 <__ledf2+0x50>
 80014d2:	e7ea      	b.n	80014aa <__ledf2+0x66>
 80014d4:	433a      	orrs	r2, r7
 80014d6:	d1e6      	bne.n	80014a6 <__ledf2+0x62>
 80014d8:	e7e7      	b.n	80014aa <__ledf2+0x66>
 80014da:	42a5      	cmp	r5, r4
 80014dc:	dce5      	bgt.n	80014aa <__ledf2+0x66>
 80014de:	db05      	blt.n	80014ec <__ledf2+0xa8>
 80014e0:	42be      	cmp	r6, r7
 80014e2:	d8e2      	bhi.n	80014aa <__ledf2+0x66>
 80014e4:	d007      	beq.n	80014f6 <__ledf2+0xb2>
 80014e6:	2300      	movs	r3, #0
 80014e8:	42be      	cmp	r6, r7
 80014ea:	d2d3      	bcs.n	8001494 <__ledf2+0x50>
 80014ec:	4659      	mov	r1, fp
 80014ee:	2301      	movs	r3, #1
 80014f0:	3901      	subs	r1, #1
 80014f2:	430b      	orrs	r3, r1
 80014f4:	e7ce      	b.n	8001494 <__ledf2+0x50>
 80014f6:	45c4      	cmp	ip, r8
 80014f8:	d8d7      	bhi.n	80014aa <__ledf2+0x66>
 80014fa:	2300      	movs	r3, #0
 80014fc:	45c4      	cmp	ip, r8
 80014fe:	d3f5      	bcc.n	80014ec <__ledf2+0xa8>
 8001500:	e7c8      	b.n	8001494 <__ledf2+0x50>
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	000007ff 	.word	0x000007ff

08001508 <__aeabi_dmul>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	4645      	mov	r5, r8
 800150e:	46de      	mov	lr, fp
 8001510:	464e      	mov	r6, r9
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	030c      	lsls	r4, r1, #12
 8001516:	4698      	mov	r8, r3
 8001518:	004e      	lsls	r6, r1, #1
 800151a:	0b23      	lsrs	r3, r4, #12
 800151c:	b087      	sub	sp, #28
 800151e:	0007      	movs	r7, r0
 8001520:	4692      	mov	sl, r2
 8001522:	469b      	mov	fp, r3
 8001524:	0d76      	lsrs	r6, r6, #21
 8001526:	0fcd      	lsrs	r5, r1, #31
 8001528:	2e00      	cmp	r6, #0
 800152a:	d06b      	beq.n	8001604 <__aeabi_dmul+0xfc>
 800152c:	4b6d      	ldr	r3, [pc, #436]	; (80016e4 <__aeabi_dmul+0x1dc>)
 800152e:	429e      	cmp	r6, r3
 8001530:	d035      	beq.n	800159e <__aeabi_dmul+0x96>
 8001532:	2480      	movs	r4, #128	; 0x80
 8001534:	465b      	mov	r3, fp
 8001536:	0f42      	lsrs	r2, r0, #29
 8001538:	0424      	lsls	r4, r4, #16
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4314      	orrs	r4, r2
 800153e:	431c      	orrs	r4, r3
 8001540:	00c3      	lsls	r3, r0, #3
 8001542:	4699      	mov	r9, r3
 8001544:	4b68      	ldr	r3, [pc, #416]	; (80016e8 <__aeabi_dmul+0x1e0>)
 8001546:	46a3      	mov	fp, r4
 8001548:	469c      	mov	ip, r3
 800154a:	2300      	movs	r3, #0
 800154c:	2700      	movs	r7, #0
 800154e:	4466      	add	r6, ip
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	4643      	mov	r3, r8
 8001554:	031c      	lsls	r4, r3, #12
 8001556:	005a      	lsls	r2, r3, #1
 8001558:	0fdb      	lsrs	r3, r3, #31
 800155a:	4650      	mov	r0, sl
 800155c:	0b24      	lsrs	r4, r4, #12
 800155e:	0d52      	lsrs	r2, r2, #21
 8001560:	4698      	mov	r8, r3
 8001562:	d100      	bne.n	8001566 <__aeabi_dmul+0x5e>
 8001564:	e076      	b.n	8001654 <__aeabi_dmul+0x14c>
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <__aeabi_dmul+0x1dc>)
 8001568:	429a      	cmp	r2, r3
 800156a:	d06d      	beq.n	8001648 <__aeabi_dmul+0x140>
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	0f41      	lsrs	r1, r0, #29
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	430b      	orrs	r3, r1
 8001574:	495c      	ldr	r1, [pc, #368]	; (80016e8 <__aeabi_dmul+0x1e0>)
 8001576:	00e4      	lsls	r4, r4, #3
 8001578:	468c      	mov	ip, r1
 800157a:	431c      	orrs	r4, r3
 800157c:	00c3      	lsls	r3, r0, #3
 800157e:	2000      	movs	r0, #0
 8001580:	4462      	add	r2, ip
 8001582:	4641      	mov	r1, r8
 8001584:	18b6      	adds	r6, r6, r2
 8001586:	4069      	eors	r1, r5
 8001588:	1c72      	adds	r2, r6, #1
 800158a:	9101      	str	r1, [sp, #4]
 800158c:	4694      	mov	ip, r2
 800158e:	4307      	orrs	r7, r0
 8001590:	2f0f      	cmp	r7, #15
 8001592:	d900      	bls.n	8001596 <__aeabi_dmul+0x8e>
 8001594:	e0b0      	b.n	80016f8 <__aeabi_dmul+0x1f0>
 8001596:	4a55      	ldr	r2, [pc, #340]	; (80016ec <__aeabi_dmul+0x1e4>)
 8001598:	00bf      	lsls	r7, r7, #2
 800159a:	59d2      	ldr	r2, [r2, r7]
 800159c:	4697      	mov	pc, r2
 800159e:	465b      	mov	r3, fp
 80015a0:	4303      	orrs	r3, r0
 80015a2:	4699      	mov	r9, r3
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dmul+0xa0>
 80015a6:	e087      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 80015a8:	2300      	movs	r3, #0
 80015aa:	469b      	mov	fp, r3
 80015ac:	3302      	adds	r3, #2
 80015ae:	2708      	movs	r7, #8
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	e7ce      	b.n	8001552 <__aeabi_dmul+0x4a>
 80015b4:	4642      	mov	r2, r8
 80015b6:	9201      	str	r2, [sp, #4]
 80015b8:	2802      	cmp	r0, #2
 80015ba:	d067      	beq.n	800168c <__aeabi_dmul+0x184>
 80015bc:	2803      	cmp	r0, #3
 80015be:	d100      	bne.n	80015c2 <__aeabi_dmul+0xba>
 80015c0:	e20e      	b.n	80019e0 <__aeabi_dmul+0x4d8>
 80015c2:	2801      	cmp	r0, #1
 80015c4:	d000      	beq.n	80015c8 <__aeabi_dmul+0xc0>
 80015c6:	e162      	b.n	800188e <__aeabi_dmul+0x386>
 80015c8:	2300      	movs	r3, #0
 80015ca:	2400      	movs	r4, #0
 80015cc:	2200      	movs	r2, #0
 80015ce:	4699      	mov	r9, r3
 80015d0:	9901      	ldr	r1, [sp, #4]
 80015d2:	4001      	ands	r1, r0
 80015d4:	b2cd      	uxtb	r5, r1
 80015d6:	2100      	movs	r1, #0
 80015d8:	0312      	lsls	r2, r2, #12
 80015da:	0d0b      	lsrs	r3, r1, #20
 80015dc:	0b12      	lsrs	r2, r2, #12
 80015de:	051b      	lsls	r3, r3, #20
 80015e0:	4313      	orrs	r3, r2
 80015e2:	4a43      	ldr	r2, [pc, #268]	; (80016f0 <__aeabi_dmul+0x1e8>)
 80015e4:	0524      	lsls	r4, r4, #20
 80015e6:	4013      	ands	r3, r2
 80015e8:	431c      	orrs	r4, r3
 80015ea:	0064      	lsls	r4, r4, #1
 80015ec:	07ed      	lsls	r5, r5, #31
 80015ee:	0864      	lsrs	r4, r4, #1
 80015f0:	432c      	orrs	r4, r5
 80015f2:	4648      	mov	r0, r9
 80015f4:	0021      	movs	r1, r4
 80015f6:	b007      	add	sp, #28
 80015f8:	bc3c      	pop	{r2, r3, r4, r5}
 80015fa:	4690      	mov	r8, r2
 80015fc:	4699      	mov	r9, r3
 80015fe:	46a2      	mov	sl, r4
 8001600:	46ab      	mov	fp, r5
 8001602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001604:	4303      	orrs	r3, r0
 8001606:	4699      	mov	r9, r3
 8001608:	d04f      	beq.n	80016aa <__aeabi_dmul+0x1a2>
 800160a:	465b      	mov	r3, fp
 800160c:	2b00      	cmp	r3, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dmul+0x10a>
 8001610:	e189      	b.n	8001926 <__aeabi_dmul+0x41e>
 8001612:	4658      	mov	r0, fp
 8001614:	f000 fdbc 	bl	8002190 <__clzsi2>
 8001618:	0003      	movs	r3, r0
 800161a:	3b0b      	subs	r3, #11
 800161c:	2b1c      	cmp	r3, #28
 800161e:	dd00      	ble.n	8001622 <__aeabi_dmul+0x11a>
 8001620:	e17a      	b.n	8001918 <__aeabi_dmul+0x410>
 8001622:	221d      	movs	r2, #29
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	003a      	movs	r2, r7
 8001628:	0001      	movs	r1, r0
 800162a:	465c      	mov	r4, fp
 800162c:	40da      	lsrs	r2, r3
 800162e:	3908      	subs	r1, #8
 8001630:	408c      	lsls	r4, r1
 8001632:	0013      	movs	r3, r2
 8001634:	408f      	lsls	r7, r1
 8001636:	4323      	orrs	r3, r4
 8001638:	469b      	mov	fp, r3
 800163a:	46b9      	mov	r9, r7
 800163c:	2300      	movs	r3, #0
 800163e:	4e2d      	ldr	r6, [pc, #180]	; (80016f4 <__aeabi_dmul+0x1ec>)
 8001640:	2700      	movs	r7, #0
 8001642:	1a36      	subs	r6, r6, r0
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	e784      	b.n	8001552 <__aeabi_dmul+0x4a>
 8001648:	4653      	mov	r3, sl
 800164a:	4323      	orrs	r3, r4
 800164c:	d12a      	bne.n	80016a4 <__aeabi_dmul+0x19c>
 800164e:	2400      	movs	r4, #0
 8001650:	2002      	movs	r0, #2
 8001652:	e796      	b.n	8001582 <__aeabi_dmul+0x7a>
 8001654:	4653      	mov	r3, sl
 8001656:	4323      	orrs	r3, r4
 8001658:	d020      	beq.n	800169c <__aeabi_dmul+0x194>
 800165a:	2c00      	cmp	r4, #0
 800165c:	d100      	bne.n	8001660 <__aeabi_dmul+0x158>
 800165e:	e157      	b.n	8001910 <__aeabi_dmul+0x408>
 8001660:	0020      	movs	r0, r4
 8001662:	f000 fd95 	bl	8002190 <__clzsi2>
 8001666:	0003      	movs	r3, r0
 8001668:	3b0b      	subs	r3, #11
 800166a:	2b1c      	cmp	r3, #28
 800166c:	dd00      	ble.n	8001670 <__aeabi_dmul+0x168>
 800166e:	e149      	b.n	8001904 <__aeabi_dmul+0x3fc>
 8001670:	211d      	movs	r1, #29
 8001672:	1acb      	subs	r3, r1, r3
 8001674:	4651      	mov	r1, sl
 8001676:	0002      	movs	r2, r0
 8001678:	40d9      	lsrs	r1, r3
 800167a:	4653      	mov	r3, sl
 800167c:	3a08      	subs	r2, #8
 800167e:	4094      	lsls	r4, r2
 8001680:	4093      	lsls	r3, r2
 8001682:	430c      	orrs	r4, r1
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <__aeabi_dmul+0x1ec>)
 8001686:	1a12      	subs	r2, r2, r0
 8001688:	2000      	movs	r0, #0
 800168a:	e77a      	b.n	8001582 <__aeabi_dmul+0x7a>
 800168c:	2501      	movs	r5, #1
 800168e:	9b01      	ldr	r3, [sp, #4]
 8001690:	4c14      	ldr	r4, [pc, #80]	; (80016e4 <__aeabi_dmul+0x1dc>)
 8001692:	401d      	ands	r5, r3
 8001694:	2300      	movs	r3, #0
 8001696:	2200      	movs	r2, #0
 8001698:	4699      	mov	r9, r3
 800169a:	e79c      	b.n	80015d6 <__aeabi_dmul+0xce>
 800169c:	2400      	movs	r4, #0
 800169e:	2200      	movs	r2, #0
 80016a0:	2001      	movs	r0, #1
 80016a2:	e76e      	b.n	8001582 <__aeabi_dmul+0x7a>
 80016a4:	4653      	mov	r3, sl
 80016a6:	2003      	movs	r0, #3
 80016a8:	e76b      	b.n	8001582 <__aeabi_dmul+0x7a>
 80016aa:	2300      	movs	r3, #0
 80016ac:	469b      	mov	fp, r3
 80016ae:	3301      	adds	r3, #1
 80016b0:	2704      	movs	r7, #4
 80016b2:	2600      	movs	r6, #0
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	e74c      	b.n	8001552 <__aeabi_dmul+0x4a>
 80016b8:	2303      	movs	r3, #3
 80016ba:	4681      	mov	r9, r0
 80016bc:	270c      	movs	r7, #12
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	e747      	b.n	8001552 <__aeabi_dmul+0x4a>
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	2300      	movs	r3, #0
 80016c6:	2500      	movs	r5, #0
 80016c8:	0312      	lsls	r2, r2, #12
 80016ca:	4699      	mov	r9, r3
 80016cc:	4c05      	ldr	r4, [pc, #20]	; (80016e4 <__aeabi_dmul+0x1dc>)
 80016ce:	e782      	b.n	80015d6 <__aeabi_dmul+0xce>
 80016d0:	465c      	mov	r4, fp
 80016d2:	464b      	mov	r3, r9
 80016d4:	9802      	ldr	r0, [sp, #8]
 80016d6:	e76f      	b.n	80015b8 <__aeabi_dmul+0xb0>
 80016d8:	465c      	mov	r4, fp
 80016da:	464b      	mov	r3, r9
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9802      	ldr	r0, [sp, #8]
 80016e0:	e76a      	b.n	80015b8 <__aeabi_dmul+0xb0>
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	000007ff 	.word	0x000007ff
 80016e8:	fffffc01 	.word	0xfffffc01
 80016ec:	08008290 	.word	0x08008290
 80016f0:	800fffff 	.word	0x800fffff
 80016f4:	fffffc0d 	.word	0xfffffc0d
 80016f8:	464a      	mov	r2, r9
 80016fa:	4649      	mov	r1, r9
 80016fc:	0c17      	lsrs	r7, r2, #16
 80016fe:	0c1a      	lsrs	r2, r3, #16
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	0c1b      	lsrs	r3, r3, #16
 8001704:	0408      	lsls	r0, r1, #16
 8001706:	0019      	movs	r1, r3
 8001708:	0c00      	lsrs	r0, r0, #16
 800170a:	4341      	muls	r1, r0
 800170c:	0015      	movs	r5, r2
 800170e:	4688      	mov	r8, r1
 8001710:	0019      	movs	r1, r3
 8001712:	437d      	muls	r5, r7
 8001714:	4379      	muls	r1, r7
 8001716:	9503      	str	r5, [sp, #12]
 8001718:	4689      	mov	r9, r1
 800171a:	0029      	movs	r1, r5
 800171c:	0015      	movs	r5, r2
 800171e:	4345      	muls	r5, r0
 8001720:	444d      	add	r5, r9
 8001722:	9502      	str	r5, [sp, #8]
 8001724:	4645      	mov	r5, r8
 8001726:	0c2d      	lsrs	r5, r5, #16
 8001728:	46aa      	mov	sl, r5
 800172a:	9d02      	ldr	r5, [sp, #8]
 800172c:	4455      	add	r5, sl
 800172e:	45a9      	cmp	r9, r5
 8001730:	d906      	bls.n	8001740 <__aeabi_dmul+0x238>
 8001732:	468a      	mov	sl, r1
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	0249      	lsls	r1, r1, #9
 8001738:	4689      	mov	r9, r1
 800173a:	44ca      	add	sl, r9
 800173c:	4651      	mov	r1, sl
 800173e:	9103      	str	r1, [sp, #12]
 8001740:	0c29      	lsrs	r1, r5, #16
 8001742:	9104      	str	r1, [sp, #16]
 8001744:	4641      	mov	r1, r8
 8001746:	0409      	lsls	r1, r1, #16
 8001748:	042d      	lsls	r5, r5, #16
 800174a:	0c09      	lsrs	r1, r1, #16
 800174c:	4688      	mov	r8, r1
 800174e:	0029      	movs	r1, r5
 8001750:	0c25      	lsrs	r5, r4, #16
 8001752:	0424      	lsls	r4, r4, #16
 8001754:	4441      	add	r1, r8
 8001756:	0c24      	lsrs	r4, r4, #16
 8001758:	9105      	str	r1, [sp, #20]
 800175a:	0021      	movs	r1, r4
 800175c:	4341      	muls	r1, r0
 800175e:	4688      	mov	r8, r1
 8001760:	0021      	movs	r1, r4
 8001762:	4379      	muls	r1, r7
 8001764:	468a      	mov	sl, r1
 8001766:	4368      	muls	r0, r5
 8001768:	4641      	mov	r1, r8
 800176a:	4450      	add	r0, sl
 800176c:	4681      	mov	r9, r0
 800176e:	0c08      	lsrs	r0, r1, #16
 8001770:	4448      	add	r0, r9
 8001772:	436f      	muls	r7, r5
 8001774:	4582      	cmp	sl, r0
 8001776:	d903      	bls.n	8001780 <__aeabi_dmul+0x278>
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	0249      	lsls	r1, r1, #9
 800177c:	4689      	mov	r9, r1
 800177e:	444f      	add	r7, r9
 8001780:	0c01      	lsrs	r1, r0, #16
 8001782:	4689      	mov	r9, r1
 8001784:	0039      	movs	r1, r7
 8001786:	4449      	add	r1, r9
 8001788:	9102      	str	r1, [sp, #8]
 800178a:	4641      	mov	r1, r8
 800178c:	040f      	lsls	r7, r1, #16
 800178e:	9904      	ldr	r1, [sp, #16]
 8001790:	0c3f      	lsrs	r7, r7, #16
 8001792:	4688      	mov	r8, r1
 8001794:	0400      	lsls	r0, r0, #16
 8001796:	19c0      	adds	r0, r0, r7
 8001798:	4480      	add	r8, r0
 800179a:	4641      	mov	r1, r8
 800179c:	9104      	str	r1, [sp, #16]
 800179e:	4659      	mov	r1, fp
 80017a0:	0c0f      	lsrs	r7, r1, #16
 80017a2:	0409      	lsls	r1, r1, #16
 80017a4:	0c09      	lsrs	r1, r1, #16
 80017a6:	4688      	mov	r8, r1
 80017a8:	4359      	muls	r1, r3
 80017aa:	468a      	mov	sl, r1
 80017ac:	0039      	movs	r1, r7
 80017ae:	4351      	muls	r1, r2
 80017b0:	4689      	mov	r9, r1
 80017b2:	4641      	mov	r1, r8
 80017b4:	434a      	muls	r2, r1
 80017b6:	4651      	mov	r1, sl
 80017b8:	0c09      	lsrs	r1, r1, #16
 80017ba:	468b      	mov	fp, r1
 80017bc:	437b      	muls	r3, r7
 80017be:	18d2      	adds	r2, r2, r3
 80017c0:	445a      	add	r2, fp
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d903      	bls.n	80017ce <__aeabi_dmul+0x2c6>
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	025b      	lsls	r3, r3, #9
 80017ca:	469b      	mov	fp, r3
 80017cc:	44d9      	add	r9, fp
 80017ce:	4651      	mov	r1, sl
 80017d0:	0409      	lsls	r1, r1, #16
 80017d2:	0c09      	lsrs	r1, r1, #16
 80017d4:	468a      	mov	sl, r1
 80017d6:	4641      	mov	r1, r8
 80017d8:	4361      	muls	r1, r4
 80017da:	437c      	muls	r4, r7
 80017dc:	0c13      	lsrs	r3, r2, #16
 80017de:	0412      	lsls	r2, r2, #16
 80017e0:	444b      	add	r3, r9
 80017e2:	4452      	add	r2, sl
 80017e4:	46a1      	mov	r9, r4
 80017e6:	468a      	mov	sl, r1
 80017e8:	003c      	movs	r4, r7
 80017ea:	4641      	mov	r1, r8
 80017ec:	436c      	muls	r4, r5
 80017ee:	434d      	muls	r5, r1
 80017f0:	4651      	mov	r1, sl
 80017f2:	444d      	add	r5, r9
 80017f4:	0c0f      	lsrs	r7, r1, #16
 80017f6:	197d      	adds	r5, r7, r5
 80017f8:	45a9      	cmp	r9, r5
 80017fa:	d903      	bls.n	8001804 <__aeabi_dmul+0x2fc>
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0249      	lsls	r1, r1, #9
 8001800:	4688      	mov	r8, r1
 8001802:	4444      	add	r4, r8
 8001804:	9f04      	ldr	r7, [sp, #16]
 8001806:	9903      	ldr	r1, [sp, #12]
 8001808:	46b8      	mov	r8, r7
 800180a:	4441      	add	r1, r8
 800180c:	468b      	mov	fp, r1
 800180e:	4583      	cmp	fp, r0
 8001810:	4180      	sbcs	r0, r0
 8001812:	4241      	negs	r1, r0
 8001814:	4688      	mov	r8, r1
 8001816:	4651      	mov	r1, sl
 8001818:	0408      	lsls	r0, r1, #16
 800181a:	042f      	lsls	r7, r5, #16
 800181c:	0c00      	lsrs	r0, r0, #16
 800181e:	183f      	adds	r7, r7, r0
 8001820:	4658      	mov	r0, fp
 8001822:	9902      	ldr	r1, [sp, #8]
 8001824:	1810      	adds	r0, r2, r0
 8001826:	4689      	mov	r9, r1
 8001828:	4290      	cmp	r0, r2
 800182a:	4192      	sbcs	r2, r2
 800182c:	444f      	add	r7, r9
 800182e:	46ba      	mov	sl, r7
 8001830:	4252      	negs	r2, r2
 8001832:	4699      	mov	r9, r3
 8001834:	4693      	mov	fp, r2
 8001836:	44c2      	add	sl, r8
 8001838:	44d1      	add	r9, sl
 800183a:	44cb      	add	fp, r9
 800183c:	428f      	cmp	r7, r1
 800183e:	41bf      	sbcs	r7, r7
 8001840:	45c2      	cmp	sl, r8
 8001842:	4189      	sbcs	r1, r1
 8001844:	4599      	cmp	r9, r3
 8001846:	419b      	sbcs	r3, r3
 8001848:	4593      	cmp	fp, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	427f      	negs	r7, r7
 800184e:	4249      	negs	r1, r1
 8001850:	0c2d      	lsrs	r5, r5, #16
 8001852:	4252      	negs	r2, r2
 8001854:	430f      	orrs	r7, r1
 8001856:	425b      	negs	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	197f      	adds	r7, r7, r5
 800185c:	18ff      	adds	r7, r7, r3
 800185e:	465b      	mov	r3, fp
 8001860:	193c      	adds	r4, r7, r4
 8001862:	0ddb      	lsrs	r3, r3, #23
 8001864:	9a05      	ldr	r2, [sp, #20]
 8001866:	0264      	lsls	r4, r4, #9
 8001868:	431c      	orrs	r4, r3
 800186a:	0243      	lsls	r3, r0, #9
 800186c:	4313      	orrs	r3, r2
 800186e:	1e5d      	subs	r5, r3, #1
 8001870:	41ab      	sbcs	r3, r5
 8001872:	465a      	mov	r2, fp
 8001874:	0dc0      	lsrs	r0, r0, #23
 8001876:	4303      	orrs	r3, r0
 8001878:	0252      	lsls	r2, r2, #9
 800187a:	4313      	orrs	r3, r2
 800187c:	01e2      	lsls	r2, r4, #7
 800187e:	d556      	bpl.n	800192e <__aeabi_dmul+0x426>
 8001880:	2001      	movs	r0, #1
 8001882:	085a      	lsrs	r2, r3, #1
 8001884:	4003      	ands	r3, r0
 8001886:	4313      	orrs	r3, r2
 8001888:	07e2      	lsls	r2, r4, #31
 800188a:	4313      	orrs	r3, r2
 800188c:	0864      	lsrs	r4, r4, #1
 800188e:	485a      	ldr	r0, [pc, #360]	; (80019f8 <__aeabi_dmul+0x4f0>)
 8001890:	4460      	add	r0, ip
 8001892:	2800      	cmp	r0, #0
 8001894:	dd4d      	ble.n	8001932 <__aeabi_dmul+0x42a>
 8001896:	075a      	lsls	r2, r3, #29
 8001898:	d009      	beq.n	80018ae <__aeabi_dmul+0x3a6>
 800189a:	220f      	movs	r2, #15
 800189c:	401a      	ands	r2, r3
 800189e:	2a04      	cmp	r2, #4
 80018a0:	d005      	beq.n	80018ae <__aeabi_dmul+0x3a6>
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	429a      	cmp	r2, r3
 80018a6:	419b      	sbcs	r3, r3
 80018a8:	425b      	negs	r3, r3
 80018aa:	18e4      	adds	r4, r4, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	01e2      	lsls	r2, r4, #7
 80018b0:	d504      	bpl.n	80018bc <__aeabi_dmul+0x3b4>
 80018b2:	2080      	movs	r0, #128	; 0x80
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <__aeabi_dmul+0x4f4>)
 80018b6:	00c0      	lsls	r0, r0, #3
 80018b8:	4014      	ands	r4, r2
 80018ba:	4460      	add	r0, ip
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <__aeabi_dmul+0x4f8>)
 80018be:	4290      	cmp	r0, r2
 80018c0:	dd00      	ble.n	80018c4 <__aeabi_dmul+0x3bc>
 80018c2:	e6e3      	b.n	800168c <__aeabi_dmul+0x184>
 80018c4:	2501      	movs	r5, #1
 80018c6:	08db      	lsrs	r3, r3, #3
 80018c8:	0762      	lsls	r2, r4, #29
 80018ca:	431a      	orrs	r2, r3
 80018cc:	0264      	lsls	r4, r4, #9
 80018ce:	9b01      	ldr	r3, [sp, #4]
 80018d0:	4691      	mov	r9, r2
 80018d2:	0b22      	lsrs	r2, r4, #12
 80018d4:	0544      	lsls	r4, r0, #21
 80018d6:	0d64      	lsrs	r4, r4, #21
 80018d8:	401d      	ands	r5, r3
 80018da:	e67c      	b.n	80015d6 <__aeabi_dmul+0xce>
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	4659      	mov	r1, fp
 80018e0:	0312      	lsls	r2, r2, #12
 80018e2:	4211      	tst	r1, r2
 80018e4:	d008      	beq.n	80018f8 <__aeabi_dmul+0x3f0>
 80018e6:	4214      	tst	r4, r2
 80018e8:	d106      	bne.n	80018f8 <__aeabi_dmul+0x3f0>
 80018ea:	4322      	orrs	r2, r4
 80018ec:	0312      	lsls	r2, r2, #12
 80018ee:	0b12      	lsrs	r2, r2, #12
 80018f0:	4645      	mov	r5, r8
 80018f2:	4699      	mov	r9, r3
 80018f4:	4c43      	ldr	r4, [pc, #268]	; (8001a04 <__aeabi_dmul+0x4fc>)
 80018f6:	e66e      	b.n	80015d6 <__aeabi_dmul+0xce>
 80018f8:	465b      	mov	r3, fp
 80018fa:	431a      	orrs	r2, r3
 80018fc:	0312      	lsls	r2, r2, #12
 80018fe:	0b12      	lsrs	r2, r2, #12
 8001900:	4c40      	ldr	r4, [pc, #256]	; (8001a04 <__aeabi_dmul+0x4fc>)
 8001902:	e668      	b.n	80015d6 <__aeabi_dmul+0xce>
 8001904:	0003      	movs	r3, r0
 8001906:	4654      	mov	r4, sl
 8001908:	3b28      	subs	r3, #40	; 0x28
 800190a:	409c      	lsls	r4, r3
 800190c:	2300      	movs	r3, #0
 800190e:	e6b9      	b.n	8001684 <__aeabi_dmul+0x17c>
 8001910:	f000 fc3e 	bl	8002190 <__clzsi2>
 8001914:	3020      	adds	r0, #32
 8001916:	e6a6      	b.n	8001666 <__aeabi_dmul+0x15e>
 8001918:	0003      	movs	r3, r0
 800191a:	3b28      	subs	r3, #40	; 0x28
 800191c:	409f      	lsls	r7, r3
 800191e:	2300      	movs	r3, #0
 8001920:	46bb      	mov	fp, r7
 8001922:	4699      	mov	r9, r3
 8001924:	e68a      	b.n	800163c <__aeabi_dmul+0x134>
 8001926:	f000 fc33 	bl	8002190 <__clzsi2>
 800192a:	3020      	adds	r0, #32
 800192c:	e674      	b.n	8001618 <__aeabi_dmul+0x110>
 800192e:	46b4      	mov	ip, r6
 8001930:	e7ad      	b.n	800188e <__aeabi_dmul+0x386>
 8001932:	2501      	movs	r5, #1
 8001934:	1a2a      	subs	r2, r5, r0
 8001936:	2a38      	cmp	r2, #56	; 0x38
 8001938:	dd06      	ble.n	8001948 <__aeabi_dmul+0x440>
 800193a:	9b01      	ldr	r3, [sp, #4]
 800193c:	2400      	movs	r4, #0
 800193e:	401d      	ands	r5, r3
 8001940:	2300      	movs	r3, #0
 8001942:	2200      	movs	r2, #0
 8001944:	4699      	mov	r9, r3
 8001946:	e646      	b.n	80015d6 <__aeabi_dmul+0xce>
 8001948:	2a1f      	cmp	r2, #31
 800194a:	dc21      	bgt.n	8001990 <__aeabi_dmul+0x488>
 800194c:	2520      	movs	r5, #32
 800194e:	0020      	movs	r0, r4
 8001950:	1aad      	subs	r5, r5, r2
 8001952:	001e      	movs	r6, r3
 8001954:	40ab      	lsls	r3, r5
 8001956:	40a8      	lsls	r0, r5
 8001958:	40d6      	lsrs	r6, r2
 800195a:	1e5d      	subs	r5, r3, #1
 800195c:	41ab      	sbcs	r3, r5
 800195e:	4330      	orrs	r0, r6
 8001960:	4318      	orrs	r0, r3
 8001962:	40d4      	lsrs	r4, r2
 8001964:	0743      	lsls	r3, r0, #29
 8001966:	d009      	beq.n	800197c <__aeabi_dmul+0x474>
 8001968:	230f      	movs	r3, #15
 800196a:	4003      	ands	r3, r0
 800196c:	2b04      	cmp	r3, #4
 800196e:	d005      	beq.n	800197c <__aeabi_dmul+0x474>
 8001970:	0003      	movs	r3, r0
 8001972:	1d18      	adds	r0, r3, #4
 8001974:	4298      	cmp	r0, r3
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	18e4      	adds	r4, r4, r3
 800197c:	0223      	lsls	r3, r4, #8
 800197e:	d521      	bpl.n	80019c4 <__aeabi_dmul+0x4bc>
 8001980:	2501      	movs	r5, #1
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	2401      	movs	r4, #1
 8001986:	401d      	ands	r5, r3
 8001988:	2300      	movs	r3, #0
 800198a:	2200      	movs	r2, #0
 800198c:	4699      	mov	r9, r3
 800198e:	e622      	b.n	80015d6 <__aeabi_dmul+0xce>
 8001990:	251f      	movs	r5, #31
 8001992:	0021      	movs	r1, r4
 8001994:	426d      	negs	r5, r5
 8001996:	1a28      	subs	r0, r5, r0
 8001998:	40c1      	lsrs	r1, r0
 800199a:	0008      	movs	r0, r1
 800199c:	2a20      	cmp	r2, #32
 800199e:	d01d      	beq.n	80019dc <__aeabi_dmul+0x4d4>
 80019a0:	355f      	adds	r5, #95	; 0x5f
 80019a2:	1aaa      	subs	r2, r5, r2
 80019a4:	4094      	lsls	r4, r2
 80019a6:	4323      	orrs	r3, r4
 80019a8:	1e5c      	subs	r4, r3, #1
 80019aa:	41a3      	sbcs	r3, r4
 80019ac:	2507      	movs	r5, #7
 80019ae:	4303      	orrs	r3, r0
 80019b0:	401d      	ands	r5, r3
 80019b2:	2200      	movs	r2, #0
 80019b4:	2d00      	cmp	r5, #0
 80019b6:	d009      	beq.n	80019cc <__aeabi_dmul+0x4c4>
 80019b8:	220f      	movs	r2, #15
 80019ba:	2400      	movs	r4, #0
 80019bc:	401a      	ands	r2, r3
 80019be:	0018      	movs	r0, r3
 80019c0:	2a04      	cmp	r2, #4
 80019c2:	d1d6      	bne.n	8001972 <__aeabi_dmul+0x46a>
 80019c4:	0003      	movs	r3, r0
 80019c6:	0765      	lsls	r5, r4, #29
 80019c8:	0264      	lsls	r4, r4, #9
 80019ca:	0b22      	lsrs	r2, r4, #12
 80019cc:	08db      	lsrs	r3, r3, #3
 80019ce:	432b      	orrs	r3, r5
 80019d0:	2501      	movs	r5, #1
 80019d2:	4699      	mov	r9, r3
 80019d4:	9b01      	ldr	r3, [sp, #4]
 80019d6:	2400      	movs	r4, #0
 80019d8:	401d      	ands	r5, r3
 80019da:	e5fc      	b.n	80015d6 <__aeabi_dmul+0xce>
 80019dc:	2400      	movs	r4, #0
 80019de:	e7e2      	b.n	80019a6 <__aeabi_dmul+0x49e>
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	2501      	movs	r5, #1
 80019e4:	0312      	lsls	r2, r2, #12
 80019e6:	4322      	orrs	r2, r4
 80019e8:	9901      	ldr	r1, [sp, #4]
 80019ea:	0312      	lsls	r2, r2, #12
 80019ec:	0b12      	lsrs	r2, r2, #12
 80019ee:	400d      	ands	r5, r1
 80019f0:	4699      	mov	r9, r3
 80019f2:	4c04      	ldr	r4, [pc, #16]	; (8001a04 <__aeabi_dmul+0x4fc>)
 80019f4:	e5ef      	b.n	80015d6 <__aeabi_dmul+0xce>
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	000003ff 	.word	0x000003ff
 80019fc:	feffffff 	.word	0xfeffffff
 8001a00:	000007fe 	.word	0x000007fe
 8001a04:	000007ff 	.word	0x000007ff

08001a08 <__aeabi_dsub>:
 8001a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a0a:	4646      	mov	r6, r8
 8001a0c:	46d6      	mov	lr, sl
 8001a0e:	464f      	mov	r7, r9
 8001a10:	030c      	lsls	r4, r1, #12
 8001a12:	b5c0      	push	{r6, r7, lr}
 8001a14:	0fcd      	lsrs	r5, r1, #31
 8001a16:	004e      	lsls	r6, r1, #1
 8001a18:	0a61      	lsrs	r1, r4, #9
 8001a1a:	0f44      	lsrs	r4, r0, #29
 8001a1c:	430c      	orrs	r4, r1
 8001a1e:	00c1      	lsls	r1, r0, #3
 8001a20:	0058      	lsls	r0, r3, #1
 8001a22:	0d40      	lsrs	r0, r0, #21
 8001a24:	4684      	mov	ip, r0
 8001a26:	468a      	mov	sl, r1
 8001a28:	000f      	movs	r7, r1
 8001a2a:	0319      	lsls	r1, r3, #12
 8001a2c:	0f50      	lsrs	r0, r2, #29
 8001a2e:	0a49      	lsrs	r1, r1, #9
 8001a30:	4301      	orrs	r1, r0
 8001a32:	48c6      	ldr	r0, [pc, #792]	; (8001d4c <__aeabi_dsub+0x344>)
 8001a34:	0d76      	lsrs	r6, r6, #21
 8001a36:	46a8      	mov	r8, r5
 8001a38:	0fdb      	lsrs	r3, r3, #31
 8001a3a:	00d2      	lsls	r2, r2, #3
 8001a3c:	4584      	cmp	ip, r0
 8001a3e:	d100      	bne.n	8001a42 <__aeabi_dsub+0x3a>
 8001a40:	e0d8      	b.n	8001bf4 <__aeabi_dsub+0x1ec>
 8001a42:	2001      	movs	r0, #1
 8001a44:	4043      	eors	r3, r0
 8001a46:	42ab      	cmp	r3, r5
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x44>
 8001a4a:	e0a6      	b.n	8001b9a <__aeabi_dsub+0x192>
 8001a4c:	4660      	mov	r0, ip
 8001a4e:	1a35      	subs	r5, r6, r0
 8001a50:	2d00      	cmp	r5, #0
 8001a52:	dc00      	bgt.n	8001a56 <__aeabi_dsub+0x4e>
 8001a54:	e105      	b.n	8001c62 <__aeabi_dsub+0x25a>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d110      	bne.n	8001a7c <__aeabi_dsub+0x74>
 8001a5a:	000b      	movs	r3, r1
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x5a>
 8001a60:	e0d7      	b.n	8001c12 <__aeabi_dsub+0x20a>
 8001a62:	1e6b      	subs	r3, r5, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d000      	beq.n	8001a6a <__aeabi_dsub+0x62>
 8001a68:	e14b      	b.n	8001d02 <__aeabi_dsub+0x2fa>
 8001a6a:	4653      	mov	r3, sl
 8001a6c:	1a9f      	subs	r7, r3, r2
 8001a6e:	45ba      	cmp	sl, r7
 8001a70:	4180      	sbcs	r0, r0
 8001a72:	1a64      	subs	r4, r4, r1
 8001a74:	4240      	negs	r0, r0
 8001a76:	1a24      	subs	r4, r4, r0
 8001a78:	2601      	movs	r6, #1
 8001a7a:	e01e      	b.n	8001aba <__aeabi_dsub+0xb2>
 8001a7c:	4bb3      	ldr	r3, [pc, #716]	; (8001d4c <__aeabi_dsub+0x344>)
 8001a7e:	429e      	cmp	r6, r3
 8001a80:	d048      	beq.n	8001b14 <__aeabi_dsub+0x10c>
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	4319      	orrs	r1, r3
 8001a88:	2d38      	cmp	r5, #56	; 0x38
 8001a8a:	dd00      	ble.n	8001a8e <__aeabi_dsub+0x86>
 8001a8c:	e119      	b.n	8001cc2 <__aeabi_dsub+0x2ba>
 8001a8e:	2d1f      	cmp	r5, #31
 8001a90:	dd00      	ble.n	8001a94 <__aeabi_dsub+0x8c>
 8001a92:	e14c      	b.n	8001d2e <__aeabi_dsub+0x326>
 8001a94:	2320      	movs	r3, #32
 8001a96:	000f      	movs	r7, r1
 8001a98:	1b5b      	subs	r3, r3, r5
 8001a9a:	0010      	movs	r0, r2
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	409f      	lsls	r7, r3
 8001aa0:	40e8      	lsrs	r0, r5
 8001aa2:	1e53      	subs	r3, r2, #1
 8001aa4:	419a      	sbcs	r2, r3
 8001aa6:	40e9      	lsrs	r1, r5
 8001aa8:	4307      	orrs	r7, r0
 8001aaa:	4317      	orrs	r7, r2
 8001aac:	4653      	mov	r3, sl
 8001aae:	1bdf      	subs	r7, r3, r7
 8001ab0:	1a61      	subs	r1, r4, r1
 8001ab2:	45ba      	cmp	sl, r7
 8001ab4:	41a4      	sbcs	r4, r4
 8001ab6:	4264      	negs	r4, r4
 8001ab8:	1b0c      	subs	r4, r1, r4
 8001aba:	0223      	lsls	r3, r4, #8
 8001abc:	d400      	bmi.n	8001ac0 <__aeabi_dsub+0xb8>
 8001abe:	e0c5      	b.n	8001c4c <__aeabi_dsub+0x244>
 8001ac0:	0264      	lsls	r4, r4, #9
 8001ac2:	0a65      	lsrs	r5, r4, #9
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0xc2>
 8001ac8:	e0f6      	b.n	8001cb8 <__aeabi_dsub+0x2b0>
 8001aca:	0028      	movs	r0, r5
 8001acc:	f000 fb60 	bl	8002190 <__clzsi2>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	3b08      	subs	r3, #8
 8001ad4:	2b1f      	cmp	r3, #31
 8001ad6:	dd00      	ble.n	8001ada <__aeabi_dsub+0xd2>
 8001ad8:	e0e9      	b.n	8001cae <__aeabi_dsub+0x2a6>
 8001ada:	2220      	movs	r2, #32
 8001adc:	003c      	movs	r4, r7
 8001ade:	1ad2      	subs	r2, r2, r3
 8001ae0:	409d      	lsls	r5, r3
 8001ae2:	40d4      	lsrs	r4, r2
 8001ae4:	409f      	lsls	r7, r3
 8001ae6:	4325      	orrs	r5, r4
 8001ae8:	429e      	cmp	r6, r3
 8001aea:	dd00      	ble.n	8001aee <__aeabi_dsub+0xe6>
 8001aec:	e0db      	b.n	8001ca6 <__aeabi_dsub+0x29e>
 8001aee:	1b9e      	subs	r6, r3, r6
 8001af0:	1c73      	adds	r3, r6, #1
 8001af2:	2b1f      	cmp	r3, #31
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_dsub+0xf0>
 8001af6:	e10a      	b.n	8001d0e <__aeabi_dsub+0x306>
 8001af8:	2220      	movs	r2, #32
 8001afa:	0038      	movs	r0, r7
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	0029      	movs	r1, r5
 8001b00:	4097      	lsls	r7, r2
 8001b02:	002c      	movs	r4, r5
 8001b04:	4091      	lsls	r1, r2
 8001b06:	40d8      	lsrs	r0, r3
 8001b08:	1e7a      	subs	r2, r7, #1
 8001b0a:	4197      	sbcs	r7, r2
 8001b0c:	40dc      	lsrs	r4, r3
 8001b0e:	2600      	movs	r6, #0
 8001b10:	4301      	orrs	r1, r0
 8001b12:	430f      	orrs	r7, r1
 8001b14:	077b      	lsls	r3, r7, #29
 8001b16:	d009      	beq.n	8001b2c <__aeabi_dsub+0x124>
 8001b18:	230f      	movs	r3, #15
 8001b1a:	403b      	ands	r3, r7
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d005      	beq.n	8001b2c <__aeabi_dsub+0x124>
 8001b20:	1d3b      	adds	r3, r7, #4
 8001b22:	42bb      	cmp	r3, r7
 8001b24:	41bf      	sbcs	r7, r7
 8001b26:	427f      	negs	r7, r7
 8001b28:	19e4      	adds	r4, r4, r7
 8001b2a:	001f      	movs	r7, r3
 8001b2c:	0223      	lsls	r3, r4, #8
 8001b2e:	d525      	bpl.n	8001b7c <__aeabi_dsub+0x174>
 8001b30:	4b86      	ldr	r3, [pc, #536]	; (8001d4c <__aeabi_dsub+0x344>)
 8001b32:	3601      	adds	r6, #1
 8001b34:	429e      	cmp	r6, r3
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x132>
 8001b38:	e0af      	b.n	8001c9a <__aeabi_dsub+0x292>
 8001b3a:	4b85      	ldr	r3, [pc, #532]	; (8001d50 <__aeabi_dsub+0x348>)
 8001b3c:	2501      	movs	r5, #1
 8001b3e:	401c      	ands	r4, r3
 8001b40:	4643      	mov	r3, r8
 8001b42:	0762      	lsls	r2, r4, #29
 8001b44:	08ff      	lsrs	r7, r7, #3
 8001b46:	0264      	lsls	r4, r4, #9
 8001b48:	0576      	lsls	r6, r6, #21
 8001b4a:	4317      	orrs	r7, r2
 8001b4c:	0b24      	lsrs	r4, r4, #12
 8001b4e:	0d76      	lsrs	r6, r6, #21
 8001b50:	401d      	ands	r5, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	0324      	lsls	r4, r4, #12
 8001b56:	0b23      	lsrs	r3, r4, #12
 8001b58:	0d0c      	lsrs	r4, r1, #20
 8001b5a:	4a7e      	ldr	r2, [pc, #504]	; (8001d54 <__aeabi_dsub+0x34c>)
 8001b5c:	0524      	lsls	r4, r4, #20
 8001b5e:	431c      	orrs	r4, r3
 8001b60:	4014      	ands	r4, r2
 8001b62:	0533      	lsls	r3, r6, #20
 8001b64:	4323      	orrs	r3, r4
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	07ed      	lsls	r5, r5, #31
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	432b      	orrs	r3, r5
 8001b6e:	0038      	movs	r0, r7
 8001b70:	0019      	movs	r1, r3
 8001b72:	bc1c      	pop	{r2, r3, r4}
 8001b74:	4690      	mov	r8, r2
 8001b76:	4699      	mov	r9, r3
 8001b78:	46a2      	mov	sl, r4
 8001b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b7c:	2501      	movs	r5, #1
 8001b7e:	4643      	mov	r3, r8
 8001b80:	0762      	lsls	r2, r4, #29
 8001b82:	08ff      	lsrs	r7, r7, #3
 8001b84:	4317      	orrs	r7, r2
 8001b86:	08e4      	lsrs	r4, r4, #3
 8001b88:	401d      	ands	r5, r3
 8001b8a:	4b70      	ldr	r3, [pc, #448]	; (8001d4c <__aeabi_dsub+0x344>)
 8001b8c:	429e      	cmp	r6, r3
 8001b8e:	d036      	beq.n	8001bfe <__aeabi_dsub+0x1f6>
 8001b90:	0324      	lsls	r4, r4, #12
 8001b92:	0576      	lsls	r6, r6, #21
 8001b94:	0b24      	lsrs	r4, r4, #12
 8001b96:	0d76      	lsrs	r6, r6, #21
 8001b98:	e7db      	b.n	8001b52 <__aeabi_dsub+0x14a>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	1af3      	subs	r3, r6, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_dsub+0x19c>
 8001ba2:	e094      	b.n	8001cce <__aeabi_dsub+0x2c6>
 8001ba4:	4660      	mov	r0, ip
 8001ba6:	2800      	cmp	r0, #0
 8001ba8:	d035      	beq.n	8001c16 <__aeabi_dsub+0x20e>
 8001baa:	4868      	ldr	r0, [pc, #416]	; (8001d4c <__aeabi_dsub+0x344>)
 8001bac:	4286      	cmp	r6, r0
 8001bae:	d0b1      	beq.n	8001b14 <__aeabi_dsub+0x10c>
 8001bb0:	2780      	movs	r7, #128	; 0x80
 8001bb2:	043f      	lsls	r7, r7, #16
 8001bb4:	4339      	orrs	r1, r7
 8001bb6:	2b38      	cmp	r3, #56	; 0x38
 8001bb8:	dc00      	bgt.n	8001bbc <__aeabi_dsub+0x1b4>
 8001bba:	e0fd      	b.n	8001db8 <__aeabi_dsub+0x3b0>
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	0017      	movs	r7, r2
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	1e7a      	subs	r2, r7, #1
 8001bc4:	4197      	sbcs	r7, r2
 8001bc6:	4457      	add	r7, sl
 8001bc8:	4557      	cmp	r7, sl
 8001bca:	4180      	sbcs	r0, r0
 8001bcc:	1909      	adds	r1, r1, r4
 8001bce:	4244      	negs	r4, r0
 8001bd0:	190c      	adds	r4, r1, r4
 8001bd2:	0223      	lsls	r3, r4, #8
 8001bd4:	d53a      	bpl.n	8001c4c <__aeabi_dsub+0x244>
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <__aeabi_dsub+0x344>)
 8001bd8:	3601      	adds	r6, #1
 8001bda:	429e      	cmp	r6, r3
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x1d8>
 8001bde:	e14b      	b.n	8001e78 <__aeabi_dsub+0x470>
 8001be0:	2201      	movs	r2, #1
 8001be2:	4b5b      	ldr	r3, [pc, #364]	; (8001d50 <__aeabi_dsub+0x348>)
 8001be4:	401c      	ands	r4, r3
 8001be6:	087b      	lsrs	r3, r7, #1
 8001be8:	4017      	ands	r7, r2
 8001bea:	431f      	orrs	r7, r3
 8001bec:	07e2      	lsls	r2, r4, #31
 8001bee:	4317      	orrs	r7, r2
 8001bf0:	0864      	lsrs	r4, r4, #1
 8001bf2:	e78f      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	4310      	orrs	r0, r2
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x1f4>
 8001bfa:	e724      	b.n	8001a46 <__aeabi_dsub+0x3e>
 8001bfc:	e721      	b.n	8001a42 <__aeabi_dsub+0x3a>
 8001bfe:	0023      	movs	r3, r4
 8001c00:	433b      	orrs	r3, r7
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x1fe>
 8001c04:	e1b9      	b.n	8001f7a <__aeabi_dsub+0x572>
 8001c06:	2280      	movs	r2, #128	; 0x80
 8001c08:	0312      	lsls	r2, r2, #12
 8001c0a:	4314      	orrs	r4, r2
 8001c0c:	0324      	lsls	r4, r4, #12
 8001c0e:	0b24      	lsrs	r4, r4, #12
 8001c10:	e79f      	b.n	8001b52 <__aeabi_dsub+0x14a>
 8001c12:	002e      	movs	r6, r5
 8001c14:	e77e      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001c16:	0008      	movs	r0, r1
 8001c18:	4310      	orrs	r0, r2
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x216>
 8001c1c:	e0ca      	b.n	8001db4 <__aeabi_dsub+0x3ac>
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	4684      	mov	ip, r0
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d000      	beq.n	8001c28 <__aeabi_dsub+0x220>
 8001c26:	e0e7      	b.n	8001df8 <__aeabi_dsub+0x3f0>
 8001c28:	4452      	add	r2, sl
 8001c2a:	4552      	cmp	r2, sl
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	1864      	adds	r4, r4, r1
 8001c30:	4240      	negs	r0, r0
 8001c32:	1824      	adds	r4, r4, r0
 8001c34:	0017      	movs	r7, r2
 8001c36:	2601      	movs	r6, #1
 8001c38:	0223      	lsls	r3, r4, #8
 8001c3a:	d507      	bpl.n	8001c4c <__aeabi_dsub+0x244>
 8001c3c:	2602      	movs	r6, #2
 8001c3e:	e7cf      	b.n	8001be0 <__aeabi_dsub+0x1d8>
 8001c40:	4664      	mov	r4, ip
 8001c42:	432c      	orrs	r4, r5
 8001c44:	d100      	bne.n	8001c48 <__aeabi_dsub+0x240>
 8001c46:	e1b3      	b.n	8001fb0 <__aeabi_dsub+0x5a8>
 8001c48:	002c      	movs	r4, r5
 8001c4a:	4667      	mov	r7, ip
 8001c4c:	077b      	lsls	r3, r7, #29
 8001c4e:	d000      	beq.n	8001c52 <__aeabi_dsub+0x24a>
 8001c50:	e762      	b.n	8001b18 <__aeabi_dsub+0x110>
 8001c52:	0763      	lsls	r3, r4, #29
 8001c54:	08ff      	lsrs	r7, r7, #3
 8001c56:	431f      	orrs	r7, r3
 8001c58:	2501      	movs	r5, #1
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	08e4      	lsrs	r4, r4, #3
 8001c5e:	401d      	ands	r5, r3
 8001c60:	e793      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001c62:	2d00      	cmp	r5, #0
 8001c64:	d178      	bne.n	8001d58 <__aeabi_dsub+0x350>
 8001c66:	1c75      	adds	r5, r6, #1
 8001c68:	056d      	lsls	r5, r5, #21
 8001c6a:	0d6d      	lsrs	r5, r5, #21
 8001c6c:	2d01      	cmp	r5, #1
 8001c6e:	dc00      	bgt.n	8001c72 <__aeabi_dsub+0x26a>
 8001c70:	e0f2      	b.n	8001e58 <__aeabi_dsub+0x450>
 8001c72:	4650      	mov	r0, sl
 8001c74:	1a80      	subs	r0, r0, r2
 8001c76:	4582      	cmp	sl, r0
 8001c78:	41bf      	sbcs	r7, r7
 8001c7a:	1a65      	subs	r5, r4, r1
 8001c7c:	427f      	negs	r7, r7
 8001c7e:	1bed      	subs	r5, r5, r7
 8001c80:	4684      	mov	ip, r0
 8001c82:	0228      	lsls	r0, r5, #8
 8001c84:	d400      	bmi.n	8001c88 <__aeabi_dsub+0x280>
 8001c86:	e08c      	b.n	8001da2 <__aeabi_dsub+0x39a>
 8001c88:	4650      	mov	r0, sl
 8001c8a:	1a17      	subs	r7, r2, r0
 8001c8c:	42ba      	cmp	r2, r7
 8001c8e:	4192      	sbcs	r2, r2
 8001c90:	1b0c      	subs	r4, r1, r4
 8001c92:	4255      	negs	r5, r2
 8001c94:	1b65      	subs	r5, r4, r5
 8001c96:	4698      	mov	r8, r3
 8001c98:	e714      	b.n	8001ac4 <__aeabi_dsub+0xbc>
 8001c9a:	2501      	movs	r5, #1
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	401d      	ands	r5, r3
 8001ca2:	2700      	movs	r7, #0
 8001ca4:	e755      	b.n	8001b52 <__aeabi_dsub+0x14a>
 8001ca6:	4c2a      	ldr	r4, [pc, #168]	; (8001d50 <__aeabi_dsub+0x348>)
 8001ca8:	1af6      	subs	r6, r6, r3
 8001caa:	402c      	ands	r4, r5
 8001cac:	e732      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001cae:	003d      	movs	r5, r7
 8001cb0:	3828      	subs	r0, #40	; 0x28
 8001cb2:	4085      	lsls	r5, r0
 8001cb4:	2700      	movs	r7, #0
 8001cb6:	e717      	b.n	8001ae8 <__aeabi_dsub+0xe0>
 8001cb8:	0038      	movs	r0, r7
 8001cba:	f000 fa69 	bl	8002190 <__clzsi2>
 8001cbe:	3020      	adds	r0, #32
 8001cc0:	e706      	b.n	8001ad0 <__aeabi_dsub+0xc8>
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	0017      	movs	r7, r2
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	1e7a      	subs	r2, r7, #1
 8001cca:	4197      	sbcs	r7, r2
 8001ccc:	e6ee      	b.n	8001aac <__aeabi_dsub+0xa4>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x2cc>
 8001cd2:	e0e5      	b.n	8001ea0 <__aeabi_dsub+0x498>
 8001cd4:	1c73      	adds	r3, r6, #1
 8001cd6:	469c      	mov	ip, r3
 8001cd8:	055b      	lsls	r3, r3, #21
 8001cda:	0d5b      	lsrs	r3, r3, #21
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	dc00      	bgt.n	8001ce2 <__aeabi_dsub+0x2da>
 8001ce0:	e09f      	b.n	8001e22 <__aeabi_dsub+0x41a>
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <__aeabi_dsub+0x344>)
 8001ce4:	459c      	cmp	ip, r3
 8001ce6:	d100      	bne.n	8001cea <__aeabi_dsub+0x2e2>
 8001ce8:	e0c5      	b.n	8001e76 <__aeabi_dsub+0x46e>
 8001cea:	4452      	add	r2, sl
 8001cec:	4552      	cmp	r2, sl
 8001cee:	4180      	sbcs	r0, r0
 8001cf0:	1864      	adds	r4, r4, r1
 8001cf2:	4240      	negs	r0, r0
 8001cf4:	1824      	adds	r4, r4, r0
 8001cf6:	07e7      	lsls	r7, r4, #31
 8001cf8:	0852      	lsrs	r2, r2, #1
 8001cfa:	4317      	orrs	r7, r2
 8001cfc:	0864      	lsrs	r4, r4, #1
 8001cfe:	4666      	mov	r6, ip
 8001d00:	e708      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001d02:	4812      	ldr	r0, [pc, #72]	; (8001d4c <__aeabi_dsub+0x344>)
 8001d04:	4285      	cmp	r5, r0
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dsub+0x302>
 8001d08:	e085      	b.n	8001e16 <__aeabi_dsub+0x40e>
 8001d0a:	001d      	movs	r5, r3
 8001d0c:	e6bc      	b.n	8001a88 <__aeabi_dsub+0x80>
 8001d0e:	0029      	movs	r1, r5
 8001d10:	3e1f      	subs	r6, #31
 8001d12:	40f1      	lsrs	r1, r6
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d100      	bne.n	8001d1a <__aeabi_dsub+0x312>
 8001d18:	e07f      	b.n	8001e1a <__aeabi_dsub+0x412>
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	409d      	lsls	r5, r3
 8001d20:	432f      	orrs	r7, r5
 8001d22:	1e7d      	subs	r5, r7, #1
 8001d24:	41af      	sbcs	r7, r5
 8001d26:	2400      	movs	r4, #0
 8001d28:	430f      	orrs	r7, r1
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	e78e      	b.n	8001c4c <__aeabi_dsub+0x244>
 8001d2e:	002b      	movs	r3, r5
 8001d30:	000f      	movs	r7, r1
 8001d32:	3b20      	subs	r3, #32
 8001d34:	40df      	lsrs	r7, r3
 8001d36:	2d20      	cmp	r5, #32
 8001d38:	d071      	beq.n	8001e1e <__aeabi_dsub+0x416>
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	1b5d      	subs	r5, r3, r5
 8001d3e:	40a9      	lsls	r1, r5
 8001d40:	430a      	orrs	r2, r1
 8001d42:	1e51      	subs	r1, r2, #1
 8001d44:	418a      	sbcs	r2, r1
 8001d46:	2100      	movs	r1, #0
 8001d48:	4317      	orrs	r7, r2
 8001d4a:	e6af      	b.n	8001aac <__aeabi_dsub+0xa4>
 8001d4c:	000007ff 	.word	0x000007ff
 8001d50:	ff7fffff 	.word	0xff7fffff
 8001d54:	800fffff 	.word	0x800fffff
 8001d58:	2e00      	cmp	r6, #0
 8001d5a:	d03e      	beq.n	8001dda <__aeabi_dsub+0x3d2>
 8001d5c:	4eb3      	ldr	r6, [pc, #716]	; (800202c <__aeabi_dsub+0x624>)
 8001d5e:	45b4      	cmp	ip, r6
 8001d60:	d045      	beq.n	8001dee <__aeabi_dsub+0x3e6>
 8001d62:	2680      	movs	r6, #128	; 0x80
 8001d64:	0436      	lsls	r6, r6, #16
 8001d66:	426d      	negs	r5, r5
 8001d68:	4334      	orrs	r4, r6
 8001d6a:	2d38      	cmp	r5, #56	; 0x38
 8001d6c:	dd00      	ble.n	8001d70 <__aeabi_dsub+0x368>
 8001d6e:	e0a8      	b.n	8001ec2 <__aeabi_dsub+0x4ba>
 8001d70:	2d1f      	cmp	r5, #31
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_dsub+0x36e>
 8001d74:	e11f      	b.n	8001fb6 <__aeabi_dsub+0x5ae>
 8001d76:	2620      	movs	r6, #32
 8001d78:	0027      	movs	r7, r4
 8001d7a:	4650      	mov	r0, sl
 8001d7c:	1b76      	subs	r6, r6, r5
 8001d7e:	40b7      	lsls	r7, r6
 8001d80:	40e8      	lsrs	r0, r5
 8001d82:	4307      	orrs	r7, r0
 8001d84:	4650      	mov	r0, sl
 8001d86:	40b0      	lsls	r0, r6
 8001d88:	1e46      	subs	r6, r0, #1
 8001d8a:	41b0      	sbcs	r0, r6
 8001d8c:	40ec      	lsrs	r4, r5
 8001d8e:	4338      	orrs	r0, r7
 8001d90:	1a17      	subs	r7, r2, r0
 8001d92:	42ba      	cmp	r2, r7
 8001d94:	4192      	sbcs	r2, r2
 8001d96:	1b0c      	subs	r4, r1, r4
 8001d98:	4252      	negs	r2, r2
 8001d9a:	1aa4      	subs	r4, r4, r2
 8001d9c:	4666      	mov	r6, ip
 8001d9e:	4698      	mov	r8, r3
 8001da0:	e68b      	b.n	8001aba <__aeabi_dsub+0xb2>
 8001da2:	4664      	mov	r4, ip
 8001da4:	4667      	mov	r7, ip
 8001da6:	432c      	orrs	r4, r5
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x3a4>
 8001daa:	e68b      	b.n	8001ac4 <__aeabi_dsub+0xbc>
 8001dac:	2500      	movs	r5, #0
 8001dae:	2600      	movs	r6, #0
 8001db0:	2700      	movs	r7, #0
 8001db2:	e6ea      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001db4:	001e      	movs	r6, r3
 8001db6:	e6ad      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001db8:	2b1f      	cmp	r3, #31
 8001dba:	dc60      	bgt.n	8001e7e <__aeabi_dsub+0x476>
 8001dbc:	2720      	movs	r7, #32
 8001dbe:	1af8      	subs	r0, r7, r3
 8001dc0:	000f      	movs	r7, r1
 8001dc2:	4684      	mov	ip, r0
 8001dc4:	4087      	lsls	r7, r0
 8001dc6:	0010      	movs	r0, r2
 8001dc8:	40d8      	lsrs	r0, r3
 8001dca:	4307      	orrs	r7, r0
 8001dcc:	4660      	mov	r0, ip
 8001dce:	4082      	lsls	r2, r0
 8001dd0:	1e50      	subs	r0, r2, #1
 8001dd2:	4182      	sbcs	r2, r0
 8001dd4:	40d9      	lsrs	r1, r3
 8001dd6:	4317      	orrs	r7, r2
 8001dd8:	e6f5      	b.n	8001bc6 <__aeabi_dsub+0x1be>
 8001dda:	0026      	movs	r6, r4
 8001ddc:	4650      	mov	r0, sl
 8001dde:	4306      	orrs	r6, r0
 8001de0:	d005      	beq.n	8001dee <__aeabi_dsub+0x3e6>
 8001de2:	43ed      	mvns	r5, r5
 8001de4:	2d00      	cmp	r5, #0
 8001de6:	d0d3      	beq.n	8001d90 <__aeabi_dsub+0x388>
 8001de8:	4e90      	ldr	r6, [pc, #576]	; (800202c <__aeabi_dsub+0x624>)
 8001dea:	45b4      	cmp	ip, r6
 8001dec:	d1bd      	bne.n	8001d6a <__aeabi_dsub+0x362>
 8001dee:	000c      	movs	r4, r1
 8001df0:	0017      	movs	r7, r2
 8001df2:	4666      	mov	r6, ip
 8001df4:	4698      	mov	r8, r3
 8001df6:	e68d      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001df8:	488c      	ldr	r0, [pc, #560]	; (800202c <__aeabi_dsub+0x624>)
 8001dfa:	4283      	cmp	r3, r0
 8001dfc:	d00b      	beq.n	8001e16 <__aeabi_dsub+0x40e>
 8001dfe:	4663      	mov	r3, ip
 8001e00:	e6d9      	b.n	8001bb6 <__aeabi_dsub+0x1ae>
 8001e02:	2d00      	cmp	r5, #0
 8001e04:	d000      	beq.n	8001e08 <__aeabi_dsub+0x400>
 8001e06:	e096      	b.n	8001f36 <__aeabi_dsub+0x52e>
 8001e08:	0008      	movs	r0, r1
 8001e0a:	4310      	orrs	r0, r2
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x408>
 8001e0e:	e0e2      	b.n	8001fd6 <__aeabi_dsub+0x5ce>
 8001e10:	000c      	movs	r4, r1
 8001e12:	0017      	movs	r7, r2
 8001e14:	4698      	mov	r8, r3
 8001e16:	4e85      	ldr	r6, [pc, #532]	; (800202c <__aeabi_dsub+0x624>)
 8001e18:	e67c      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001e1a:	2500      	movs	r5, #0
 8001e1c:	e780      	b.n	8001d20 <__aeabi_dsub+0x318>
 8001e1e:	2100      	movs	r1, #0
 8001e20:	e78e      	b.n	8001d40 <__aeabi_dsub+0x338>
 8001e22:	0023      	movs	r3, r4
 8001e24:	4650      	mov	r0, sl
 8001e26:	4303      	orrs	r3, r0
 8001e28:	2e00      	cmp	r6, #0
 8001e2a:	d000      	beq.n	8001e2e <__aeabi_dsub+0x426>
 8001e2c:	e0a8      	b.n	8001f80 <__aeabi_dsub+0x578>
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x42c>
 8001e32:	e0de      	b.n	8001ff2 <__aeabi_dsub+0x5ea>
 8001e34:	000b      	movs	r3, r1
 8001e36:	4313      	orrs	r3, r2
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x434>
 8001e3a:	e66b      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001e3c:	4452      	add	r2, sl
 8001e3e:	4552      	cmp	r2, sl
 8001e40:	4180      	sbcs	r0, r0
 8001e42:	1864      	adds	r4, r4, r1
 8001e44:	4240      	negs	r0, r0
 8001e46:	1824      	adds	r4, r4, r0
 8001e48:	0017      	movs	r7, r2
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x448>
 8001e4e:	e6fd      	b.n	8001c4c <__aeabi_dsub+0x244>
 8001e50:	4b77      	ldr	r3, [pc, #476]	; (8002030 <__aeabi_dsub+0x628>)
 8001e52:	4666      	mov	r6, ip
 8001e54:	401c      	ands	r4, r3
 8001e56:	e65d      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001e58:	0025      	movs	r5, r4
 8001e5a:	4650      	mov	r0, sl
 8001e5c:	4305      	orrs	r5, r0
 8001e5e:	2e00      	cmp	r6, #0
 8001e60:	d1cf      	bne.n	8001e02 <__aeabi_dsub+0x3fa>
 8001e62:	2d00      	cmp	r5, #0
 8001e64:	d14f      	bne.n	8001f06 <__aeabi_dsub+0x4fe>
 8001e66:	000c      	movs	r4, r1
 8001e68:	4314      	orrs	r4, r2
 8001e6a:	d100      	bne.n	8001e6e <__aeabi_dsub+0x466>
 8001e6c:	e0a0      	b.n	8001fb0 <__aeabi_dsub+0x5a8>
 8001e6e:	000c      	movs	r4, r1
 8001e70:	0017      	movs	r7, r2
 8001e72:	4698      	mov	r8, r3
 8001e74:	e64e      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001e76:	4666      	mov	r6, ip
 8001e78:	2400      	movs	r4, #0
 8001e7a:	2700      	movs	r7, #0
 8001e7c:	e685      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001e7e:	001f      	movs	r7, r3
 8001e80:	0008      	movs	r0, r1
 8001e82:	3f20      	subs	r7, #32
 8001e84:	40f8      	lsrs	r0, r7
 8001e86:	0007      	movs	r7, r0
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d100      	bne.n	8001e8e <__aeabi_dsub+0x486>
 8001e8c:	e08e      	b.n	8001fac <__aeabi_dsub+0x5a4>
 8001e8e:	2040      	movs	r0, #64	; 0x40
 8001e90:	1ac3      	subs	r3, r0, r3
 8001e92:	4099      	lsls	r1, r3
 8001e94:	430a      	orrs	r2, r1
 8001e96:	1e51      	subs	r1, r2, #1
 8001e98:	418a      	sbcs	r2, r1
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4317      	orrs	r7, r2
 8001e9e:	e692      	b.n	8001bc6 <__aeabi_dsub+0x1be>
 8001ea0:	2e00      	cmp	r6, #0
 8001ea2:	d114      	bne.n	8001ece <__aeabi_dsub+0x4c6>
 8001ea4:	0026      	movs	r6, r4
 8001ea6:	4650      	mov	r0, sl
 8001ea8:	4306      	orrs	r6, r0
 8001eaa:	d062      	beq.n	8001f72 <__aeabi_dsub+0x56a>
 8001eac:	43db      	mvns	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d15c      	bne.n	8001f6c <__aeabi_dsub+0x564>
 8001eb2:	1887      	adds	r7, r0, r2
 8001eb4:	4297      	cmp	r7, r2
 8001eb6:	4192      	sbcs	r2, r2
 8001eb8:	1864      	adds	r4, r4, r1
 8001eba:	4252      	negs	r2, r2
 8001ebc:	18a4      	adds	r4, r4, r2
 8001ebe:	4666      	mov	r6, ip
 8001ec0:	e687      	b.n	8001bd2 <__aeabi_dsub+0x1ca>
 8001ec2:	4650      	mov	r0, sl
 8001ec4:	4320      	orrs	r0, r4
 8001ec6:	1e44      	subs	r4, r0, #1
 8001ec8:	41a0      	sbcs	r0, r4
 8001eca:	2400      	movs	r4, #0
 8001ecc:	e760      	b.n	8001d90 <__aeabi_dsub+0x388>
 8001ece:	4e57      	ldr	r6, [pc, #348]	; (800202c <__aeabi_dsub+0x624>)
 8001ed0:	45b4      	cmp	ip, r6
 8001ed2:	d04e      	beq.n	8001f72 <__aeabi_dsub+0x56a>
 8001ed4:	2680      	movs	r6, #128	; 0x80
 8001ed6:	0436      	lsls	r6, r6, #16
 8001ed8:	425b      	negs	r3, r3
 8001eda:	4334      	orrs	r4, r6
 8001edc:	2b38      	cmp	r3, #56	; 0x38
 8001ede:	dd00      	ble.n	8001ee2 <__aeabi_dsub+0x4da>
 8001ee0:	e07f      	b.n	8001fe2 <__aeabi_dsub+0x5da>
 8001ee2:	2b1f      	cmp	r3, #31
 8001ee4:	dd00      	ble.n	8001ee8 <__aeabi_dsub+0x4e0>
 8001ee6:	e08b      	b.n	8002000 <__aeabi_dsub+0x5f8>
 8001ee8:	2620      	movs	r6, #32
 8001eea:	0027      	movs	r7, r4
 8001eec:	4650      	mov	r0, sl
 8001eee:	1af6      	subs	r6, r6, r3
 8001ef0:	40b7      	lsls	r7, r6
 8001ef2:	40d8      	lsrs	r0, r3
 8001ef4:	4307      	orrs	r7, r0
 8001ef6:	4650      	mov	r0, sl
 8001ef8:	40b0      	lsls	r0, r6
 8001efa:	1e46      	subs	r6, r0, #1
 8001efc:	41b0      	sbcs	r0, r6
 8001efe:	4307      	orrs	r7, r0
 8001f00:	40dc      	lsrs	r4, r3
 8001f02:	18bf      	adds	r7, r7, r2
 8001f04:	e7d6      	b.n	8001eb4 <__aeabi_dsub+0x4ac>
 8001f06:	000d      	movs	r5, r1
 8001f08:	4315      	orrs	r5, r2
 8001f0a:	d100      	bne.n	8001f0e <__aeabi_dsub+0x506>
 8001f0c:	e602      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001f0e:	4650      	mov	r0, sl
 8001f10:	1a80      	subs	r0, r0, r2
 8001f12:	4582      	cmp	sl, r0
 8001f14:	41bf      	sbcs	r7, r7
 8001f16:	1a65      	subs	r5, r4, r1
 8001f18:	427f      	negs	r7, r7
 8001f1a:	1bed      	subs	r5, r5, r7
 8001f1c:	4684      	mov	ip, r0
 8001f1e:	0228      	lsls	r0, r5, #8
 8001f20:	d400      	bmi.n	8001f24 <__aeabi_dsub+0x51c>
 8001f22:	e68d      	b.n	8001c40 <__aeabi_dsub+0x238>
 8001f24:	4650      	mov	r0, sl
 8001f26:	1a17      	subs	r7, r2, r0
 8001f28:	42ba      	cmp	r2, r7
 8001f2a:	4192      	sbcs	r2, r2
 8001f2c:	1b0c      	subs	r4, r1, r4
 8001f2e:	4252      	negs	r2, r2
 8001f30:	1aa4      	subs	r4, r4, r2
 8001f32:	4698      	mov	r8, r3
 8001f34:	e5ee      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001f36:	000d      	movs	r5, r1
 8001f38:	4315      	orrs	r5, r2
 8001f3a:	d100      	bne.n	8001f3e <__aeabi_dsub+0x536>
 8001f3c:	e76b      	b.n	8001e16 <__aeabi_dsub+0x40e>
 8001f3e:	4650      	mov	r0, sl
 8001f40:	0767      	lsls	r7, r4, #29
 8001f42:	08c0      	lsrs	r0, r0, #3
 8001f44:	4307      	orrs	r7, r0
 8001f46:	2080      	movs	r0, #128	; 0x80
 8001f48:	08e4      	lsrs	r4, r4, #3
 8001f4a:	0300      	lsls	r0, r0, #12
 8001f4c:	4204      	tst	r4, r0
 8001f4e:	d007      	beq.n	8001f60 <__aeabi_dsub+0x558>
 8001f50:	08cd      	lsrs	r5, r1, #3
 8001f52:	4205      	tst	r5, r0
 8001f54:	d104      	bne.n	8001f60 <__aeabi_dsub+0x558>
 8001f56:	002c      	movs	r4, r5
 8001f58:	4698      	mov	r8, r3
 8001f5a:	08d7      	lsrs	r7, r2, #3
 8001f5c:	0749      	lsls	r1, r1, #29
 8001f5e:	430f      	orrs	r7, r1
 8001f60:	0f7b      	lsrs	r3, r7, #29
 8001f62:	00e4      	lsls	r4, r4, #3
 8001f64:	431c      	orrs	r4, r3
 8001f66:	00ff      	lsls	r7, r7, #3
 8001f68:	4e30      	ldr	r6, [pc, #192]	; (800202c <__aeabi_dsub+0x624>)
 8001f6a:	e5d3      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001f6c:	4e2f      	ldr	r6, [pc, #188]	; (800202c <__aeabi_dsub+0x624>)
 8001f6e:	45b4      	cmp	ip, r6
 8001f70:	d1b4      	bne.n	8001edc <__aeabi_dsub+0x4d4>
 8001f72:	000c      	movs	r4, r1
 8001f74:	0017      	movs	r7, r2
 8001f76:	4666      	mov	r6, ip
 8001f78:	e5cc      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001f7a:	2700      	movs	r7, #0
 8001f7c:	2400      	movs	r4, #0
 8001f7e:	e5e8      	b.n	8001b52 <__aeabi_dsub+0x14a>
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d039      	beq.n	8001ff8 <__aeabi_dsub+0x5f0>
 8001f84:	000b      	movs	r3, r1
 8001f86:	4313      	orrs	r3, r2
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x584>
 8001f8a:	e744      	b.n	8001e16 <__aeabi_dsub+0x40e>
 8001f8c:	08c0      	lsrs	r0, r0, #3
 8001f8e:	0767      	lsls	r7, r4, #29
 8001f90:	4307      	orrs	r7, r0
 8001f92:	2080      	movs	r0, #128	; 0x80
 8001f94:	08e4      	lsrs	r4, r4, #3
 8001f96:	0300      	lsls	r0, r0, #12
 8001f98:	4204      	tst	r4, r0
 8001f9a:	d0e1      	beq.n	8001f60 <__aeabi_dsub+0x558>
 8001f9c:	08cb      	lsrs	r3, r1, #3
 8001f9e:	4203      	tst	r3, r0
 8001fa0:	d1de      	bne.n	8001f60 <__aeabi_dsub+0x558>
 8001fa2:	08d7      	lsrs	r7, r2, #3
 8001fa4:	0749      	lsls	r1, r1, #29
 8001fa6:	430f      	orrs	r7, r1
 8001fa8:	001c      	movs	r4, r3
 8001faa:	e7d9      	b.n	8001f60 <__aeabi_dsub+0x558>
 8001fac:	2100      	movs	r1, #0
 8001fae:	e771      	b.n	8001e94 <__aeabi_dsub+0x48c>
 8001fb0:	2500      	movs	r5, #0
 8001fb2:	2700      	movs	r7, #0
 8001fb4:	e5e9      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001fb6:	002e      	movs	r6, r5
 8001fb8:	0027      	movs	r7, r4
 8001fba:	3e20      	subs	r6, #32
 8001fbc:	40f7      	lsrs	r7, r6
 8001fbe:	2d20      	cmp	r5, #32
 8001fc0:	d02f      	beq.n	8002022 <__aeabi_dsub+0x61a>
 8001fc2:	2640      	movs	r6, #64	; 0x40
 8001fc4:	1b75      	subs	r5, r6, r5
 8001fc6:	40ac      	lsls	r4, r5
 8001fc8:	4650      	mov	r0, sl
 8001fca:	4320      	orrs	r0, r4
 8001fcc:	1e44      	subs	r4, r0, #1
 8001fce:	41a0      	sbcs	r0, r4
 8001fd0:	2400      	movs	r4, #0
 8001fd2:	4338      	orrs	r0, r7
 8001fd4:	e6dc      	b.n	8001d90 <__aeabi_dsub+0x388>
 8001fd6:	2480      	movs	r4, #128	; 0x80
 8001fd8:	2500      	movs	r5, #0
 8001fda:	0324      	lsls	r4, r4, #12
 8001fdc:	4e13      	ldr	r6, [pc, #76]	; (800202c <__aeabi_dsub+0x624>)
 8001fde:	2700      	movs	r7, #0
 8001fe0:	e5d3      	b.n	8001b8a <__aeabi_dsub+0x182>
 8001fe2:	4650      	mov	r0, sl
 8001fe4:	4320      	orrs	r0, r4
 8001fe6:	0007      	movs	r7, r0
 8001fe8:	1e78      	subs	r0, r7, #1
 8001fea:	4187      	sbcs	r7, r0
 8001fec:	2400      	movs	r4, #0
 8001fee:	18bf      	adds	r7, r7, r2
 8001ff0:	e760      	b.n	8001eb4 <__aeabi_dsub+0x4ac>
 8001ff2:	000c      	movs	r4, r1
 8001ff4:	0017      	movs	r7, r2
 8001ff6:	e58d      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001ff8:	000c      	movs	r4, r1
 8001ffa:	0017      	movs	r7, r2
 8001ffc:	4e0b      	ldr	r6, [pc, #44]	; (800202c <__aeabi_dsub+0x624>)
 8001ffe:	e589      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8002000:	001e      	movs	r6, r3
 8002002:	0027      	movs	r7, r4
 8002004:	3e20      	subs	r6, #32
 8002006:	40f7      	lsrs	r7, r6
 8002008:	2b20      	cmp	r3, #32
 800200a:	d00c      	beq.n	8002026 <__aeabi_dsub+0x61e>
 800200c:	2640      	movs	r6, #64	; 0x40
 800200e:	1af3      	subs	r3, r6, r3
 8002010:	409c      	lsls	r4, r3
 8002012:	4650      	mov	r0, sl
 8002014:	4320      	orrs	r0, r4
 8002016:	1e44      	subs	r4, r0, #1
 8002018:	41a0      	sbcs	r0, r4
 800201a:	4307      	orrs	r7, r0
 800201c:	2400      	movs	r4, #0
 800201e:	18bf      	adds	r7, r7, r2
 8002020:	e748      	b.n	8001eb4 <__aeabi_dsub+0x4ac>
 8002022:	2400      	movs	r4, #0
 8002024:	e7d0      	b.n	8001fc8 <__aeabi_dsub+0x5c0>
 8002026:	2400      	movs	r4, #0
 8002028:	e7f3      	b.n	8002012 <__aeabi_dsub+0x60a>
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	000007ff 	.word	0x000007ff
 8002030:	ff7fffff 	.word	0xff7fffff

08002034 <__aeabi_d2iz>:
 8002034:	b530      	push	{r4, r5, lr}
 8002036:	4d13      	ldr	r5, [pc, #76]	; (8002084 <__aeabi_d2iz+0x50>)
 8002038:	030a      	lsls	r2, r1, #12
 800203a:	004b      	lsls	r3, r1, #1
 800203c:	0b12      	lsrs	r2, r2, #12
 800203e:	0d5b      	lsrs	r3, r3, #21
 8002040:	0fc9      	lsrs	r1, r1, #31
 8002042:	2400      	movs	r4, #0
 8002044:	42ab      	cmp	r3, r5
 8002046:	dd10      	ble.n	800206a <__aeabi_d2iz+0x36>
 8002048:	4c0f      	ldr	r4, [pc, #60]	; (8002088 <__aeabi_d2iz+0x54>)
 800204a:	42a3      	cmp	r3, r4
 800204c:	dc0f      	bgt.n	800206e <__aeabi_d2iz+0x3a>
 800204e:	2480      	movs	r4, #128	; 0x80
 8002050:	4d0e      	ldr	r5, [pc, #56]	; (800208c <__aeabi_d2iz+0x58>)
 8002052:	0364      	lsls	r4, r4, #13
 8002054:	4322      	orrs	r2, r4
 8002056:	1aed      	subs	r5, r5, r3
 8002058:	2d1f      	cmp	r5, #31
 800205a:	dd0b      	ble.n	8002074 <__aeabi_d2iz+0x40>
 800205c:	480c      	ldr	r0, [pc, #48]	; (8002090 <__aeabi_d2iz+0x5c>)
 800205e:	1ac3      	subs	r3, r0, r3
 8002060:	40da      	lsrs	r2, r3
 8002062:	4254      	negs	r4, r2
 8002064:	2900      	cmp	r1, #0
 8002066:	d100      	bne.n	800206a <__aeabi_d2iz+0x36>
 8002068:	0014      	movs	r4, r2
 800206a:	0020      	movs	r0, r4
 800206c:	bd30      	pop	{r4, r5, pc}
 800206e:	4b09      	ldr	r3, [pc, #36]	; (8002094 <__aeabi_d2iz+0x60>)
 8002070:	18cc      	adds	r4, r1, r3
 8002072:	e7fa      	b.n	800206a <__aeabi_d2iz+0x36>
 8002074:	4c08      	ldr	r4, [pc, #32]	; (8002098 <__aeabi_d2iz+0x64>)
 8002076:	40e8      	lsrs	r0, r5
 8002078:	46a4      	mov	ip, r4
 800207a:	4463      	add	r3, ip
 800207c:	409a      	lsls	r2, r3
 800207e:	4302      	orrs	r2, r0
 8002080:	e7ef      	b.n	8002062 <__aeabi_d2iz+0x2e>
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	000003fe 	.word	0x000003fe
 8002088:	0000041d 	.word	0x0000041d
 800208c:	00000433 	.word	0x00000433
 8002090:	00000413 	.word	0x00000413
 8002094:	7fffffff 	.word	0x7fffffff
 8002098:	fffffbed 	.word	0xfffffbed

0800209c <__aeabi_i2d>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	2800      	cmp	r0, #0
 80020a0:	d030      	beq.n	8002104 <__aeabi_i2d+0x68>
 80020a2:	17c3      	asrs	r3, r0, #31
 80020a4:	18c4      	adds	r4, r0, r3
 80020a6:	405c      	eors	r4, r3
 80020a8:	0fc5      	lsrs	r5, r0, #31
 80020aa:	0020      	movs	r0, r4
 80020ac:	f000 f870 	bl	8002190 <__clzsi2>
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <__aeabi_i2d+0x74>)
 80020b2:	4a18      	ldr	r2, [pc, #96]	; (8002114 <__aeabi_i2d+0x78>)
 80020b4:	1a1b      	subs	r3, r3, r0
 80020b6:	1ad2      	subs	r2, r2, r3
 80020b8:	2a1f      	cmp	r2, #31
 80020ba:	dd18      	ble.n	80020ee <__aeabi_i2d+0x52>
 80020bc:	4a16      	ldr	r2, [pc, #88]	; (8002118 <__aeabi_i2d+0x7c>)
 80020be:	1ad2      	subs	r2, r2, r3
 80020c0:	4094      	lsls	r4, r2
 80020c2:	2200      	movs	r2, #0
 80020c4:	0324      	lsls	r4, r4, #12
 80020c6:	055b      	lsls	r3, r3, #21
 80020c8:	0b24      	lsrs	r4, r4, #12
 80020ca:	0d5b      	lsrs	r3, r3, #21
 80020cc:	2100      	movs	r1, #0
 80020ce:	0010      	movs	r0, r2
 80020d0:	0324      	lsls	r4, r4, #12
 80020d2:	0d0a      	lsrs	r2, r1, #20
 80020d4:	0b24      	lsrs	r4, r4, #12
 80020d6:	0512      	lsls	r2, r2, #20
 80020d8:	4322      	orrs	r2, r4
 80020da:	4c10      	ldr	r4, [pc, #64]	; (800211c <__aeabi_i2d+0x80>)
 80020dc:	051b      	lsls	r3, r3, #20
 80020de:	4022      	ands	r2, r4
 80020e0:	4313      	orrs	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	07ed      	lsls	r5, r5, #31
 80020e6:	085b      	lsrs	r3, r3, #1
 80020e8:	432b      	orrs	r3, r5
 80020ea:	0019      	movs	r1, r3
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
 80020ee:	0021      	movs	r1, r4
 80020f0:	4091      	lsls	r1, r2
 80020f2:	000a      	movs	r2, r1
 80020f4:	210b      	movs	r1, #11
 80020f6:	1a08      	subs	r0, r1, r0
 80020f8:	40c4      	lsrs	r4, r0
 80020fa:	055b      	lsls	r3, r3, #21
 80020fc:	0324      	lsls	r4, r4, #12
 80020fe:	0b24      	lsrs	r4, r4, #12
 8002100:	0d5b      	lsrs	r3, r3, #21
 8002102:	e7e3      	b.n	80020cc <__aeabi_i2d+0x30>
 8002104:	2500      	movs	r5, #0
 8002106:	2300      	movs	r3, #0
 8002108:	2400      	movs	r4, #0
 800210a:	2200      	movs	r2, #0
 800210c:	e7de      	b.n	80020cc <__aeabi_i2d+0x30>
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	0000041e 	.word	0x0000041e
 8002114:	00000433 	.word	0x00000433
 8002118:	00000413 	.word	0x00000413
 800211c:	800fffff 	.word	0x800fffff

08002120 <__aeabi_ui2d>:
 8002120:	b510      	push	{r4, lr}
 8002122:	1e04      	subs	r4, r0, #0
 8002124:	d028      	beq.n	8002178 <__aeabi_ui2d+0x58>
 8002126:	f000 f833 	bl	8002190 <__clzsi2>
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <__aeabi_ui2d+0x60>)
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <__aeabi_ui2d+0x64>)
 800212e:	1a1b      	subs	r3, r3, r0
 8002130:	1ad2      	subs	r2, r2, r3
 8002132:	2a1f      	cmp	r2, #31
 8002134:	dd15      	ble.n	8002162 <__aeabi_ui2d+0x42>
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <__aeabi_ui2d+0x68>)
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	4094      	lsls	r4, r2
 800213c:	2200      	movs	r2, #0
 800213e:	0324      	lsls	r4, r4, #12
 8002140:	055b      	lsls	r3, r3, #21
 8002142:	0b24      	lsrs	r4, r4, #12
 8002144:	0d5b      	lsrs	r3, r3, #21
 8002146:	2100      	movs	r1, #0
 8002148:	0010      	movs	r0, r2
 800214a:	0324      	lsls	r4, r4, #12
 800214c:	0d0a      	lsrs	r2, r1, #20
 800214e:	0b24      	lsrs	r4, r4, #12
 8002150:	0512      	lsls	r2, r2, #20
 8002152:	4322      	orrs	r2, r4
 8002154:	4c0d      	ldr	r4, [pc, #52]	; (800218c <__aeabi_ui2d+0x6c>)
 8002156:	051b      	lsls	r3, r3, #20
 8002158:	4022      	ands	r2, r4
 800215a:	4313      	orrs	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	0859      	lsrs	r1, r3, #1
 8002160:	bd10      	pop	{r4, pc}
 8002162:	0021      	movs	r1, r4
 8002164:	4091      	lsls	r1, r2
 8002166:	000a      	movs	r2, r1
 8002168:	210b      	movs	r1, #11
 800216a:	1a08      	subs	r0, r1, r0
 800216c:	40c4      	lsrs	r4, r0
 800216e:	055b      	lsls	r3, r3, #21
 8002170:	0324      	lsls	r4, r4, #12
 8002172:	0b24      	lsrs	r4, r4, #12
 8002174:	0d5b      	lsrs	r3, r3, #21
 8002176:	e7e6      	b.n	8002146 <__aeabi_ui2d+0x26>
 8002178:	2300      	movs	r3, #0
 800217a:	2400      	movs	r4, #0
 800217c:	2200      	movs	r2, #0
 800217e:	e7e2      	b.n	8002146 <__aeabi_ui2d+0x26>
 8002180:	0000041e 	.word	0x0000041e
 8002184:	00000433 	.word	0x00000433
 8002188:	00000413 	.word	0x00000413
 800218c:	800fffff 	.word	0x800fffff

08002190 <__clzsi2>:
 8002190:	211c      	movs	r1, #28
 8002192:	2301      	movs	r3, #1
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	4298      	cmp	r0, r3
 8002198:	d301      	bcc.n	800219e <__clzsi2+0xe>
 800219a:	0c00      	lsrs	r0, r0, #16
 800219c:	3910      	subs	r1, #16
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	4298      	cmp	r0, r3
 80021a2:	d301      	bcc.n	80021a8 <__clzsi2+0x18>
 80021a4:	0a00      	lsrs	r0, r0, #8
 80021a6:	3908      	subs	r1, #8
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	4298      	cmp	r0, r3
 80021ac:	d301      	bcc.n	80021b2 <__clzsi2+0x22>
 80021ae:	0900      	lsrs	r0, r0, #4
 80021b0:	3904      	subs	r1, #4
 80021b2:	a202      	add	r2, pc, #8	; (adr r2, 80021bc <__clzsi2+0x2c>)
 80021b4:	5c10      	ldrb	r0, [r2, r0]
 80021b6:	1840      	adds	r0, r0, r1
 80021b8:	4770      	bx	lr
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	02020304 	.word	0x02020304
 80021c0:	01010101 	.word	0x01010101
	...

080021cc <__clzdi2>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	2900      	cmp	r1, #0
 80021d0:	d103      	bne.n	80021da <__clzdi2+0xe>
 80021d2:	f7ff ffdd 	bl	8002190 <__clzsi2>
 80021d6:	3020      	adds	r0, #32
 80021d8:	e002      	b.n	80021e0 <__clzdi2+0x14>
 80021da:	1c08      	adds	r0, r1, #0
 80021dc:	f7ff ffd8 	bl	8002190 <__clzsi2>
 80021e0:	bd10      	pop	{r4, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)

080021e4 <BSP_sensor_Init>:
  BSP_HUMIDITY_Sensor_Enable( HUMIDITY_handle );
  BSP_TEMPERATURE_Sensor_Enable( TEMPERATURE_handle );
  BSP_PRESSURE_Sensor_Enable( PRESSURE_handle );
#endif
    /* USER CODE END 6 */
}
 80021e4:	4770      	bx	lr
	...

080021e8 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 80021e8:	b530      	push	{r4, r5, lr}
 80021ea:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStopMode( );
  HAL_DBGMCU_EnableDBGStandbyMode( );
  
#else /* DEBUG */
  /* sw interface off*/
  GPIO_InitTypeDef GPIO_InitStructure ={0};
 80021ec:	2214      	movs	r2, #20
 80021ee:	2100      	movs	r1, #0
 80021f0:	a801      	add	r0, sp, #4
 80021f2:	f005 fa6e 	bl	80076d2 <memset>
  
  GPIO_InitStructure.Mode   = GPIO_MODE_ANALOG;
 80021f6:	2303      	movs	r3, #3
 80021f8:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull   = GPIO_NOPULL;
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 80021fa:	23c0      	movs	r3, #192	; 0xc0
  __GPIOA_CLK_ENABLE() ;  
 80021fc:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80021fe:	20a0      	movs	r0, #160	; 0xa0
  __GPIOA_CLK_ENABLE() ;  
 8002200:	4c10      	ldr	r4, [pc, #64]	; (8002244 <DBG_Init+0x5c>)
  GPIO_InitStructure.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8002202:	01db      	lsls	r3, r3, #7
 8002204:	9301      	str	r3, [sp, #4]
  __GPIOA_CLK_ENABLE() ;  
 8002206:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002208:	a901      	add	r1, sp, #4
  __GPIOA_CLK_ENABLE() ;  
 800220a:	432b      	orrs	r3, r5
 800220c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800220e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002210:	05c0      	lsls	r0, r0, #23
  __GPIOA_CLK_ENABLE() ;  
 8002212:	402b      	ands	r3, r5
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002218:	f002 fec8 	bl	8004fac <HAL_GPIO_Init>
  __GPIOA_CLK_DISABLE() ;
 800221c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800221e:	43ab      	bics	r3, r5
 8002220:	62e3      	str	r3, [r4, #44]	; 0x2c
  
  __HAL_RCC_DBGMCU_CLK_ENABLE( );
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002226:	03db      	lsls	r3, r3, #15
 8002228:	4313      	orrs	r3, r2
 800222a:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode( );
 800222c:	f002 fbbc 	bl	80049a8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode( );
 8002230:	f002 fbc2 	bl	80049b8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode( );
 8002234:	f002 fbc8 	bl	80049c8 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE( );
 8002238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800223a:	4a03      	ldr	r2, [pc, #12]	; (8002248 <DBG_Init+0x60>)
 800223c:	4013      	ands	r3, r2
 800223e:	6363      	str	r3, [r4, #52]	; 0x34
#endif
}
 8002240:	b007      	add	sp, #28
 8002242:	bd30      	pop	{r4, r5, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	ffbfffff 	.word	0xffbfffff

0800224c <Error_Handler>:

void Error_Handler(void)
{
 800224c:	b510      	push	{r4, lr}
  PRINTF("Error_Handler\n\r");
 800224e:	4802      	ldr	r0, [pc, #8]	; (8002258 <Error_Handler+0xc>)
 8002250:	f005 f992 	bl	8007578 <TraceSend>
 8002254:	e7fe      	b.n	8002254 <Error_Handler+0x8>
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	080082d0 	.word	0x080082d0

0800225c <HW_GPIO_GetBitPos>:
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
  uint8_t PinPos=0;
  
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 800225c:	0001      	movs	r1, r0
 800225e:	23ff      	movs	r3, #255	; 0xff
 8002260:	4399      	bics	r1, r3
 8002262:	000b      	movs	r3, r1
{
 8002264:	0002      	movs	r2, r0
  if ( ( GPIO_Pin & 0xFF00 ) != 0) { PinPos |= 0x8; }
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	4183      	sbcs	r3, r0
 800226a:	00d8      	lsls	r0, r3, #3
  if ( ( GPIO_Pin & 0xF0F0 ) != 0) { PinPos |= 0x4; }
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <HW_GPIO_GetBitPos+0x30>)
 800226e:	421a      	tst	r2, r3
 8002270:	d001      	beq.n	8002276 <HW_GPIO_GetBitPos+0x1a>
 8002272:	2304      	movs	r3, #4
 8002274:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xCCCC ) != 0) { PinPos |= 0x2; }
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HW_GPIO_GetBitPos+0x34>)
 8002278:	421a      	tst	r2, r3
 800227a:	d001      	beq.n	8002280 <HW_GPIO_GetBitPos+0x24>
 800227c:	2302      	movs	r3, #2
 800227e:	4318      	orrs	r0, r3
  if ( ( GPIO_Pin & 0xAAAA ) != 0) { PinPos |= 0x1; }
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HW_GPIO_GetBitPos+0x38>)
 8002282:	421a      	tst	r2, r3
 8002284:	d001      	beq.n	800228a <HW_GPIO_GetBitPos+0x2e>
 8002286:	2301      	movs	r3, #1
 8002288:	4318      	orrs	r0, r3
  
  return PinPos;
}
 800228a:	4770      	bx	lr
 800228c:	fffff0f0 	.word	0xfffff0f0
 8002290:	ffffcccc 	.word	0xffffcccc
 8002294:	ffffaaaa 	.word	0xffffaaaa

08002298 <HW_GPIO_Init>:
{
 8002298:	b530      	push	{r4, r5, lr}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 800229a:	4c21      	ldr	r4, [pc, #132]	; (8002320 <HW_GPIO_Init+0x88>)
{
 800229c:	b087      	sub	sp, #28
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HW_GPIO_Init+0x8c>)
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 80022a0:	42a0      	cmp	r0, r4
 80022a2:	d02a      	beq.n	80022fa <HW_GPIO_Init+0x62>
 80022a4:	d80c      	bhi.n	80022c0 <HW_GPIO_Init+0x28>
 80022a6:	24a0      	movs	r4, #160	; 0xa0
 80022a8:	05e4      	lsls	r4, r4, #23
 80022aa:	42a0      	cmp	r0, r4
 80022ac:	d017      	beq.n	80022de <HW_GPIO_Init+0x46>
 80022ae:	2580      	movs	r5, #128	; 0x80
 80022b0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80022b2:	432c      	orrs	r4, r5
 80022b4:	62dc      	str	r4, [r3, #44]	; 0x2c
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	402b      	ands	r3, r5
 80022ba:	9305      	str	r3, [sp, #20]
 80022bc:	9b05      	ldr	r3, [sp, #20]
 80022be:	e016      	b.n	80022ee <HW_GPIO_Init+0x56>
 80022c0:	4c19      	ldr	r4, [pc, #100]	; (8002328 <HW_GPIO_Init+0x90>)
 80022c2:	42a0      	cmp	r0, r4
 80022c4:	d022      	beq.n	800230c <HW_GPIO_Init+0x74>
 80022c6:	4c19      	ldr	r4, [pc, #100]	; (800232c <HW_GPIO_Init+0x94>)
 80022c8:	42a0      	cmp	r0, r4
 80022ca:	d1f0      	bne.n	80022ae <HW_GPIO_Init+0x16>
 80022cc:	2508      	movs	r5, #8
 80022ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80022d0:	432c      	orrs	r4, r5
 80022d2:	62dc      	str	r4, [r3, #44]	; 0x2c
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	402b      	ands	r3, r5
 80022d8:	9304      	str	r3, [sp, #16]
 80022da:	9b04      	ldr	r3, [sp, #16]
 80022dc:	e007      	b.n	80022ee <HW_GPIO_Init+0x56>
 80022de:	2501      	movs	r5, #1
 80022e0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80022e2:	432c      	orrs	r4, r5
 80022e4:	62dc      	str	r4, [r3, #44]	; 0x2c
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	402b      	ands	r3, r5
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	9b01      	ldr	r3, [sp, #4]
  initStruct->Pin = GPIO_Pin ;
 80022ee:	6011      	str	r1, [r2, #0]
  HAL_GPIO_Init( port, initStruct );
 80022f0:	0011      	movs	r1, r2
 80022f2:	f002 fe5b 	bl	8004fac <HAL_GPIO_Init>
}
 80022f6:	b007      	add	sp, #28
 80022f8:	bd30      	pop	{r4, r5, pc}
  RCC_GPIO_CLK_ENABLE(  (uint32_t) port);
 80022fa:	2502      	movs	r5, #2
 80022fc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80022fe:	432c      	orrs	r4, r5
 8002300:	62dc      	str	r4, [r3, #44]	; 0x2c
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	402b      	ands	r3, r5
 8002306:	9302      	str	r3, [sp, #8]
 8002308:	9b02      	ldr	r3, [sp, #8]
 800230a:	e7f0      	b.n	80022ee <HW_GPIO_Init+0x56>
 800230c:	2504      	movs	r5, #4
 800230e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002310:	432c      	orrs	r4, r5
 8002312:	62dc      	str	r4, [r3, #44]	; 0x2c
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	402b      	ands	r3, r5
 8002318:	9303      	str	r3, [sp, #12]
 800231a:	9b03      	ldr	r3, [sp, #12]
 800231c:	e7e7      	b.n	80022ee <HW_GPIO_Init+0x56>
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	50000400 	.word	0x50000400
 8002324:	40021000 	.word	0x40021000
 8002328:	50000800 	.word	0x50000800
 800232c:	50000c00 	.word	0x50000c00

08002330 <HW_GPIO_SetIrq>:
{
 8002330:	b570      	push	{r4, r5, r6, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 8002332:	0008      	movs	r0, r1
{
 8002334:	001c      	movs	r4, r3
 8002336:	000d      	movs	r5, r1
 8002338:	0016      	movs	r6, r2
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin ) ;
 800233a:	f7ff ff8f 	bl	800225c <HW_GPIO_GetBitPos>
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HW_GPIO_SetIrq+0x30>)
 8002340:	0080      	lsls	r0, r0, #2
    GpioIrq[ BitPos ] = irqHandler;
 8002342:	501c      	str	r4, [r3, r0]
  if ( irqHandler != NULL)
 8002344:	2c00      	cmp	r4, #0
 8002346:	d00a      	beq.n	800235e <HW_GPIO_SetIrq+0x2e>
    IRQnb = MSP_GetIRQn( GPIO_Pin );
 8002348:	0028      	movs	r0, r5
 800234a:	f000 fc05 	bl	8002b58 <MSP_GetIRQn>
 800234e:	0004      	movs	r4, r0
    HAL_NVIC_SetPriority( IRQnb , prio, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	0031      	movs	r1, r6
 8002354:	f002 fc16 	bl	8004b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ( IRQnb );
 8002358:	0020      	movs	r0, r4
 800235a:	f002 fc43 	bl	8004be4 <HAL_NVIC_EnableIRQ>
}
 800235e:	bd70      	pop	{r4, r5, r6, pc}
 8002360:	200000cc 	.word	0x200000cc

08002364 <HW_GPIO_IrqHandler>:
{
 8002364:	b510      	push	{r4, lr}
  uint32_t BitPos = HW_GPIO_GetBitPos( GPIO_Pin );
 8002366:	f7ff ff79 	bl	800225c <HW_GPIO_GetBitPos>
  if ( GpioIrq[ BitPos ]  != NULL)
 800236a:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HW_GPIO_IrqHandler+0x14>)
 800236c:	0080      	lsls	r0, r0, #2
 800236e:	58c3      	ldr	r3, [r0, r3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d000      	beq.n	8002376 <HW_GPIO_IrqHandler+0x12>
    GpioIrq[ BitPos ] ( );
 8002374:	4798      	blx	r3
}
 8002376:	bd10      	pop	{r4, pc}
 8002378:	200000cc 	.word	0x200000cc

0800237c <HW_GPIO_Write>:
{
 800237c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f002 fed0 	bl	8005124 <HAL_GPIO_WritePin>
}
 8002384:	bd10      	pop	{r4, pc}
	...

08002388 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue( RTC_DateTypeDef* RTC_DateStruct, RTC_TimeTypeDef* RTC_TimeStruct )
{
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;
  
  /* Get Time and Date*/
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800238a:	4f23      	ldr	r7, [pc, #140]	; (8002418 <HW_RTC_GetCalendarValue+0x90>)
{
 800238c:	0006      	movs	r6, r0
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 800238e:	2200      	movs	r2, #0
 8002390:	0038      	movs	r0, r7
{
 8002392:	000d      	movs	r5, r1
  HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 8002394:	f003 ff2c 	bl	80061f0 <HAL_RTC_GetTime>
 
   /* make sure it is correct due to asynchronus nature of RTC*/
  do {
    first_read = RTC_TimeStruct->SubSeconds;
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 8002398:	2200      	movs	r2, #0
 800239a:	0031      	movs	r1, r6
 800239c:	0038      	movs	r0, r7
    first_read = RTC_TimeStruct->SubSeconds;
 800239e:	686c      	ldr	r4, [r5, #4]
    HAL_RTC_GetDate( &RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN );
 80023a0:	f003 ff50 	bl	8006244 <HAL_RTC_GetDate>
    HAL_RTC_GetTime( &RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN );
 80023a4:	2200      	movs	r2, #0
 80023a6:	0029      	movs	r1, r5
 80023a8:	0038      	movs	r0, r7
 80023aa:	f003 ff21 	bl	80061f0 <HAL_RTC_GetTime>
  } while (first_read != RTC_TimeStruct->SubSeconds);
 80023ae:	686b      	ldr	r3, [r5, #4]
 80023b0:	429c      	cmp	r4, r3
 80023b2:	d1f1      	bne.n	8002398 <HW_RTC_GetCalendarValue+0x10>
 
  /* calculte amount of elapsed days since 01/01/2000 */
  seconds= DIVC( (DAYS_IN_YEAR*3 + DAYS_IN_LEAP_YEAR)* RTC_DateStruct->Year , 4);
 80023b4:	78f3      	ldrb	r3, [r6, #3]
 80023b6:	4f19      	ldr	r7, [pc, #100]	; (800241c <HW_RTC_GetCalendarValue+0x94>)
 80023b8:	435f      	muls	r7, r3
 80023ba:	3703      	adds	r7, #3
 80023bc:	08bf      	lsrs	r7, r7, #2

  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80023be:	079b      	lsls	r3, r3, #30
 80023c0:	d027      	beq.n	8002412 <HW_RTC_GetCalendarValue+0x8a>
 80023c2:	4917      	ldr	r1, [pc, #92]	; (8002420 <HW_RTC_GetCalendarValue+0x98>)
 
  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 80023c4:	223d      	movs	r2, #61	; 0x3d
 80023c6:	7870      	ldrb	r0, [r6, #1]
 80023c8:	3801      	subs	r0, #1
 80023ca:	4342      	muls	r2, r0
 80023cc:	3201      	adds	r2, #1
 80023ce:	0fd3      	lsrs	r3, r2, #31
 80023d0:	189b      	adds	r3, r3, r2

  seconds += (RTC_DateStruct->Date -1);
 80023d2:	78b2      	ldrb	r2, [r6, #2]
  seconds +=( DIVC( (RTC_DateStruct->Month-1)*(30+31) ,2 ) - (((correction>> ((RTC_DateStruct->Month-1)*2) )&0x3)));
 80023d4:	105b      	asrs	r3, r3, #1
 80023d6:	3a01      	subs	r2, #1
 80023d8:	19d2      	adds	r2, r2, r7
 80023da:	189a      	adds	r2, r3, r2
 80023dc:	000b      	movs	r3, r1
 80023de:	0040      	lsls	r0, r0, #1
 80023e0:	40c3      	lsrs	r3, r0
 80023e2:	2103      	movs	r1, #3
 80023e4:	400b      	ands	r3, r1
  seconds += (RTC_DateStruct->Date -1);
 80023e6:	1ad3      	subs	r3, r2, r3
  
  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY; 
 80023e8:	4a0e      	ldr	r2, [pc, #56]	; (8002424 <HW_RTC_GetCalendarValue+0x9c>)

  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 80023ea:	7829      	ldrb	r1, [r5, #0]
  seconds *= SECONDS_IN_1DAY; 
 80023ec:	435a      	muls	r2, r3
             ( ( uint32_t )RTC_TimeStruct->Hours * SECONDS_IN_1HOUR ) ) ;
 80023ee:	23e1      	movs	r3, #225	; 0xe1
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	434b      	muls	r3, r1
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 80023f4:	213c      	movs	r1, #60	; 0x3c
 80023f6:	7868      	ldrb	r0, [r5, #1]
 80023f8:	4341      	muls	r1, r0
 80023fa:	185b      	adds	r3, r3, r1
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 80023fc:	78a9      	ldrb	r1, [r5, #2]


  
  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 80023fe:	4d0a      	ldr	r5, [pc, #40]	; (8002428 <HW_RTC_GetCalendarValue+0xa0>)
             ( ( uint32_t )RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE ) +
 8002400:	185b      	adds	r3, r3, r1
  seconds += ( ( uint32_t )RTC_TimeStruct->Seconds + 
 8002402:	189b      	adds	r3, r3, r2
  calendarValue = (((uint64_t) seconds)<<N_PREDIV_S) + ( PREDIV_S - RTC_TimeStruct->SubSeconds);
 8002404:	0d99      	lsrs	r1, r3, #22
 8002406:	0298      	lsls	r0, r3, #10
 8002408:	2300      	movs	r3, #0
 800240a:	1b2a      	subs	r2, r5, r4
 800240c:	1880      	adds	r0, r0, r2
 800240e:	4159      	adcs	r1, r3

  return( calendarValue );
}
 8002410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  correction = ( (RTC_DateStruct->Year % 4) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002412:	4906      	ldr	r1, [pc, #24]	; (800242c <HW_RTC_GetCalendarValue+0xa4>)
 8002414:	e7d6      	b.n	80023c4 <HW_RTC_GetCalendarValue+0x3c>
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	20000138 	.word	0x20000138
 800241c:	000005b5 	.word	0x000005b5
 8002420:	0099aaa0 	.word	0x0099aaa0
 8002424:	00015180 	.word	0x00015180
 8002428:	000003ff 	.word	0x000003ff
 800242c:	00445550 	.word	0x00445550

08002430 <HW_RTC_GetMinimumTimeout>:
}
 8002430:	2003      	movs	r0, #3
 8002432:	4770      	bx	lr

08002434 <HW_RTC_ms2Tick>:
{
 8002434:	b510      	push	{r4, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 8002436:	0e41      	lsrs	r1, r0, #25
 8002438:	227d      	movs	r2, #125	; 0x7d
 800243a:	01c0      	lsls	r0, r0, #7
 800243c:	2300      	movs	r3, #0
 800243e:	f7fe f821 	bl	8000484 <__aeabi_uldivmod>
}
 8002442:	bd10      	pop	{r4, pc}

08002444 <HW_RTC_Tick2ms>:
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8002444:	22fa      	movs	r2, #250	; 0xfa
  tick = tick&PREDIV_S;  
 8002446:	0583      	lsls	r3, r0, #22
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8002448:	0092      	lsls	r2, r2, #2
  tick = tick&PREDIV_S;  
 800244a:	0d9b      	lsrs	r3, r3, #22
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 800244c:	4353      	muls	r3, r2
  uint32_t seconds = tick>>N_PREDIV_S;
 800244e:	0a80      	lsrs	r0, r0, #10
  return  ( ( seconds*1000 ) + ((tick*1000)>>N_PREDIV_S) );
 8002450:	4350      	muls	r0, r2
 8002452:	0a9b      	lsrs	r3, r3, #10
 8002454:	1818      	adds	r0, r3, r0
}
 8002456:	4770      	bx	lr

08002458 <HW_RTC_GetTimerElapsedTime>:
{
 8002458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 800245a:	a901      	add	r1, sp, #4
 800245c:	4668      	mov	r0, sp
 800245e:	f7ff ff93 	bl	8002388 <HW_RTC_GetCalendarValue>
  return( ( uint32_t )( CalendarValue - RtcTimerContext.Rtc_Time ));
 8002462:	4b02      	ldr	r3, [pc, #8]	; (800246c <HW_RTC_GetTimerElapsedTime+0x14>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	1ac0      	subs	r0, r0, r3
}
 8002468:	b007      	add	sp, #28
 800246a:	bd00      	pop	{pc}
 800246c:	2000015c 	.word	0x2000015c

08002470 <HW_RTC_GetTimerValue>:
{
 8002470:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct );
 8002472:	a901      	add	r1, sp, #4
 8002474:	4668      	mov	r0, sp
 8002476:	f7ff ff87 	bl	8002388 <HW_RTC_GetCalendarValue>
}
 800247a:	b007      	add	sp, #28
 800247c:	bd00      	pop	{pc}
	...

08002480 <HW_RTC_StopAlarm>:
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8002480:	2180      	movs	r1, #128	; 0x80
{
 8002482:	b510      	push	{r4, lr}
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A );
 8002484:	4c07      	ldr	r4, [pc, #28]	; (80024a4 <HW_RTC_StopAlarm+0x24>)
 8002486:	0049      	lsls	r1, r1, #1
 8002488:	0020      	movs	r0, r4
 800248a:	f003 fc09 	bl	8005ca0 <HAL_RTC_DeactivateAlarm>
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800248e:	6821      	ldr	r1, [r4, #0]
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HW_RTC_StopAlarm+0x28>)
 8002492:	68ca      	ldr	r2, [r1, #12]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	4313      	orrs	r3, r2
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002498:	2280      	movs	r2, #128	; 0x80
  __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF);
 800249a:	60cb      	str	r3, [r1, #12]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HW_RTC_StopAlarm+0x2c>)
 800249e:	0292      	lsls	r2, r2, #10
 80024a0:	615a      	str	r2, [r3, #20]
}
 80024a2:	bd10      	pop	{r4, pc}
 80024a4:	20000138 	.word	0x20000138
 80024a8:	fffffe7f 	.word	0xfffffe7f
 80024ac:	40010400 	.word	0x40010400

080024b0 <HW_RTC_SetAlarm>:
{
 80024b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 80024b2:	4d48      	ldr	r5, [pc, #288]	; (80025d4 <HW_RTC_SetAlarm+0x124>)
{
 80024b4:	b087      	sub	sp, #28
 80024b6:	0006      	movs	r6, r0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 80024b8:	2300      	movs	r3, #0
 80024ba:	5eec      	ldrsh	r4, [r5, r3]
 80024bc:	f7ff ffcc 	bl	8002458 <HW_RTC_GetTimerElapsedTime>
 80024c0:	3403      	adds	r4, #3
 80024c2:	1a30      	subs	r0, r6, r0
    LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 80024c4:	2100      	movs	r1, #0
  if ( (MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ((timeout - HW_RTC_GetTimerElapsedTime( ) )) )
 80024c6:	4284      	cmp	r4, r0
 80024c8:	d300      	bcc.n	80024cc <HW_RTC_SetAlarm+0x1c>
    LPM_SetStopMode(LPM_RTC_Id , LPM_Disable );
 80024ca:	2101      	movs	r1, #1
 80024cc:	2004      	movs	r0, #4
 80024ce:	f004 fd3f 	bl	8006f50 <LPM_SetStopMode>
  if( LPM_GetMode() == LPM_StopMode )
 80024d2:	f004 fd53 	bl	8006f7c <LPM_GetMode>
 80024d6:	2801      	cmp	r0, #1
 80024d8:	d102      	bne.n	80024e0 <HW_RTC_SetAlarm+0x30>
    timeout = timeout -  McuWakeUpTimeCal;
 80024da:	2200      	movs	r2, #0
 80024dc:	5eab      	ldrsh	r3, [r5, r2]
 80024de:	1af6      	subs	r6, r6, r3
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80024e0:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <HW_RTC_SetAlarm+0x128>)
 80024e2:	795a      	ldrb	r2, [r3, #5]
 80024e4:	689f      	ldr	r7, [r3, #8]
 80024e6:	9201      	str	r2, [sp, #4]
 80024e8:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80024ea:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80024ec:	9202      	str	r2, [sp, #8]
 80024ee:	79da      	ldrb	r2, [r3, #7]
 80024f0:	791d      	ldrb	r5, [r3, #4]
 80024f2:	9203      	str	r2, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 80024f4:	7e5a      	ldrb	r2, [r3, #25]
 80024f6:	7edb      	ldrb	r3, [r3, #27]
 80024f8:	9200      	str	r2, [sp, #0]
 80024fa:	9304      	str	r3, [sp, #16]
  HW_RTC_StopAlarm( );
 80024fc:	f7ff ffc0 	bl	8002480 <HW_RTC_StopAlarm>
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002500:	4936      	ldr	r1, [pc, #216]	; (80025dc <HW_RTC_SetAlarm+0x12c>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8002502:	05b2      	lsls	r2, r6, #22
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002504:	1bcf      	subs	r7, r1, r7
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 8002506:	0d92      	lsrs	r2, r2, #22
 8002508:	18ba      	adds	r2, r7, r2
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 800250a:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 800250c:	4e34      	ldr	r6, [pc, #208]	; (80025e0 <HW_RTC_SetAlarm+0x130>)
  rtcAlarmSubSeconds += ( timeoutValue & PREDIV_S);
 800250e:	b292      	uxth	r2, r2
  rtcAlarmDays =  RTC_DateStruct.Date;
 8002510:	b2a0      	uxth	r0, r4
 8002512:	9105      	str	r1, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002514:	42b3      	cmp	r3, r6
 8002516:	d83e      	bhi.n	8002596 <HW_RTC_SetAlarm+0xe6>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8002518:	4932      	ldr	r1, [pc, #200]	; (80025e4 <HW_RTC_SetAlarm+0x134>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 800251a:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800251c:	428b      	cmp	r3, r1
 800251e:	d83f      	bhi.n	80025a0 <HW_RTC_SetAlarm+0xf0>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8002520:	4669      	mov	r1, sp
 8002522:	888e      	ldrh	r6, [r1, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8002524:	2b3b      	cmp	r3, #59	; 0x3b
 8002526:	d840      	bhi.n	80025aa <HW_RTC_SetAlarm+0xfa>
 8002528:	0a97      	lsrs	r7, r2, #10
 800252a:	02bc      	lsls	r4, r7, #10
 800252c:	1b14      	subs	r4, r2, r4
 800252e:	9a02      	ldr	r2, [sp, #8]
 8002530:	b2a4      	uxth	r4, r4
 8002532:	18bf      	adds	r7, r7, r2
 8002534:	18ff      	adds	r7, r7, r3
 8002536:	b2bf      	uxth	r7, r7
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8002538:	2f3b      	cmp	r7, #59	; 0x3b
 800253a:	d83a      	bhi.n	80025b2 <HW_RTC_SetAlarm+0x102>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800253c:	2e3b      	cmp	r6, #59	; 0x3b
 800253e:	d83d      	bhi.n	80025bc <HW_RTC_SetAlarm+0x10c>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8002540:	2d17      	cmp	r5, #23
 8002542:	d840      	bhi.n	80025c6 <HW_RTC_SetAlarm+0x116>
  if( RTC_DateStruct.Year % 4 == 0 ) 
 8002544:	9b04      	ldr	r3, [sp, #16]
 8002546:	079b      	lsls	r3, r3, #30
 8002548:	d142      	bne.n	80025d0 <HW_RTC_SetAlarm+0x120>
    if( rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ] )    
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HW_RTC_SetAlarm+0x138>)
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 800254c:	9a00      	ldr	r2, [sp, #0]
 800254e:	189b      	adds	r3, r3, r2
 8002550:	3b01      	subs	r3, #1
 8002552:	7819      	ldrb	r1, [r3, #0]
 8002554:	4288      	cmp	r0, r1
 8002556:	d902      	bls.n	800255e <HW_RTC_SetAlarm+0xae>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8002558:	f7fd ff50 	bl	80003fc <__aeabi_idivmod>
 800255c:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800255e:	9b05      	ldr	r3, [sp, #20]
 8002560:	4922      	ldr	r1, [pc, #136]	; (80025ec <HW_RTC_SetAlarm+0x13c>)
 8002562:	1b1c      	subs	r4, r3, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK; 
 8002564:	23a0      	movs	r3, #160	; 0xa0
 8002566:	051b      	lsls	r3, r3, #20
 8002568:	618b      	str	r3, [r1, #24]
  RTC_AlarmStructure.AlarmDateWeekDay    = ( uint8_t )rtcAlarmDays;
 800256a:	1c4b      	adds	r3, r1, #1
 800256c:	77d8      	strb	r0, [r3, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800256e:	466b      	mov	r3, sp
 8002570:	7b1b      	ldrb	r3, [r3, #12]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8002572:	2200      	movs	r2, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8002574:	70cb      	strb	r3, [r1, #3]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002576:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 8002578:	481d      	ldr	r0, [pc, #116]	; (80025f0 <HW_RTC_SetAlarm+0x140>)
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 800257a:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S-rtcAlarmSubSeconds;
 800257c:	604c      	str	r4, [r1, #4]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800257e:	708f      	strb	r7, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8002580:	704e      	strb	r6, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8002582:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8002584:	61ca      	str	r2, [r1, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8002586:	614a      	str	r2, [r1, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002588:	624b      	str	r3, [r1, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800258a:	60ca      	str	r2, [r1, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800258c:	610a      	str	r2, [r1, #16]
  HAL_RTC_SetAlarm_IT( &RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN );
 800258e:	f003 fd5d 	bl	800604c <HAL_RTC_SetAlarm_IT>
}
 8002592:	b007      	add	sp, #28
 8002594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8002596:	4917      	ldr	r1, [pc, #92]	; (80025f4 <HW_RTC_SetAlarm+0x144>)
    rtcAlarmDays++;
 8002598:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 800259a:	185b      	adds	r3, r3, r1
    rtcAlarmDays++;
 800259c:	b280      	uxth	r0, r0
 800259e:	e7b9      	b.n	8002514 <HW_RTC_SetAlarm+0x64>
    timeoutValue -= SECONDS_IN_1HOUR;
 80025a0:	4c15      	ldr	r4, [pc, #84]	; (80025f8 <HW_RTC_SetAlarm+0x148>)
    rtcAlarmHours++;
 80025a2:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80025a4:	191b      	adds	r3, r3, r4
    rtcAlarmHours++;
 80025a6:	b2ad      	uxth	r5, r5
 80025a8:	e7b8      	b.n	800251c <HW_RTC_SetAlarm+0x6c>
    rtcAlarmMinutes++;
 80025aa:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80025ac:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 80025ae:	b2b6      	uxth	r6, r6
 80025b0:	e7b8      	b.n	8002524 <HW_RTC_SetAlarm+0x74>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80025b2:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmMinutes++;
 80025b4:	3601      	adds	r6, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80025b6:	b2bf      	uxth	r7, r7
    rtcAlarmMinutes++;
 80025b8:	b2b6      	uxth	r6, r6
 80025ba:	e7bd      	b.n	8002538 <HW_RTC_SetAlarm+0x88>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80025bc:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmHours++;
 80025be:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80025c0:	b2b6      	uxth	r6, r6
    rtcAlarmHours++;
 80025c2:	b2ad      	uxth	r5, r5
 80025c4:	e7ba      	b.n	800253c <HW_RTC_SetAlarm+0x8c>
    rtcAlarmHours -= HOURS_IN_1DAY;
 80025c6:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 80025c8:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 80025ca:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 80025cc:	b280      	uxth	r0, r0
 80025ce:	e7b7      	b.n	8002540 <HW_RTC_SetAlarm+0x90>
    if( rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ] )    
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HW_RTC_SetAlarm+0x14c>)
 80025d2:	e7bb      	b.n	800254c <HW_RTC_SetAlarm+0x9c>
 80025d4:	2000010e 	.word	0x2000010e
 80025d8:	2000015c 	.word	0x2000015c
 80025dc:	000003ff 	.word	0x000003ff
 80025e0:	0001517f 	.word	0x0001517f
 80025e4:	00000e0f 	.word	0x00000e0f
 80025e8:	080082ec 	.word	0x080082ec
 80025ec:	20000110 	.word	0x20000110
 80025f0:	20000138 	.word	0x20000138
 80025f4:	fffeae80 	.word	0xfffeae80
 80025f8:	fffff1f0 	.word	0xfffff1f0
 80025fc:	080082e0 	.word	0x080082e0

08002600 <HW_RTC_IrqHandler>:
  LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 8002600:	2004      	movs	r0, #4
{
 8002602:	b510      	push	{r4, lr}
  LPM_SetStopMode(LPM_RTC_Id , LPM_Enable );
 8002604:	2100      	movs	r1, #0
 8002606:	f004 fca3 	bl	8006f50 <LPM_SetStopMode>
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HW_RTC_IrqHandler+0x34>)
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800260e:	480a      	ldr	r0, [pc, #40]	; (8002638 <HW_RTC_IrqHandler+0x38>)
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002610:	0292      	lsls	r2, r2, #10
 8002612:	615a      	str	r2, [r3, #20]
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8002614:	6803      	ldr	r3, [r0, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	04d2      	lsls	r2, r2, #19
 800261a:	d509      	bpl.n	8002630 <HW_RTC_IrqHandler+0x30>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	05d2      	lsls	r2, r2, #23
 8002620:	d506      	bpl.n	8002630 <HW_RTC_IrqHandler+0x30>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF); 
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	4a05      	ldr	r2, [pc, #20]	; (800263c <HW_RTC_IrqHandler+0x3c>)
 8002626:	b2c9      	uxtb	r1, r1
 8002628:	430a      	orrs	r2, r1
 800262a:	60da      	str	r2, [r3, #12]
      HAL_RTC_AlarmAEventCallback(hrtc);
 800262c:	f000 fa8c 	bl	8002b48 <HAL_RTC_AlarmAEventCallback>
}
 8002630:	bd10      	pop	{r4, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40010400 	.word	0x40010400
 8002638:	20000138 	.word	0x20000138
 800263c:	fffffe7f 	.word	0xfffffe7f

08002640 <HW_RTC_DelayMs>:
{
 8002640:	b570      	push	{r4, r5, r6, lr}
  return ( uint32_t) ( ( ((uint64_t)timeMilliSec) * CONV_DENOM ) / CONV_NUMER );
 8002642:	0e41      	lsrs	r1, r0, #25
 8002644:	227d      	movs	r2, #125	; 0x7d
 8002646:	2300      	movs	r3, #0
 8002648:	01c0      	lsls	r0, r0, #7
 800264a:	f7fd ff1b 	bl	8000484 <__aeabi_uldivmod>
 800264e:	0004      	movs	r4, r0
  timeout = HW_RTC_GetTimerValue( );
 8002650:	f7ff ff0e 	bl	8002470 <HW_RTC_GetTimerValue>
 8002654:	0005      	movs	r5, r0
  while( ( ( HW_RTC_GetTimerValue( ) - timeout ) ) < delayValue )
 8002656:	f7ff ff0b 	bl	8002470 <HW_RTC_GetTimerValue>
 800265a:	1b40      	subs	r0, r0, r5
 800265c:	42a0      	cmp	r0, r4
 800265e:	d300      	bcc.n	8002662 <HW_RTC_DelayMs+0x22>
}
 8002660:	bd70      	pop	{r4, r5, r6, pc}
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	e7f7      	b.n	8002656 <HW_RTC_DelayMs+0x16>
	...

08002668 <HW_RTC_SetTimerContext>:
{
 8002668:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = ( uint32_t ) HW_RTC_GetCalendarValue( &RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time );
 800266a:	4c04      	ldr	r4, [pc, #16]	; (800267c <HW_RTC_SetTimerContext+0x14>)
 800266c:	0020      	movs	r0, r4
 800266e:	1d21      	adds	r1, r4, #4
 8002670:	3018      	adds	r0, #24
 8002672:	f7ff fe89 	bl	8002388 <HW_RTC_GetCalendarValue>
 8002676:	6020      	str	r0, [r4, #0]
}
 8002678:	bd10      	pop	{r4, pc}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	2000015c 	.word	0x2000015c

08002680 <HW_RTC_Init>:
{
 8002680:	b5f0      	push	{r4, r5, r6, r7, lr}
  if( HW_RTC_Initalized == false )
 8002682:	4f1b      	ldr	r7, [pc, #108]	; (80026f0 <HW_RTC_Init+0x70>)
{
 8002684:	b087      	sub	sp, #28
  if( HW_RTC_Initalized == false )
 8002686:	783c      	ldrb	r4, [r7, #0]
 8002688:	2c00      	cmp	r4, #0
 800268a:	d12f      	bne.n	80026ec <HW_RTC_Init+0x6c>
  RtcHandle.Instance = RTC;
 800268c:	4d19      	ldr	r5, [pc, #100]	; (80026f4 <HW_RTC_Init+0x74>)
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HW_RTC_Init+0x78>)
  HAL_RTC_Init( &RtcHandle );
 8002690:	0028      	movs	r0, r5
  RtcHandle.Instance = RTC;
 8002692:	602b      	str	r3, [r5, #0]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8002694:	231f      	movs	r3, #31
 8002696:	60ab      	str	r3, [r5, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8002698:	4b18      	ldr	r3, [pc, #96]	; (80026fc <HW_RTC_Init+0x7c>)
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 800269a:	2601      	movs	r6, #1
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 800269c:	60eb      	str	r3, [r5, #12]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800269e:	606c      	str	r4, [r5, #4]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 80026a0:	612c      	str	r4, [r5, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026a2:	61ac      	str	r4, [r5, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026a4:	61ec      	str	r4, [r5, #28]
  HAL_RTC_Init( &RtcHandle );
 80026a6:	f003 fb91 	bl	8005dcc <HAL_RTC_Init>
  RTC_DateStruct.Year = 0;
 80026aa:	466b      	mov	r3, sp
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 80026ac:	4669      	mov	r1, sp
 80026ae:	0022      	movs	r2, r4
 80026b0:	0028      	movs	r0, r5
  RTC_DateStruct.Year = 0;
 80026b2:	70dc      	strb	r4, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 80026b4:	705e      	strb	r6, [r3, #1]
  RTC_DateStruct.Date = 1;
 80026b6:	709e      	strb	r6, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 80026b8:	701e      	strb	r6, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle , &RTC_DateStruct, RTC_FORMAT_BIN);
 80026ba:	f003 fc5b 	bl	8005f74 <HAL_RTC_SetDate>
  RTC_TimeStruct.Hours = 0;
 80026be:	a901      	add	r1, sp, #4
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 80026c0:	0022      	movs	r2, r4
 80026c2:	0028      	movs	r0, r5
  RTC_TimeStruct.Hours = 0;
 80026c4:	700c      	strb	r4, [r1, #0]
  RTC_TimeStruct.Minutes = 0;
 80026c6:	704c      	strb	r4, [r1, #1]
  RTC_TimeStruct.Seconds = 0;
 80026c8:	708c      	strb	r4, [r1, #2]
  RTC_TimeStruct.TimeFormat = 0;
 80026ca:	70cc      	strb	r4, [r1, #3]
  RTC_TimeStruct.SubSeconds = 0;
 80026cc:	604c      	str	r4, [r1, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 80026ce:	610c      	str	r4, [r1, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 80026d0:	60cc      	str	r4, [r1, #12]
  HAL_RTC_SetTime(&RtcHandle , &RTC_TimeStruct, RTC_FORMAT_BIN);
 80026d2:	f003 fbd1 	bl	8005e78 <HAL_RTC_SetTime>
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 80026d6:	0028      	movs	r0, r5
 80026d8:	f003 fdd6 	bl	8006288 <HAL_RTCEx_EnableBypassShadow>
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0028      	movs	r0, r5
 80026e0:	0049      	lsls	r1, r1, #1
 80026e2:	f003 fadd 	bl	8005ca0 <HAL_RTC_DeactivateAlarm>
    HW_RTC_SetTimerContext( );
 80026e6:	f7ff ffbf 	bl	8002668 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 80026ea:	703e      	strb	r6, [r7, #0]
}
 80026ec:	b007      	add	sp, #28
 80026ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026f0:	2000010c 	.word	0x2000010c
 80026f4:	20000138 	.word	0x20000138
 80026f8:	40002800 	.word	0x40002800
 80026fc:	000003ff 	.word	0x000003ff

08002700 <HW_RTC_GetTimerContext>:
  return RtcTimerContext.Rtc_Time;
 8002700:	4b01      	ldr	r3, [pc, #4]	; (8002708 <HW_RTC_GetTimerContext+0x8>)
 8002702:	6818      	ldr	r0, [r3, #0]
}
 8002704:	4770      	bx	lr
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	2000015c 	.word	0x2000015c

0800270c <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit( );
}

void HW_SPI_IoInit( void )
{
 800270c:	b570      	push	{r4, r5, r6, lr}
 800270e:	b086      	sub	sp, #24
  GPIO_InitTypeDef initStruct={0};
 8002710:	2214      	movs	r2, #20
 8002712:	2100      	movs	r1, #0
 8002714:	a801      	add	r0, sp, #4
 8002716:	f004 ffdc 	bl	80076d2 <memset>
  initStruct.Pull =GPIO_NOPULL  ;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Alternate= SPI1_AF ;

  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800271a:	24a0      	movs	r4, #160	; 0xa0
  initStruct.Mode =GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 800271e:	05e4      	lsls	r4, r4, #23
  initStruct.Mode =GPIO_MODE_AF_PP;
 8002720:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8002722:	aa01      	add	r2, sp, #4
  initStruct.Speed = GPIO_SPEED_HIGH;
 8002724:	3301      	adds	r3, #1
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8002726:	2108      	movs	r1, #8
 8002728:	480f      	ldr	r0, [pc, #60]	; (8002768 <HW_SPI_IoInit+0x5c>)
  initStruct.Speed = GPIO_SPEED_HIGH;
 800272a:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pull = GPIO_NOPULL;

  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800272c:	2580      	movs	r5, #128	; 0x80
  HW_GPIO_Init( RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 800272e:	f7ff fdb3 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8002732:	aa01      	add	r2, sp, #4
 8002734:	0020      	movs	r0, r4
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	f7ff fdae 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 800273c:	aa01      	add	r2, sp, #4
 800273e:	0020      	movs	r0, r4
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	f7ff fda9 	bl	8002298 <HW_GPIO_Init>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002746:	2601      	movs	r6, #1
  initStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 800274a:	022d      	lsls	r5, r5, #8
 800274c:	aa01      	add	r2, sp, #4
 800274e:	0029      	movs	r1, r5
 8002750:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_NOPULL;
 8002752:	9303      	str	r3, [sp, #12]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002754:	9602      	str	r6, [sp, #8]
  HW_GPIO_Init(  RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct );
 8002756:	f7ff fd9f 	bl	8002298 <HW_GPIO_Init>

  HW_GPIO_Write ( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800275a:	0032      	movs	r2, r6
 800275c:	0029      	movs	r1, r5
 800275e:	0020      	movs	r0, r4
 8002760:	f7ff fe0c 	bl	800237c <HW_GPIO_Write>
}
 8002764:	b006      	add	sp, #24
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	50000400 	.word	0x50000400

0800276c <HW_SPI_Init>:
  hspi.Instance = SPI1;
 800276c:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HW_SPI_Init+0x6c>)
 800276e:	481b      	ldr	r0, [pc, #108]	; (80027dc <HW_SPI_Init+0x70>)
{
 8002770:	b510      	push	{r4, lr}
  hspi.Instance = SPI1;
 8002772:	6003      	str	r3, [r0, #0]
/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency( uint32_t hz )
{
  uint32_t divisor = 0;
  uint32_t SysClkTmp = SystemCoreClock;
 8002774:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <HW_SPI_Init+0x74>)
  uint32_t baudRate;
  
  while( SysClkTmp > hz)
 8002776:	491b      	ldr	r1, [pc, #108]	; (80027e4 <HW_SPI_Init+0x78>)
  uint32_t SysClkTmp = SystemCoreClock;
 8002778:	681a      	ldr	r2, [r3, #0]
  uint32_t divisor = 0;
 800277a:	2300      	movs	r3, #0
  while( SysClkTmp > hz)
 800277c:	428a      	cmp	r2, r1
 800277e:	d903      	bls.n	8002788 <HW_SPI_Init+0x1c>
  {
    divisor++;
 8002780:	3301      	adds	r3, #1
    SysClkTmp= ( SysClkTmp >> 1);
 8002782:	0852      	lsrs	r2, r2, #1
    
    if (divisor >= 7)
 8002784:	2b07      	cmp	r3, #7
 8002786:	d1f9      	bne.n	800277c <HW_SPI_Init+0x10>
      break;
  }
  
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8002788:	075a      	lsls	r2, r3, #29
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 800278a:	0799      	lsls	r1, r3, #30
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800278c:	0fd2      	lsrs	r2, r2, #31
            ((( divisor & 0x2 ) == 0 )? 0x0 : SPI_CR1_BR_1  )| 
 800278e:	0fc9      	lsrs	r1, r1, #31
 8002790:	0109      	lsls	r1, r1, #4
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 8002792:	0152      	lsls	r2, r2, #5
 8002794:	430a      	orrs	r2, r1
            ((( divisor & 0x1 ) == 0 )? 0x0 : SPI_CR1_BR_0  );
 8002796:	2101      	movs	r1, #1
 8002798:	400b      	ands	r3, r1
 800279a:	00db      	lsls	r3, r3, #3
  baudRate =((( divisor & 0x4 ) == 0 )? 0x0 : SPI_CR1_BR_2  )| 
 800279c:	4313      	orrs	r3, r2
  hspi.Init.BaudRatePrescaler = SpiFrequency( 10000000 );
 800279e:	61c3      	str	r3, [r0, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 80027a0:	2300      	movs	r3, #0
  hspi.Init.Mode           = SPI_MODE_MASTER;
 80027a2:	2282      	movs	r2, #130	; 0x82
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 80027a4:	6083      	str	r3, [r0, #8]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80027a6:	6103      	str	r3, [r0, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80027a8:	6143      	str	r3, [r0, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 80027aa:	60c3      	str	r3, [r0, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;  
 80027ac:	6283      	str	r3, [r0, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80027ae:	6203      	str	r3, [r0, #32]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 80027b0:	6243      	str	r3, [r0, #36]	; 0x24
  SPI_CLK_ENABLE(); 
 80027b2:	2380      	movs	r3, #128	; 0x80
  hspi.Init.Mode           = SPI_MODE_MASTER;
 80027b4:	0052      	lsls	r2, r2, #1
 80027b6:	6042      	str	r2, [r0, #4]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 80027b8:	32fc      	adds	r2, #252	; 0xfc
 80027ba:	6182      	str	r2, [r0, #24]
  SPI_CLK_ENABLE(); 
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <HW_SPI_Init+0x7c>)
 80027be:	015b      	lsls	r3, r3, #5
 80027c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80027c2:	430b      	orrs	r3, r1
 80027c4:	6353      	str	r3, [r2, #52]	; 0x34
  if(HAL_SPI_Init( &hspi) != HAL_OK)
 80027c6:	f003 fdc5 	bl	8006354 <HAL_SPI_Init>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d001      	beq.n	80027d2 <HW_SPI_Init+0x66>
     Error_Handler();
 80027ce:	f7ff fd3d 	bl	800224c <Error_Handler>
  HW_SPI_IoInit(  );
 80027d2:	f7ff ff9b 	bl	800270c <HW_SPI_IoInit>
}
 80027d6:	bd10      	pop	{r4, pc}
 80027d8:	40013000 	.word	0x40013000
 80027dc:	20000178 	.word	0x20000178
 80027e0:	20000004 	.word	0x20000004
 80027e4:	00989680 	.word	0x00989680
 80027e8:	40021000 	.word	0x40021000

080027ec <HW_SPI_InOut>:
{
 80027ec:	b510      	push	{r4, lr}
 80027ee:	210e      	movs	r1, #14
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 80027f0:	2416      	movs	r4, #22
 80027f2:	2301      	movs	r3, #1
{
 80027f4:	b086      	sub	sp, #24
 80027f6:	4469      	add	r1, sp
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 80027f8:	446c      	add	r4, sp
 80027fa:	425b      	negs	r3, r3
{
 80027fc:	8008      	strh	r0, [r1, #0]
  HAL_SPI_TransmitReceive( &hspi, ( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1, HAL_MAX_DELAY);	
 80027fe:	0022      	movs	r2, r4
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4803      	ldr	r0, [pc, #12]	; (8002810 <HW_SPI_InOut+0x24>)
 8002804:	3302      	adds	r3, #2
 8002806:	f003 fde5 	bl	80063d4 <HAL_SPI_TransmitReceive>
  return rxData;
 800280a:	8820      	ldrh	r0, [r4, #0]
}
 800280c:	b006      	add	sp, #24
 800280e:	bd10      	pop	{r4, pc}
 8002810:	20000178 	.word	0x20000178

08002814 <onFhssChangeChannel>:
#endif
	Radio.Sleep( );
	State = SLEEP_S;
}

void onFhssChangeChannel(uint8_t currentChannel){};	//HSS Change Channel callback prototype;
 8002814:	4770      	bx	lr

08002816 <onCadDone>:
void onCadDone(bool channelActivityDetected){}
 8002816:	4770      	bx	lr

08002818 <onTxDone>:
void onTxDone(){
 8002818:	b510      	push	{r4, lr}
	PRINTF("Transmition done! \r \n");
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <onTxDone+0x18>)
 800281c:	f004 feac 	bl	8007578 <TraceSend>
	State = RX_S;
 8002820:	2203      	movs	r2, #3
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <onTxDone+0x1c>)
 8002824:	701a      	strb	r2, [r3, #0]
	exe = false;
 8002826:	2200      	movs	r2, #0
 8002828:	4b03      	ldr	r3, [pc, #12]	; (8002838 <onTxDone+0x20>)
 800282a:	701a      	strb	r2, [r3, #0]
}
 800282c:	bd10      	pop	{r4, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	0800833c 	.word	0x0800833c
 8002834:	200001f0 	.word	0x200001f0
 8002838:	200001f8 	.word	0x200001f8

0800283c <onTxTimeout>:
void onTxTimeout(){
 800283c:	b510      	push	{r4, lr}
	PRINTF("Transmition fail! -> timeout \r \n");
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <onTxTimeout+0x18>)
 8002840:	f004 fe9a 	bl	8007578 <TraceSend>
	State = ERROR_HANDLE;
 8002844:	2204      	movs	r2, #4
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <onTxTimeout+0x1c>)
 8002848:	701a      	strb	r2, [r3, #0]
	exe = false;
 800284a:	2200      	movs	r2, #0
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <onTxTimeout+0x20>)
 800284e:	701a      	strb	r2, [r3, #0]
}
 8002850:	bd10      	pop	{r4, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	08008352 	.word	0x08008352
 8002858:	200001f0 	.word	0x200001f0
 800285c:	200001f8 	.word	0x200001f8

08002860 <onRxTimeout>:
void onRxTimeout(){
 8002860:	b510      	push	{r4, lr}
	PRINTF("RX TIMEOUT \r \n");
 8002862:	4804      	ldr	r0, [pc, #16]	; (8002874 <onRxTimeout+0x14>)
 8002864:	f004 fe88 	bl	8007578 <TraceSend>
	exe = false;
 8002868:	2300      	movs	r3, #0
 800286a:	4a03      	ldr	r2, [pc, #12]	; (8002878 <onRxTimeout+0x18>)
 800286c:	7013      	strb	r3, [r2, #0]
		State = SLEEP_S;
 800286e:	4a03      	ldr	r2, [pc, #12]	; (800287c <onRxTimeout+0x1c>)
 8002870:	7013      	strb	r3, [r2, #0]
}
 8002872:	bd10      	pop	{r4, pc}
 8002874:	0800832d 	.word	0x0800832d
 8002878:	200001f8 	.word	0x200001f8
 800287c:	200001f0 	.word	0x200001f0

08002880 <onRxError>:
void onRxError(){
 8002880:	b510      	push	{r4, lr}
	exe = false;
 8002882:	2400      	movs	r4, #0
 8002884:	4b05      	ldr	r3, [pc, #20]	; (800289c <onRxError+0x1c>)
	PRINTF("RX ERROR \r \n");
 8002886:	4806      	ldr	r0, [pc, #24]	; (80028a0 <onRxError+0x20>)
	exe = false;
 8002888:	701c      	strb	r4, [r3, #0]
	PRINTF("RX ERROR \r \n");
 800288a:	f004 fe75 	bl	8007578 <TraceSend>
	Radio.Sleep( );
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <onRxError+0x24>)
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	4798      	blx	r3
	State = SLEEP_S;
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <onRxError+0x28>)
 8002896:	701c      	strb	r4, [r3, #0]
}
 8002898:	bd10      	pop	{r4, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	200001f8 	.word	0x200001f8
 80028a0:	08008320 	.word	0x08008320
 80028a4:	08008418 	.word	0x08008418
 80028a8:	200001f0 	.word	0x200001f0

080028ac <radio_init>:
	RadioEvents.TxDone = onTxDone;
 80028ac:	4822      	ldr	r0, [pc, #136]	; (8002938 <radio_init+0x8c>)
 80028ae:	4b23      	ldr	r3, [pc, #140]	; (800293c <radio_init+0x90>)
void radio_init(){
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	RadioEvents.TxDone = onTxDone;
 80028b2:	6003      	str	r3, [r0, #0]
	RadioEvents.TxTimeout = onTxTimeout;
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <radio_init+0x94>)
	Radio.Init( &RadioEvents );
 80028b6:	4e23      	ldr	r6, [pc, #140]	; (8002944 <radio_init+0x98>)
	RadioEvents.TxTimeout = onTxTimeout;
 80028b8:	6043      	str	r3, [r0, #4]
	RadioEvents.RxDone = onRxDone;
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <radio_init+0x9c>)
void radio_init(){
 80028bc:	b08b      	sub	sp, #44	; 0x2c
	RadioEvents.RxDone = onRxDone;
 80028be:	6083      	str	r3, [r0, #8]
	RadioEvents.RxTimeout = onRxTimeout;
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <radio_init+0xa0>)
	Radio.SetTxConfig( MODEM_LORA, TxPower, 0, Bw, SfRx, LORA_CODINGRATE,
 80028c2:	2400      	movs	r4, #0
	RadioEvents.RxTimeout = onRxTimeout;
 80028c4:	60c3      	str	r3, [r0, #12]
	RadioEvents.RxError = onRxError;
 80028c6:	4b22      	ldr	r3, [pc, #136]	; (8002950 <radio_init+0xa4>)
	Radio.SetTxConfig( MODEM_LORA, TxPower, 0, Bw, SfRx, LORA_CODINGRATE,
 80028c8:	2501      	movs	r5, #1
	RadioEvents.RxError = onRxError;
 80028ca:	6103      	str	r3, [r0, #16]
	RadioEvents.FhssChangeChannel = onFhssChangeChannel;
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <radio_init+0xa8>)
 80028ce:	6143      	str	r3, [r0, #20]
	RadioEvents.CadDone = onCadDone;
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <radio_init+0xac>)
 80028d2:	6183      	str	r3, [r0, #24]
	Radio.Init( &RadioEvents );
 80028d4:	68b3      	ldr	r3, [r6, #8]
 80028d6:	4798      	blx	r3
	Radio.SetChannel( RF_FREQUENCY );
 80028d8:	6973      	ldr	r3, [r6, #20]
 80028da:	4820      	ldr	r0, [pc, #128]	; (800295c <radio_init+0xb0>)
 80028dc:	4798      	blx	r3
	Radio.SetTxConfig( MODEM_LORA, TxPower, 0, Bw, SfRx, LORA_CODINGRATE,
 80028de:	2100      	movs	r1, #0
 80028e0:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <radio_init+0xb4>)
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <radio_init+0xb8>)
 80028e4:	5651      	ldrsb	r1, [r2, r1]
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <radio_init+0xbc>)
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	9208      	str	r2, [sp, #32]
 80028ec:	2208      	movs	r2, #8
 80028ee:	9202      	str	r2, [sp, #8]
 80028f0:	4a1e      	ldr	r2, [pc, #120]	; (800296c <radio_init+0xc0>)
 80028f2:	9407      	str	r4, [sp, #28]
 80028f4:	9406      	str	r4, [sp, #24]
 80028f6:	9405      	str	r4, [sp, #20]
 80028f8:	9403      	str	r4, [sp, #12]
 80028fa:	9504      	str	r5, [sp, #16]
 80028fc:	9501      	str	r5, [sp, #4]
 80028fe:	7812      	ldrb	r2, [r2, #0]
 8002900:	0028      	movs	r0, r5
 8002902:	b252      	sxtb	r2, r2
 8002904:	9200      	str	r2, [sp, #0]
 8002906:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8002908:	0022      	movs	r2, r4
 800290a:	47b8      	blx	r7
	Radio.SetRxConfig( MODEM_LORA, Bw, SfTx,LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
 800290c:	2200      	movs	r2, #0
 800290e:	4b18      	ldr	r3, [pc, #96]	; (8002970 <radio_init+0xc4>)
 8002910:	0028      	movs	r0, r5
 8002912:	569a      	ldrsb	r2, [r3, r2]
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <radio_init+0xb8>)
 8002916:	8819      	ldrh	r1, [r3, #0]
 8002918:	2308      	movs	r3, #8
 800291a:	9408      	str	r4, [sp, #32]
 800291c:	9407      	str	r4, [sp, #28]
 800291e:	9406      	str	r4, [sp, #24]
 8002920:	9404      	str	r4, [sp, #16]
 8002922:	9403      	str	r4, [sp, #12]
 8002924:	9402      	str	r4, [sp, #8]
 8002926:	9301      	str	r3, [sp, #4]
 8002928:	9400      	str	r4, [sp, #0]
 800292a:	9509      	str	r5, [sp, #36]	; 0x24
 800292c:	9505      	str	r5, [sp, #20]
 800292e:	6a34      	ldr	r4, [r6, #32]
 8002930:	002b      	movs	r3, r5
 8002932:	47a0      	blx	r4
}
 8002934:	b00b      	add	sp, #44	; 0x2c
 8002936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002938:	200001d4 	.word	0x200001d4
 800293c:	08002819 	.word	0x08002819
 8002940:	0800283d 	.word	0x0800283d
 8002944:	08008418 	.word	0x08008418
 8002948:	08002a4d 	.word	0x08002a4d
 800294c:	08002861 	.word	0x08002861
 8002950:	08002881 	.word	0x08002881
 8002954:	08002815 	.word	0x08002815
 8002958:	08002817 	.word	0x08002817
 800295c:	33bca100 	.word	0x33bca100
 8002960:	20000002 	.word	0x20000002
 8002964:	200001d0 	.word	0x200001d0
 8002968:	00000bb8 	.word	0x00000bb8
 800296c:	20000000 	.word	0x20000000
 8002970:	20000001 	.word	0x20000001

08002974 <main>:
int main(){
 8002974:	b507      	push	{r0, r1, r2, lr}
	HAL_Init();
 8002976:	f001 fff9 	bl	800496c <HAL_Init>
	SystemClock_Config();
 800297a:	f000 f957 	bl	8002c2c <SystemClock_Config>
	HW_Init();
 800297e:	f000 f9cd 	bl	8002d1c <HW_Init>
	radio_init();
 8002982:	f7ff ff93 	bl	80028ac <radio_init>
	DBG_Init();
 8002986:	f7ff fc2f 	bl	80021e8 <DBG_Init>
	Radio.Rx( 0);
 800298a:	4b03      	ldr	r3, [pc, #12]	; (8002998 <main+0x24>)
 800298c:	2000      	movs	r0, #0
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	4798      	blx	r3
 8002994:	e7fe      	b.n	8002994 <main+0x20>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	08008418 	.word	0x08008418

0800299c <parser>:
void parser(uint8_t* pData, uint16_t size){
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	0004      	movs	r4, r0
	RxData= (Packet_t*)malloc(sizeof(Packet_t));
 80029a0:	2014      	movs	r0, #20
 80029a2:	f004 fe83 	bl	80076ac <malloc>
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <parser+0x34>)
 80029a8:	0005      	movs	r5, r0
 80029aa:	6018      	str	r0, [r3, #0]
	RxData->devAddr = (*pData << 8)|(*(pData+1)&0xFF);
 80029ac:	7822      	ldrb	r2, [r4, #0]
 80029ae:	7863      	ldrb	r3, [r4, #1]
 80029b0:	0212      	lsls	r2, r2, #8
 80029b2:	4313      	orrs	r3, r2
	RxData->pSize = *(pData+3);
 80029b4:	78e6      	ldrb	r6, [r4, #3]
	RxData->devAddr = (*pData << 8)|(*(pData+1)&0xFF);
 80029b6:	8043      	strh	r3, [r0, #2]
	RxData->MacType = *(pData+2);
 80029b8:	78a3      	ldrb	r3, [r4, #2]
	RxData->pSize = *(pData+3);
 80029ba:	7306      	strb	r6, [r0, #12]
	RxData->MacType = *(pData+2);
 80029bc:	7103      	strb	r3, [r0, #4]
	RxData->pData = (uint8_t*)malloc(RxData->pSize);
 80029be:	0030      	movs	r0, r6
 80029c0:	f004 fe74 	bl	80076ac <malloc>
	memcpy(RxData->pData, pData + 4,RxData->pSize );
 80029c4:	0032      	movs	r2, r6
 80029c6:	1d21      	adds	r1, r4, #4
	RxData->pData = (uint8_t*)malloc(RxData->pSize);
 80029c8:	60a8      	str	r0, [r5, #8]
	memcpy(RxData->pData, pData + 4,RxData->pSize );
 80029ca:	f004 fe79 	bl	80076c0 <memcpy>
}
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
 80029d0:	200005f0 	.word	0x200005f0

080029d4 <printRx>:
void printRx(){
 80029d4:	b510      	push	{r4, lr}
	if(RxData == 0){
 80029d6:	4c17      	ldr	r4, [pc, #92]	; (8002a34 <printRx+0x60>)
void printRx(){
 80029d8:	b0c8      	sub	sp, #288	; 0x120
	if(RxData == 0){
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d104      	bne.n	80029ea <printRx+0x16>
		PRINTF("ERROR DATA NULL");
 80029e0:	4815      	ldr	r0, [pc, #84]	; (8002a38 <printRx+0x64>)
 80029e2:	f004 fdc9 	bl	8007578 <TraceSend>
}
 80029e6:	b048      	add	sp, #288	; 0x120
 80029e8:	bd10      	pop	{r4, pc}
	PRINTF("\t pData -> \n\r");
 80029ea:	4814      	ldr	r0, [pc, #80]	; (8002a3c <printRx+0x68>)
 80029ec:	f004 fdc4 	bl	8007578 <TraceSend>
	sprintf(str, "CONT = %d \n DevAddr= %X \n\r MacType = %u \n\r pZise = %u \n \r pData = 0x%X 0x%X 0x%X 0x%X 0x%X ",cont,RxData->devAddr,RxData->MacType,RxData->pSize,RxData->pData[0],RxData->pData[1],RxData->pData[2],RxData->pData[3],RxData->pData[4] );
 80029f0:	6821      	ldr	r1, [r4, #0]
 80029f2:	4c13      	ldr	r4, [pc, #76]	; (8002a40 <printRx+0x6c>)
 80029f4:	688a      	ldr	r2, [r1, #8]
 80029f6:	884b      	ldrh	r3, [r1, #2]
 80029f8:	7910      	ldrb	r0, [r2, #4]
 80029fa:	9006      	str	r0, [sp, #24]
 80029fc:	78d0      	ldrb	r0, [r2, #3]
 80029fe:	9005      	str	r0, [sp, #20]
 8002a00:	7890      	ldrb	r0, [r2, #2]
 8002a02:	9004      	str	r0, [sp, #16]
 8002a04:	7850      	ldrb	r0, [r2, #1]
 8002a06:	9003      	str	r0, [sp, #12]
 8002a08:	7812      	ldrb	r2, [r2, #0]
 8002a0a:	a808      	add	r0, sp, #32
 8002a0c:	9202      	str	r2, [sp, #8]
 8002a0e:	7b0a      	ldrb	r2, [r1, #12]
 8002a10:	9201      	str	r2, [sp, #4]
 8002a12:	790a      	ldrb	r2, [r1, #4]
 8002a14:	490b      	ldr	r1, [pc, #44]	; (8002a44 <printRx+0x70>)
 8002a16:	9200      	str	r2, [sp, #0]
 8002a18:	6822      	ldr	r2, [r4, #0]
 8002a1a:	f004 ff1d 	bl	8007858 <siprintf>
	PRINTF(str);
 8002a1e:	a808      	add	r0, sp, #32
 8002a20:	f004 fdaa 	bl	8007578 <TraceSend>
	PRINTF("\r \n");
 8002a24:	4808      	ldr	r0, [pc, #32]	; (8002a48 <printRx+0x74>)
 8002a26:	f004 fda7 	bl	8007578 <TraceSend>
	cont++;
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	6023      	str	r3, [r4, #0]
 8002a30:	e7d9      	b.n	80029e6 <printRx+0x12>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	200005f0 	.word	0x200005f0
 8002a38:	08008373 	.word	0x08008373
 8002a3c:	08008383 	.word	0x08008383
 8002a40:	200001f4 	.word	0x200001f4
 8002a44:	08008391 	.word	0x08008391
 8002a48:	0800834e 	.word	0x0800834e

08002a4c <onRxDone>:
void onRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr ){
 8002a4c:	b510      	push	{r4, lr}
	if(size < 4)
 8002a4e:	2903      	cmp	r1, #3
 8002a50:	d917      	bls.n	8002a82 <onRxDone+0x36>
	exe = false;
 8002a52:	2400      	movs	r4, #0
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <onRxDone+0x48>)
 8002a56:	701c      	strb	r4, [r3, #0]
	parser(payload, size);
 8002a58:	f7ff ffa0 	bl	800299c <parser>
	printRx();
 8002a5c:	f7ff ffba 	bl	80029d4 <printRx>
	switch(RxData->MacType){
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <onRxDone+0x4c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	791b      	ldrb	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d006      	beq.n	8002a78 <onRxDone+0x2c>
 8002a6a:	42a3      	cmp	r3, r4
 8002a6c:	d00e      	beq.n	8002a8c <onRxDone+0x40>
 8002a6e:	4a0b      	ldr	r2, [pc, #44]	; (8002a9c <onRxDone+0x50>)
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d007      	beq.n	8002a84 <onRxDone+0x38>
			State = SLEEP_S;
 8002a74:	7014      	strb	r4, [r2, #0]
			break;
 8002a76:	e004      	b.n	8002a82 <onRxDone+0x36>
			State = SLEEP_S;
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <onRxDone+0x50>)
			PRINTF("RX ok! -> ACK \r \n");
 8002a7a:	4809      	ldr	r0, [pc, #36]	; (8002aa0 <onRxDone+0x54>)
			State = SLEEP_S;
 8002a7c:	701c      	strb	r4, [r3, #0]
			PRINTF("RX ERROR! -> NACK \r \n");
 8002a7e:	f004 fd7b 	bl	8007578 <TraceSend>
}
 8002a82:	bd10      	pop	{r4, pc}
			State = ERROR_HANDLE;
 8002a84:	2304      	movs	r3, #4
			PRINTF("RX ERROR! -> NACK \r \n");
 8002a86:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <onRxDone+0x58>)
			State = ERROR_HANDLE;
 8002a88:	7013      	strb	r3, [r2, #0]
 8002a8a:	e7f8      	b.n	8002a7e <onRxDone+0x32>
			printRx();
 8002a8c:	f7ff ffa2 	bl	80029d4 <printRx>
			break;
 8002a90:	e7f7      	b.n	8002a82 <onRxDone+0x36>
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	200001f8 	.word	0x200001f8
 8002a98:	200005f0 	.word	0x200005f0
 8002a9c:	200001f0 	.word	0x200001f0
 8002aa0:	080082f8 	.word	0x080082f8
 8002aa4:	0800830a 	.word	0x0800830a

08002aa8 <HAL_InitTick>:
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
   /* Return function status */
  return HAL_OK;
}
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	4770      	bx	lr

08002aac <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002aac:	b507      	push	{r0, r1, r2, lr}
 8002aae:	9001      	str	r0, [sp, #4]
  HW_RTC_DelayMs( Delay ); /* based on RTC */
 8002ab0:	9801      	ldr	r0, [sp, #4]
 8002ab2:	f7ff fdc5 	bl	8002640 <HW_RTC_DelayMs>
}
 8002ab6:	bd07      	pop	{r0, r1, r2, pc}

08002ab8 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_MspInit+0x2c>)
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8002ac0:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD( ); 
 8002ac6:	f002 fb3f 	bl	8005148 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower( );
 8002aca:	f002 fb4f 	bl	800516c <HAL_PWREx_EnableUltraLowPower>
  
  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002ace:	2308      	movs	r3, #8
 8002ad0:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_MspInit+0x30>)
 8002ad2:	6811      	ldr	r1, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6013      	str	r3, [r2, #0]
   */
  DBG( __HAL_FLASH_SLEEP_POWERDOWN_DISABLE(); );
  
#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/  
  HAL_PWREx_EnableFastWakeUp( );
 8002ad8:	f002 fb3e 	bl	8005158 <HAL_PWREx_EnableFastWakeUp>
#else  
  HAL_PWREx_DisableFastWakeUp( );
#endif

  HW_GpioInit( );
 8002adc:	f000 f84c 	bl	8002b78 <HW_GpioInit>
}
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40022000 	.word	0x40022000

08002aec <HAL_RTC_MspInit>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8002aec:	2304      	movs	r3, #4
{
 8002aee:	b500      	push	{lr}
 8002af0:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8002af2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002af8:	3301      	adds	r3, #1
 8002afa:	33ff      	adds	r3, #255	; 0xff
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002afc:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002afe:	930c      	str	r3, [sp, #48]	; 0x30
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b00:	f002 fb78 	bl	80051f4 <HAL_RCC_OscConfig>
 8002b04:	2800      	cmp	r0, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_RTC_MspInit+0x20>
  {
    Error_Handler();
 8002b08:	f7ff fba0 	bl	800224c <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b10:	2380      	movs	r3, #128	; 0x80
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b12:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b14:	025b      	lsls	r3, r3, #9
 8002b16:	9302      	str	r3, [sp, #8]
  if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b18:	f002 fef0 	bl	80058fc <HAL_RCCEx_PeriphCLKConfig>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_RTC_MspInit+0x38>
  { 
    Error_Handler();
 8002b20:	f7ff fb94 	bl	800224c <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_RTC_MspInit+0x58>)
 8002b28:	02db      	lsls	r3, r3, #11
 8002b2a:	6d11      	ldr	r1, [r2, #80]	; 0x50
  
  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8002b2c:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 8002b2e:	430b      	orrs	r3, r1
 8002b30:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	0011      	movs	r1, r2
 8002b36:	f002 f825 	bl	8004b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	f002 f852 	bl	8004be4 <HAL_NVIC_EnableIRQ>
}
 8002b40:	b019      	add	sp, #100	; 0x64
 8002b42:	bd00      	pop	{pc}
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b48:	b510      	push	{r4, lr}
  TimerIrqHandler( );
 8002b4a:	f004 fc51 	bl	80073f0 <TimerIrqHandler>
}
 8002b4e:	bd10      	pop	{r4, pc}

08002b50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b50:	b510      	push	{r4, lr}
  HW_GPIO_IrqHandler( GPIO_Pin );
 8002b52:	f7ff fc07 	bl	8002364 <HW_GPIO_IrqHandler>
}
 8002b56:	bd10      	pop	{r4, pc}

08002b58 <MSP_GetIRQn>:
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn( uint16_t GPIO_Pin)
{
  switch( GPIO_Pin )
 8002b58:	3801      	subs	r0, #1
{
 8002b5a:	b500      	push	{lr}
  switch( GPIO_Pin )
 8002b5c:	2807      	cmp	r0, #7
 8002b5e:	d807      	bhi.n	8002b70 <MSP_GetIRQn+0x18>
 8002b60:	f7fd fad2 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002b64:	04060808 	.word	0x04060808
 8002b68:	04060606 	.word	0x04060606
  {
    case GPIO_PIN_0:  
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
    case GPIO_PIN_2: 
    case GPIO_PIN_3:  return EXTI2_3_IRQn;
 8002b6c:	2006      	movs	r0, #6
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15: 
    default: return EXTI4_15_IRQn;
  }
}
 8002b6e:	bd00      	pop	{pc}
    default: return EXTI4_15_IRQn;
 8002b70:	2007      	movs	r0, #7
 8002b72:	e7fc      	b.n	8002b6e <MSP_GetIRQn+0x16>
    case GPIO_PIN_1:  return EXTI0_1_IRQn;
 8002b74:	2005      	movs	r0, #5
 8002b76:	e7fa      	b.n	8002b6e <MSP_GetIRQn+0x16>

08002b78 <HW_GpioInit>:
  vcom_IoDeInit( );
}


void HW_GpioInit(void)
{
 8002b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    GPIO_InitTypeDef GPIO_InitStruct={0};

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7c:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7e:	2504      	movs	r5, #4
{
 8002b80:	b08b      	sub	sp, #44	; 0x2c
    GPIO_InitTypeDef GPIO_InitStruct={0};
 8002b82:	2214      	movs	r2, #20
 8002b84:	2100      	movs	r1, #0
 8002b86:	a805      	add	r0, sp, #20
 8002b88:	f004 fda3 	bl	80076d2 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b8c:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8e:	4c21      	ldr	r4, [pc, #132]	; (8002c14 <HW_GpioInit+0x9c>)

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~( GPIO_PIN_13 | GPIO_PIN_14) );
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b90:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	433b      	orrs	r3, r7
 8002b98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	403b      	ands	r3, r7
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ba6:	4333      	orrs	r3, r6
 8002ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002baa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bac:	4033      	ands	r3, r6
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bb4:	432b      	orrs	r3, r5
 8002bb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bba:	402b      	ands	r3, r5
 8002bbc:	9303      	str	r3, [sp, #12]
 8002bbe:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002bc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bc8:	4013      	ands	r3, r2
 8002bca:	9304      	str	r3, [sp, #16]
 8002bcc:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~( GPIO_PIN_13 | GPIO_PIN_14) );
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HW_GpioInit+0xa0>)
 8002bd4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd6:	f002 f9e9 	bl	8004fac <HAL_GPIO_Init>
  
  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HW_GpioInit+0xa4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bdc:	a905      	add	r1, sp, #20
 8002bde:	4810      	ldr	r0, [pc, #64]	; (8002c20 <HW_GpioInit+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002be0:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be2:	f002 f9e3 	bl	8004fac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be6:	a905      	add	r1, sp, #20
 8002be8:	480e      	ldr	r0, [pc, #56]	; (8002c24 <HW_GpioInit+0xac>)
 8002bea:	f002 f9df 	bl	8004fac <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bee:	a905      	add	r1, sp, #20
 8002bf0:	480d      	ldr	r0, [pc, #52]	; (8002c28 <HW_GpioInit+0xb0>)
 8002bf2:	f002 f9db 	bl	8004fac <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
  __HAL_RCC_GPIOB_CLK_DISABLE();
  __HAL_RCC_GPIOC_CLK_DISABLE();
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002bf6:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002bf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bfa:	43bb      	bics	r3, r7
 8002bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8002bfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c00:	43b3      	bics	r3, r6
 8002c02:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002c04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c06:	43ab      	bics	r3, r5
 8002c08:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002c10:	b00b      	add	sp, #44	; 0x2c
 8002c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	00009fff 	.word	0x00009fff
 8002c1c:	0000ffff 	.word	0x0000ffff
 8002c20:	50000400 	.word	0x50000400
 8002c24:	50000800 	.word	0x50000800
 8002c28:	50001c00 	.word	0x50001c00

08002c2c <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config( void )
{
 8002c2c:	b500      	push	{lr}
 8002c2e:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c30:	2214      	movs	r2, #20
 8002c32:	2100      	movs	r1, #0
 8002c34:	a801      	add	r0, sp, #4
 8002c36:	f004 fd4c 	bl	80076d2 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c3a:	2238      	movs	r2, #56	; 0x38
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	a806      	add	r0, sp, #24
 8002c40:	f004 fd47 	bl	80076d2 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8002c44:	2302      	movs	r3, #2
 8002c46:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8002c48:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002c4e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8002c50:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002c52:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002c54:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002c56:	041b      	lsls	r3, r3, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c58:	320f      	adds	r2, #15

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c5a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c5c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002c5e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c60:	f002 fac8 	bl	80051f4 <HAL_RCC_OscConfig>
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d001      	beq.n	8002c6c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8002c68:	f7ff faf0 	bl	800224c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <SystemClock_Config+0x88>)
 8002c70:	055b      	lsls	r3, r3, #21
 8002c72:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <SystemClock_Config+0x8c>)
 8002c7a:	4910      	ldr	r1, [pc, #64]	; (8002cbc <SystemClock_Config+0x90>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4011      	ands	r1, r2
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
  
  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8002c88:	2110      	movs	r1, #16
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	6853      	ldr	r3, [r2, #4]
 8002c8e:	400b      	ands	r3, r1
 8002c90:	d1fc      	bne.n	8002c8c <SystemClock_Config+0x60>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002c92:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c94:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002c96:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c98:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c9a:	3a0c      	subs	r2, #12
 8002c9c:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c9e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ca0:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ca2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ca4:	f002 fd52 	bl	800574c <HAL_RCC_ClockConfig>
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	d001      	beq.n	8002cb0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002cac:	f7ff face 	bl	800224c <Error_Handler>
  }
}
 8002cb0:	b015      	add	sp, #84	; 0x54
 8002cb2:	bd00      	pop	{pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	ffffe7ff 	.word	0xffffe7ff

08002cc0 <HW_AdcInit>:
  * @param none
  * @retval none
  */
void HW_AdcInit( void )
{
  if( AdcInitialized == false )
 8002cc0:	4912      	ldr	r1, [pc, #72]	; (8002d0c <HW_AdcInit+0x4c>)
{
 8002cc2:	b510      	push	{r4, lr}
  if( AdcInitialized == false )
 8002cc4:	780b      	ldrb	r3, [r1, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11e      	bne.n	8002d08 <HW_AdcInit+0x48>
  {
    AdcInitialized = true;
 8002cca:	2201      	movs	r2, #1

    
    hadc.Instance  = ADC1;
 8002ccc:	4810      	ldr	r0, [pc, #64]	; (8002d10 <HW_AdcInit+0x50>)
    AdcInitialized = true;
 8002cce:	700a      	strb	r2, [r1, #0]
    hadc.Instance  = ADC1;
 8002cd0:	4910      	ldr	r1, [pc, #64]	; (8002d14 <HW_AdcInit+0x54>)
    
    hadc.Init.OversamplingMode      = DISABLE;
 8002cd2:	6403      	str	r3, [r0, #64]	; 0x40
    hadc.Instance  = ADC1;
 8002cd4:	6001      	str	r1, [r0, #0]
  
    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	0609      	lsls	r1, r1, #24
 8002cda:	6041      	str	r1, [r0, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
    hadc.Init.LowPowerFrequencyMode = ENABLE;
    hadc.Init.LowPowerAutoWait      = DISABLE;
    
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002cdc:	2107      	movs	r1, #7
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8002cde:	61c3      	str	r3, [r0, #28]
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8002ce0:	6183      	str	r3, [r0, #24]
    hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 8002ce2:	6083      	str	r3, [r0, #8]
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8002ce4:	60c3      	str	r3, [r0, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 8002ce6:	6203      	str	r3, [r0, #32]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8002ce8:	6243      	str	r3, [r0, #36]	; 0x24
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cea:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
    hadc.Init.DMAContinuousRequests = DISABLE;
 8002cec:	6303      	str	r3, [r0, #48]	; 0x30

    ADCCLK_ENABLE();
 8002cee:	2380      	movs	r3, #128	; 0x80
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002cf0:	6382      	str	r2, [r0, #56]	; 0x38
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8002cf2:	6102      	str	r2, [r0, #16]
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8002cf4:	3203      	adds	r2, #3
 8002cf6:	6142      	str	r2, [r0, #20]
    ADCCLK_ENABLE();
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HW_AdcInit+0x58>)
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8002cfa:	63c1      	str	r1, [r0, #60]	; 0x3c
    ADCCLK_ENABLE();
 8002cfc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6353      	str	r3, [r2, #52]	; 0x34
    

    HAL_ADC_Init( &hadc );
 8002d04:	f001 fe6a 	bl	80049dc <HAL_ADC_Init>

  }
}
 8002d08:	bd10      	pop	{r4, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	200001f9 	.word	0x200001f9
 8002d10:	200001fc 	.word	0x200001fc
 8002d14:	40012400 	.word	0x40012400
 8002d18:	40021000 	.word	0x40021000

08002d1c <HW_Init>:
{
 8002d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if( McuInitialized == false )
 8002d1e:	4c10      	ldr	r4, [pc, #64]	; (8002d60 <HW_Init+0x44>)
 8002d20:	7825      	ldrb	r5, [r4, #0]
 8002d22:	2d00      	cmp	r5, #0
 8002d24:	d11b      	bne.n	8002d5e <HW_Init+0x42>
    HW_AdcInit( );
 8002d26:	f7ff ffcb 	bl	8002cc0 <HW_AdcInit>
    Radio.IoInit( );
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HW_Init+0x48>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	4798      	blx	r3
    HW_SPI_Init( );
 8002d32:	f7ff fd1b 	bl	800276c <HW_SPI_Init>
    HW_RTC_Init( );
 8002d36:	f7ff fca3 	bl	8002680 <HW_RTC_Init>
    TraceInit( );
 8002d3a:	f004 fc09 	bl	8007550 <TraceInit>
    BSP_sensor_Init( );
 8002d3e:	f7ff fa51 	bl	80021e4 <BSP_sensor_Init>
    BSP_LED_Init( LED1 );
 8002d42:	0028      	movs	r0, r5
 8002d44:	f000 f94e 	bl	8002fe4 <BSP_LED_Init>
    BSP_LED_Init( LED2 );
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f000 f94b 	bl	8002fe4 <BSP_LED_Init>
    BSP_LED_Init( LED3 );
 8002d4e:	2002      	movs	r0, #2
 8002d50:	f000 f948 	bl	8002fe4 <BSP_LED_Init>
    BSP_LED_Init( LED4 );
 8002d54:	2003      	movs	r0, #3
 8002d56:	f000 f945 	bl	8002fe4 <BSP_LED_Init>
    McuInitialized = true;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	7023      	strb	r3, [r4, #0]
}
 8002d5e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8002d60:	200001fa 	.word	0x200001fa
 8002d64:	08008418 	.word	0x08008418

08002d68 <NMI_Handler>:
 8002d68:	4770      	bx	lr

08002d6a <HardFault_Handler>:
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	e7fd      	b.n	8002d6a <HardFault_Handler>

08002d6e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002d6e:	b510      	push	{r4, lr}
  HAL_IncTick();
 8002d70:	f001 fe0c 	bl	800498c <HAL_IncTick>
}
 8002d74:	bd10      	pop	{r4, pc}

08002d76 <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler( void )
{
 8002d76:	b510      	push	{r4, lr}
  vcom_IRQHandler();
 8002d78:	f000 f8ae 	bl	8002ed8 <vcom_IRQHandler>
}
 8002d7c:	bd10      	pop	{r4, pc}

08002d7e <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler( void )
{
 8002d7e:	b510      	push	{r4, lr}
  vcom_DMA_TX_IRQHandler();
 8002d80:	f000 f8a2 	bl	8002ec8 <vcom_DMA_TX_IRQHandler>
}
 8002d84:	bd10      	pop	{r4, pc}

08002d86 <RTC_IRQHandler>:

void RTC_IRQHandler( void )
{
 8002d86:	b510      	push	{r4, lr}
  HW_RTC_IrqHandler ( );
 8002d88:	f7ff fc3a 	bl	8002600 <HW_RTC_IrqHandler>
}
 8002d8c:	bd10      	pop	{r4, pc}

08002d8e <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler( void )
{
 8002d8e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8002d90:	2001      	movs	r0, #1
 8002d92:	f002 f9cd 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8002d96:	2002      	movs	r0, #2
 8002d98:	f002 f9ca 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>
}
 8002d9c:	bd10      	pop	{r4, pc}

08002d9e <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler( void )
{
 8002d9e:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8002da0:	2004      	movs	r0, #4
 8002da2:	f002 f9c5 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8002da6:	2008      	movs	r0, #8
 8002da8:	f002 f9c2 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>
}
 8002dac:	bd10      	pop	{r4, pc}

08002dae <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler( void )
{
 8002dae:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8002db0:	2010      	movs	r0, #16
 8002db2:	f002 f9bd 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8002db6:	2020      	movs	r0, #32
 8002db8:	f002 f9ba 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8002dbc:	2040      	movs	r0, #64	; 0x40
 8002dbe:	f002 f9b7 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8002dc2:	2080      	movs	r0, #128	; 0x80
 8002dc4:	f002 f9b4 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8002dc8:	2080      	movs	r0, #128	; 0x80
 8002dca:	0040      	lsls	r0, r0, #1
 8002dcc:	f002 f9b0 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8002dd0:	2080      	movs	r0, #128	; 0x80
 8002dd2:	0080      	lsls	r0, r0, #2
 8002dd4:	f002 f9ac 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8002dd8:	2080      	movs	r0, #128	; 0x80
 8002dda:	00c0      	lsls	r0, r0, #3
 8002ddc:	f002 f9a8 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>
  
  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8002de0:	2080      	movs	r0, #128	; 0x80
 8002de2:	0100      	lsls	r0, r0, #4
 8002de4:	f002 f9a4 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 8002de8:	2080      	movs	r0, #128	; 0x80
 8002dea:	0140      	lsls	r0, r0, #5
 8002dec:	f002 f9a0 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 8002df0:	2080      	movs	r0, #128	; 0x80
 8002df2:	0180      	lsls	r0, r0, #6
 8002df4:	f002 f99c 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 8002df8:	2080      	movs	r0, #128	; 0x80
 8002dfa:	01c0      	lsls	r0, r0, #7
 8002dfc:	f002 f998 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 8002e00:	2080      	movs	r0, #128	; 0x80
 8002e02:	0200      	lsls	r0, r0, #8
 8002e04:	f002 f994 	bl	8005130 <HAL_GPIO_EXTI_IRQHandler>
}
 8002e08:	bd10      	pop	{r4, pc}
	...

08002e0c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <SystemInit+0x44>)
 8002e10:	0052      	lsls	r2, r2, #1
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	490e      	ldr	r1, [pc, #56]	; (8002e54 <SystemInit+0x48>)
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	490d      	ldr	r1, [pc, #52]	; (8002e58 <SystemInit+0x4c>)
 8002e24:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002e26:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002e28:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	490a      	ldr	r1, [pc, #40]	; (8002e5c <SystemInit+0x50>)
 8002e34:	400a      	ands	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	4909      	ldr	r1, [pc, #36]	; (8002e60 <SystemInit+0x54>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e44:	2280      	movs	r2, #128	; 0x80
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <SystemInit+0x58>)
 8002e48:	0512      	lsls	r2, r2, #20
 8002e4a:	609a      	str	r2, [r3, #8]
#endif
}
 8002e4c:	4770      	bx	lr
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	40021000 	.word	0x40021000
 8002e54:	88ff400c 	.word	0x88ff400c
 8002e58:	fef6fff6 	.word	0xfef6fff6
 8002e5c:	fffbffff 	.word	0xfffbffff
 8002e60:	ff02ffff 	.word	0xff02ffff
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <vcom_Init>:
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(  void (*TxCb)(void) )
{

  /*Record Tx complete for DMA*/
  TxCpltCallback=TxCb;
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <vcom_Init+0x30>)
{
 8002e6a:	b510      	push	{r4, lr}
  TxCpltCallback=TxCb;
 8002e6c:	6018      	str	r0, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8002e6e:	480b      	ldr	r0, [pc, #44]	; (8002e9c <vcom_Init+0x34>)
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <vcom_Init+0x38>)
 8002e72:	6003      	str	r3, [r0, #0]
  
  UartHandle.Init.BaudRate   = 115200;
 8002e74:	23e1      	movs	r3, #225	; 0xe1
 8002e76:	025b      	lsls	r3, r3, #9
 8002e78:	6043      	str	r3, [r0, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6083      	str	r3, [r0, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002e7e:	60c3      	str	r3, [r0, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8002e80:	6103      	str	r3, [r0, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002e82:	6183      	str	r3, [r0, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8002e84:	3308      	adds	r3, #8
 8002e86:	6143      	str	r3, [r0, #20]
  
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8002e88:	f003 ffd2 	bl	8006e30 <HAL_UART_Init>
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	d001      	beq.n	8002e94 <vcom_Init+0x2c>
  {
    /* Initialization Error */
    Error_Handler(); 
 8002e90:	f7ff f9dc 	bl	800224c <Error_Handler>
  }
}
 8002e94:	bd10      	pop	{r4, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	2000025c 	.word	0x2000025c
 8002e9c:	20000260 	.word	0x20000260
 8002ea0:	40004400 	.word	0x40004400

08002ea4 <vcom_Trace>:

void vcom_Trace(  uint8_t *p_data, uint16_t size )
{
 8002ea4:	b510      	push	{r4, lr}
 8002ea6:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&UartHandle,p_data, size);
 8002ea8:	0001      	movs	r1, r0
 8002eaa:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <vcom_Trace+0x10>)
 8002eac:	f003 fc1a 	bl	80066e4 <HAL_UART_Transmit_DMA>
}
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	20000260 	.word	0x20000260

08002eb8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8002eb8:	b510      	push	{r4, lr}
  /* buffer transmission complete*/
   TxCpltCallback(); 
 8002eba:	4b02      	ldr	r3, [pc, #8]	; (8002ec4 <HAL_UART_TxCpltCallback+0xc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4798      	blx	r3
}
 8002ec0:	bd10      	pop	{r4, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	2000025c 	.word	0x2000025c

08002ec8 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 8002ec8:	b510      	push	{r4, lr}
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8002eca:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <vcom_DMA_TX_IRQHandler+0xc>)
 8002ecc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8002ece:	f001 ffa5 	bl	8004e1c <HAL_DMA_IRQHandler>
}
 8002ed2:	bd10      	pop	{r4, pc}
 8002ed4:	20000260 	.word	0x20000260

08002ed8 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 8002ed8:	b510      	push	{r4, lr}
  HAL_UART_IRQHandler(&UartHandle);
 8002eda:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <vcom_IRQHandler+0xc>)
 8002edc:	f003 fcd4 	bl	8006888 <HAL_UART_IRQHandler>
}
 8002ee0:	bd10      	pop	{r4, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	20000260 	.word	0x20000260

08002ee8 <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 8002ee8:	b530      	push	{r4, r5, lr}
 8002eea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct={0};
 8002eec:	2214      	movs	r2, #20
 8002eee:	2100      	movs	r1, #0
 8002ef0:	a803      	add	r0, sp, #12
 8002ef2:	f004 fbee 	bl	80076d2 <memset>
    /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <vcom_IoInit+0x5c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002efa:	25a0      	movs	r5, #160	; 0xa0
  USARTx_TX_GPIO_CLK_ENABLE();
 8002efc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002efe:	2404      	movs	r4, #4
  USARTx_TX_GPIO_CLK_ENABLE();
 8002f00:	4311      	orrs	r1, r2
 8002f02:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002f06:	05ed      	lsls	r5, r5, #23
  USARTx_TX_GPIO_CLK_ENABLE();
 8002f08:	4011      	ands	r1, r2
 8002f0a:	9101      	str	r1, [sp, #4]
 8002f0c:	9901      	ldr	r1, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002f10:	0028      	movs	r0, r5
  USARTx_RX_GPIO_CLK_ENABLE();
 8002f12:	4311      	orrs	r1, r2
 8002f14:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002f18:	a903      	add	r1, sp, #12
  USARTx_RX_GPIO_CLK_ENABLE();
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	9202      	str	r2, [sp, #8]
 8002f1e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8002f24:	3301      	adds	r3, #1
 8002f26:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002f28:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002f2a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002f2c:	f002 f83e 	bl	8004fac <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002f30:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002f32:	a903      	add	r1, sp, #12
 8002f34:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002f36:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002f38:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002f3a:	f002 f837 	bl	8004fac <HAL_GPIO_Init>
}
 8002f3e:	b009      	add	sp, #36	; 0x24
 8002f40:	bd30      	pop	{r4, r5, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_UART_MspInit>:
{
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
  USARTx_TX_GPIO_CLK_ENABLE();
 8002f4a:	2501      	movs	r5, #1
 8002f4c:	4b22      	ldr	r3, [pc, #136]	; (8002fd8 <HAL_UART_MspInit+0x90>)
{
 8002f4e:	b085      	sub	sp, #20
  USARTx_TX_GPIO_CLK_ENABLE();
 8002f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
{
 8002f52:	0006      	movs	r6, r0
  USARTx_TX_GPIO_CLK_ENABLE();
 8002f54:	432a      	orrs	r2, r5
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002f5a:	2700      	movs	r7, #0
  USARTx_TX_GPIO_CLK_ENABLE();
 8002f5c:	402a      	ands	r2, r5
 8002f5e:	9201      	str	r2, [sp, #4]
 8002f60:	9a01      	ldr	r2, [sp, #4]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f64:	432a      	orrs	r2, r5
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	402a      	ands	r2, r5
 8002f6c:	9202      	str	r2, [sp, #8]
 8002f6e:	9a02      	ldr	r2, [sp, #8]
  USARTx_CLK_ENABLE();
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f74:	0292      	lsls	r2, r2, #10
 8002f76:	430a      	orrs	r2, r1
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
  DMAx_CLK_ENABLE();
 8002f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7c:	432a      	orrs	r2, r5
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	402b      	ands	r3, r5
 8002f84:	9303      	str	r3, [sp, #12]
 8002f86:	9b03      	ldr	r3, [sp, #12]
  vcom_IoInit();
 8002f88:	f7ff ffae 	bl	8002ee8 <vcom_IoInit>
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002f8c:	4c13      	ldr	r4, [pc, #76]	; (8002fdc <HAL_UART_MspInit+0x94>)
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <HAL_UART_MspInit+0x98>)
  HAL_DMA_Init(&hdma_tx);
 8002f90:	0020      	movs	r0, r4
  hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002f92:	6023      	str	r3, [r4, #0]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002f94:	2310      	movs	r3, #16
 8002f96:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002f98:	3370      	adds	r3, #112	; 0x70
 8002f9a:	6123      	str	r3, [r4, #16]
  hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8002f9c:	3b7c      	subs	r3, #124	; 0x7c
 8002f9e:	6063      	str	r3, [r4, #4]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002fa0:	60e7      	str	r7, [r4, #12]
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa2:	6167      	str	r7, [r4, #20]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002fa4:	61a7      	str	r7, [r4, #24]
  hdma_tx.Init.Mode                = DMA_NORMAL;
 8002fa6:	61e7      	str	r7, [r4, #28]
  hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8002fa8:	6227      	str	r7, [r4, #32]
  HAL_DMA_Init(&hdma_tx);
 8002faa:	f001 fe25 	bl	8004bf8 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002fae:	002a      	movs	r2, r5
 8002fb0:	0039      	movs	r1, r7
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8002fb2:	6634      	str	r4, [r6, #96]	; 0x60
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002fb4:	200b      	movs	r0, #11
  __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8002fb6:	62a6      	str	r6, [r4, #40]	; 0x28
  HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002fb8:	f001 fde4 	bl	8004b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8002fbc:	200b      	movs	r0, #11
 8002fbe:	f001 fe11 	bl	8004be4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8002fc2:	002a      	movs	r2, r5
 8002fc4:	0039      	movs	r1, r7
 8002fc6:	201c      	movs	r0, #28
 8002fc8:	f001 fddc 	bl	8004b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8002fcc:	201c      	movs	r0, #28
 8002fce:	f001 fe09 	bl	8004be4 <HAL_NVIC_EnableIRQ>
}
 8002fd2:	b005      	add	sp, #20
 8002fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	200002d0 	.word	0x200002d0
 8002fe0:	40020080 	.word	0x40020080

08002fe4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002fe4:	b500      	push	{lr}
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 8002fea:	2803      	cmp	r0, #3
 8002fec:	d80c      	bhi.n	8003008 <BSP_LED_Init+0x24>
 8002fee:	4b1b      	ldr	r3, [pc, #108]	; (800305c <BSP_LED_Init+0x78>)
 8002ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ff2:	f7fd f889 	bl	8000108 <__gnu_thumb1_case_uqi>
 8002ff6:	1b02      	.short	0x1b02
 8002ff8:	2b23      	.short	0x2b23
 8002ffa:	2002      	movs	r0, #2
 8002ffc:	4301      	orrs	r1, r0
 8002ffe:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	4003      	ands	r3, r0
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <BSP_LED_Init+0x7c>)
 800300a:	0051      	lsls	r1, r2, #1
 800300c:	5acb      	ldrh	r3, [r1, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800300e:	0092      	lsls	r2, r2, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003010:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003012:	2301      	movs	r3, #1
 8003014:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301a:	3303      	adds	r3, #3
 800301c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800301e:	4b11      	ldr	r3, [pc, #68]	; (8003064 <BSP_LED_Init+0x80>)
 8003020:	a905      	add	r1, sp, #20
 8003022:	58d0      	ldr	r0, [r2, r3]
 8003024:	f001 ffc2 	bl	8004fac <HAL_GPIO_Init>
}
 8003028:	b00b      	add	sp, #44	; 0x2c
 800302a:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE( Led );
 800302c:	2001      	movs	r0, #1
 800302e:	4301      	orrs	r1, r0
 8003030:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	4003      	ands	r3, r0
 8003036:	9302      	str	r3, [sp, #8]
 8003038:	9b02      	ldr	r3, [sp, #8]
 800303a:	e7e5      	b.n	8003008 <BSP_LED_Init+0x24>
 800303c:	2002      	movs	r0, #2
 800303e:	4301      	orrs	r1, r0
 8003040:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	4003      	ands	r3, r0
 8003046:	9303      	str	r3, [sp, #12]
 8003048:	9b03      	ldr	r3, [sp, #12]
 800304a:	e7dd      	b.n	8003008 <BSP_LED_Init+0x24>
 800304c:	2002      	movs	r0, #2
 800304e:	4301      	orrs	r1, r0
 8003050:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	4003      	ands	r3, r0
 8003056:	9304      	str	r3, [sp, #16]
 8003058:	9b04      	ldr	r3, [sp, #16]
 800305a:	e7d5      	b.n	8003008 <BSP_LED_Init+0x24>
 800305c:	40021000 	.word	0x40021000
 8003060:	0800840e 	.word	0x0800840e
 8003064:	20000008 	.word	0x20000008

08003068 <SX1276GetWakeTime>:
};

uint32_t SX1276GetWakeTime( void )
{
  return  BOARD_WAKEUP_TIME;
}
 8003068:	2005      	movs	r0, #5
 800306a:	4770      	bx	lr

0800306c <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
    // Implement check. Currently all frequencies are supported
    return true;
}
 800306c:	2001      	movs	r0, #1
 800306e:	4770      	bx	lr

08003070 <SX1276SetRfTxPower>:
{
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	0005      	movs	r5, r0
    paConfig = SX1276Read( REG_PACONFIG );
 8003074:	2009      	movs	r0, #9
 8003076:	f000 fa09 	bl	800348c <SX1276Read>
 800307a:	0006      	movs	r6, r0
    paDac = SX1276Read( REG_PADAC );
 800307c:	204d      	movs	r0, #77	; 0x4d
 800307e:	f000 fa05 	bl	800348c <SX1276Read>
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8003082:	227f      	movs	r2, #127	; 0x7f
    paDac = SX1276Read( REG_PADAC );
 8003084:	0004      	movs	r4, r0
        return RF_PACONFIG_PASELECT_RFO;
 8003086:	200e      	movs	r0, #14
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8003088:	4032      	ands	r2, r6
    if (power >14)
 800308a:	b2ee      	uxtb	r6, r5
        return RF_PACONFIG_PASELECT_RFO;
 800308c:	42b0      	cmp	r0, r6
 800308e:	41b6      	sbcs	r6, r6
 8003090:	4271      	negs	r1, r6
 8003092:	01c9      	lsls	r1, r1, #7
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8003094:	4311      	orrs	r1, r2
    paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
 8003096:	2270      	movs	r2, #112	; 0x70
 8003098:	4311      	orrs	r1, r2
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800309a:	b249      	sxtb	r1, r1
 800309c:	2900      	cmp	r1, #0
 800309e:	da2d      	bge.n	80030fc <SX1276SetRfTxPower+0x8c>
 80030a0:	2307      	movs	r3, #7
        if( power > 17 )
 80030a2:	2d11      	cmp	r5, #17
 80030a4:	dd19      	ble.n	80030da <SX1276SetRfTxPower+0x6a>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80030a6:	431c      	orrs	r4, r3
 80030a8:	b2e4      	uxtb	r4, r4
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80030aa:	43e3      	mvns	r3, r4
 80030ac:	075b      	lsls	r3, r3, #29
 80030ae:	d118      	bne.n	80030e2 <SX1276SetRfTxPower+0x72>
 80030b0:	1c2a      	adds	r2, r5, #0
 80030b2:	2d14      	cmp	r5, #20
 80030b4:	dd00      	ble.n	80030b8 <SX1276SetRfTxPower+0x48>
 80030b6:	2214      	movs	r2, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80030b8:	b253      	sxtb	r3, r2
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	da00      	bge.n	80030c0 <SX1276SetRfTxPower+0x50>
 80030be:	2205      	movs	r2, #5
 80030c0:	230f      	movs	r3, #15
 80030c2:	3a05      	subs	r2, #5
 80030c4:	4399      	bics	r1, r3
 80030c6:	4311      	orrs	r1, r2
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 80030c8:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 80030ca:	2009      	movs	r0, #9
 80030cc:	f000 f98b 	bl	80033e6 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 80030d0:	0021      	movs	r1, r4
 80030d2:	204d      	movs	r0, #77	; 0x4d
 80030d4:	f000 f987 	bl	80033e6 <SX1276Write>
}
 80030d8:	bd70      	pop	{r4, r5, r6, pc}
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80030da:	439c      	bics	r4, r3
 80030dc:	0023      	movs	r3, r4
 80030de:	2404      	movs	r4, #4
 80030e0:	e7e1      	b.n	80030a6 <SX1276SetRfTxPower+0x36>
 80030e2:	1c2b      	adds	r3, r5, #0
 80030e4:	2d11      	cmp	r5, #17
 80030e6:	dd00      	ble.n	80030ea <SX1276SetRfTxPower+0x7a>
 80030e8:	2311      	movs	r3, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80030ea:	b25a      	sxtb	r2, r3
 80030ec:	2a02      	cmp	r2, #2
 80030ee:	da00      	bge.n	80030f2 <SX1276SetRfTxPower+0x82>
 80030f0:	2302      	movs	r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	3b02      	subs	r3, #2
 80030f6:	4391      	bics	r1, r2
        paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 80030f8:	4319      	orrs	r1, r3
 80030fa:	e7e5      	b.n	80030c8 <SX1276SetRfTxPower+0x58>
 80030fc:	1c29      	adds	r1, r5, #0
 80030fe:	2d0e      	cmp	r5, #14
 8003100:	dd00      	ble.n	8003104 <SX1276SetRfTxPower+0x94>
 8003102:	1c01      	adds	r1, r0, #0
 8003104:	060b      	lsls	r3, r1, #24
 8003106:	d501      	bpl.n	800310c <SX1276SetRfTxPower+0x9c>
 8003108:	4b02      	ldr	r3, [pc, #8]	; (8003114 <SX1276SetRfTxPower+0xa4>)
 800310a:	7819      	ldrb	r1, [r3, #0]
 800310c:	1c4b      	adds	r3, r1, #1
 800310e:	2170      	movs	r1, #112	; 0x70
 8003110:	e7f2      	b.n	80030f8 <SX1276SetRfTxPower+0x88>
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	08008416 	.word	0x08008416

08003118 <SX1276IoInit>:
{
 8003118:	b530      	push	{r4, r5, lr}
 800311a:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct={0};
 800311c:	2214      	movs	r2, #20
 800311e:	2100      	movs	r1, #0
 8003120:	a801      	add	r0, sp, #4
 8003122:	f004 fad6 	bl	80076d2 <memset>
  SX1276BoardInit( &BoardCallbacks );
 8003126:	4815      	ldr	r0, [pc, #84]	; (800317c <SX1276IoInit+0x64>)
 8003128:	f000 f90a 	bl	8003340 <SX1276BoardInit>
  initStruct.Mode =GPIO_MODE_IT_RISING;
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <SX1276IoInit+0x68>)
  initStruct.Pull = GPIO_PULLUP;
 800312e:	2401      	movs	r4, #1
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8003130:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003132:	2303      	movs	r3, #3
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003134:	4d13      	ldr	r5, [pc, #76]	; (8003184 <SX1276IoInit+0x6c>)
 8003136:	aa01      	add	r2, sp, #4
 8003138:	0028      	movs	r0, r5
 800313a:	2110      	movs	r1, #16
  initStruct.Speed = GPIO_SPEED_HIGH;
 800313c:	9304      	str	r3, [sp, #16]
  initStruct.Pull = GPIO_PULLUP;
 800313e:	9403      	str	r4, [sp, #12]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003140:	f7ff f8aa 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8003144:	aa01      	add	r2, sp, #4
 8003146:	0028      	movs	r0, r5
 8003148:	2102      	movs	r1, #2
 800314a:	f7ff f8a5 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800314e:	aa01      	add	r2, sp, #4
 8003150:	0021      	movs	r1, r4
 8003152:	0028      	movs	r0, r5
 8003154:	f7ff f8a0 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	aa01      	add	r2, sp, #4
 800315c:	0189      	lsls	r1, r1, #6
 800315e:	480a      	ldr	r0, [pc, #40]	; (8003188 <SX1276IoInit+0x70>)
 8003160:	f7ff f89a 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	20a0      	movs	r0, #160	; 0xa0
  initStruct.Pull = GPIO_NOPULL;  
 8003168:	2300      	movs	r3, #0
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 800316a:	aa01      	add	r2, sp, #4
 800316c:	0149      	lsls	r1, r1, #5
 800316e:	05c0      	lsls	r0, r0, #23
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003170:	9402      	str	r4, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;  
 8003172:	9303      	str	r3, [sp, #12]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 8003174:	f7ff f890 	bl	8002298 <HW_GPIO_Init>
}
 8003178:	b007      	add	sp, #28
 800317a:	bd30      	pop	{r4, r5, pc}
 800317c:	20000018 	.word	0x20000018
 8003180:	10110000 	.word	0x10110000
 8003184:	50000400 	.word	0x50000400
 8003188:	50000800 	.word	0x50000800

0800318c <SX1276IoDeInit>:
{
 800318c:	b510      	push	{r4, lr}
 800318e:	b086      	sub	sp, #24
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8003190:	4c0f      	ldr	r4, [pc, #60]	; (80031d0 <SX1276IoDeInit+0x44>)
  GPIO_InitTypeDef initStruct={0};
 8003192:	2214      	movs	r2, #20
 8003194:	2100      	movs	r1, #0
 8003196:	a801      	add	r0, sp, #4
 8003198:	f004 fa9b 	bl	80076d2 <memset>
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <SX1276IoDeInit+0x48>)
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800319e:	aa01      	add	r2, sp, #4
 80031a0:	0020      	movs	r0, r4
 80031a2:	2110      	movs	r1, #16
  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 80031a4:	9302      	str	r3, [sp, #8]
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80031a6:	f7ff f877 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80031aa:	aa01      	add	r2, sp, #4
 80031ac:	0020      	movs	r0, r4
 80031ae:	2102      	movs	r1, #2
 80031b0:	f7ff f872 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80031b4:	aa01      	add	r2, sp, #4
 80031b6:	0020      	movs	r0, r4
 80031b8:	2101      	movs	r1, #1
 80031ba:	f7ff f86d 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	aa01      	add	r2, sp, #4
 80031c2:	0189      	lsls	r1, r1, #6
 80031c4:	4804      	ldr	r0, [pc, #16]	; (80031d8 <SX1276IoDeInit+0x4c>)
 80031c6:	f7ff f867 	bl	8002298 <HW_GPIO_Init>
}
 80031ca:	b006      	add	sp, #24
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	50000400 	.word	0x50000400
 80031d4:	10110000 	.word	0x10110000
 80031d8:	50000800 	.word	0x50000800

080031dc <SX1276SetAntSwLowPower>:
{
 80031dc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef initStruct={0};
 80031de:	2214      	movs	r2, #20
{
 80031e0:	b086      	sub	sp, #24
    if( status == false )
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d129      	bne.n	800323a <SX1276SetAntSwLowPower+0x5e>
  GPIO_InitTypeDef initStruct={0};
 80031e6:	0001      	movs	r1, r0
 80031e8:	a801      	add	r0, sp, #4
 80031ea:	f004 fa72 	bl	80076d2 <memset>
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80031ee:	2301      	movs	r3, #1
 80031f0:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80031f2:	3302      	adds	r3, #2
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 80031f4:	20a0      	movs	r0, #160	; 0xa0
 80031f6:	aa01      	add	r2, sp, #4
 80031f8:	2102      	movs	r1, #2
 80031fa:	05c0      	lsls	r0, r0, #23
  initStruct.Speed = GPIO_SPEED_HIGH;
 80031fc:	9304      	str	r3, [sp, #16]
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 80031fe:	f7ff f84b 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8003202:	20a0      	movs	r0, #160	; 0xa0
 8003204:	2200      	movs	r2, #0
 8003206:	2102      	movs	r1, #2
 8003208:	05c0      	lsls	r0, r0, #23
 800320a:	f7ff f8b7 	bl	800237c <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 800320e:	aa01      	add	r2, sp, #4
 8003210:	2102      	movs	r1, #2
 8003212:	480d      	ldr	r0, [pc, #52]	; (8003248 <SX1276SetAntSwLowPower+0x6c>)
 8003214:	f7ff f840 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2102      	movs	r1, #2
 800321c:	480a      	ldr	r0, [pc, #40]	; (8003248 <SX1276SetAntSwLowPower+0x6c>)
 800321e:	f7ff f8ad 	bl	800237c <HW_GPIO_Write>
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8003222:	aa01      	add	r2, sp, #4
 8003224:	2104      	movs	r1, #4
 8003226:	4808      	ldr	r0, [pc, #32]	; (8003248 <SX1276SetAntSwLowPower+0x6c>)
 8003228:	f7ff f836 	bl	8002298 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800322c:	2200      	movs	r2, #0
 800322e:	2104      	movs	r1, #4
 8003230:	4805      	ldr	r0, [pc, #20]	; (8003248 <SX1276SetAntSwLowPower+0x6c>)
 8003232:	f7ff f8a3 	bl	800237c <HW_GPIO_Write>
}
 8003236:	b006      	add	sp, #24
 8003238:	bd10      	pop	{r4, pc}
  GPIO_InitTypeDef initStruct={0};
 800323a:	2100      	movs	r1, #0
 800323c:	a801      	add	r0, sp, #4
 800323e:	f004 fa48 	bl	80076d2 <memset>
  initStruct.Mode = GPIO_MODE_ANALOG ;
 8003242:	2303      	movs	r3, #3
 8003244:	9302      	str	r3, [sp, #8]
 8003246:	e7d5      	b.n	80031f4 <SX1276SetAntSwLowPower+0x18>
 8003248:	50000800 	.word	0x50000800

0800324c <SX1276IoIrqInit>:
{
 800324c:	b570      	push	{r4, r5, r6, lr}
 800324e:	0004      	movs	r4, r0
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8003250:	4d0d      	ldr	r5, [pc, #52]	; (8003288 <SX1276IoIrqInit+0x3c>)
 8003252:	6803      	ldr	r3, [r0, #0]
 8003254:	2200      	movs	r2, #0
 8003256:	0028      	movs	r0, r5
 8003258:	2110      	movs	r1, #16
 800325a:	f7ff f869 	bl	8002330 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 800325e:	0028      	movs	r0, r5
 8003260:	6863      	ldr	r3, [r4, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	2102      	movs	r1, #2
 8003266:	f7ff f863 	bl	8002330 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800326a:	0028      	movs	r0, r5
 800326c:	68a3      	ldr	r3, [r4, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	2101      	movs	r1, #1
 8003272:	f7ff f85d 	bl	8002330 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	68e3      	ldr	r3, [r4, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	0189      	lsls	r1, r1, #6
 800327e:	4803      	ldr	r0, [pc, #12]	; (800328c <SX1276IoIrqInit+0x40>)
 8003280:	f7ff f856 	bl	8002330 <HW_GPIO_SetIrq>
}
 8003284:	bd70      	pop	{r4, r5, r6, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	50000400 	.word	0x50000400
 800328c:	50000800 	.word	0x50000800

08003290 <SX1276SetAntSw>:
{
 8003290:	b570      	push	{r4, r5, r6, lr}
 8003292:	0005      	movs	r5, r0
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 8003294:	2009      	movs	r0, #9
 8003296:	f000 f8f9 	bl	800348c <SX1276Read>
 800329a:	4c0b      	ldr	r4, [pc, #44]	; (80032c8 <SX1276SetAntSw+0x38>)
    switch( opMode )
 800329c:	2d03      	cmp	r5, #3
 800329e:	d10a      	bne.n	80032b6 <SX1276SetAntSw+0x26>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 80032a0:	2201      	movs	r2, #1
 80032a2:	2102      	movs	r1, #2
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80032a4:	0603      	lsls	r3, r0, #24
 80032a6:	d400      	bmi.n	80032aa <SX1276SetAntSw+0x1a>
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 80032a8:	2104      	movs	r1, #4
 80032aa:	4808      	ldr	r0, [pc, #32]	; (80032cc <SX1276SetAntSw+0x3c>)
 80032ac:	f7ff f866 	bl	800237c <HW_GPIO_Write>
      SX1276.RxTx = 1;
 80032b0:	2301      	movs	r3, #1
 80032b2:	7023      	strb	r3, [r4, #0]
}
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 80032b6:	20a0      	movs	r0, #160	; 0xa0
     SX1276.RxTx = 0;
 80032b8:	2300      	movs	r3, #0
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 80032ba:	2201      	movs	r2, #1
 80032bc:	2102      	movs	r1, #2
 80032be:	05c0      	lsls	r0, r0, #23
     SX1276.RxTx = 0;
 80032c0:	7023      	strb	r3, [r4, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 80032c2:	f7ff f85b 	bl	800237c <HW_GPIO_Write>
}
 80032c6:	e7f5      	b.n	80032b4 <SX1276SetAntSw+0x24>
 80032c8:	2000061c 	.word	0x2000061c
 80032cc:	50000800 	.word	0x50000800

080032d0 <SX1276SetXO>:
{
 80032d0:	b510      	push	{r4, lr}
 80032d2:	0002      	movs	r2, r0
  if (state == SET )
 80032d4:	2801      	cmp	r0, #1
 80032d6:	d109      	bne.n	80032ec <SX1276SetXO+0x1c>
    TCXO_ON(); 
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	20a0      	movs	r0, #160	; 0xa0
 80032dc:	0149      	lsls	r1, r1, #5
 80032de:	05c0      	lsls	r0, r0, #23
 80032e0:	f7ff f84c 	bl	800237c <HW_GPIO_Write>
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 80032e4:	2005      	movs	r0, #5
 80032e6:	f7ff fbe1 	bl	8002aac <HAL_Delay>
}
 80032ea:	bd10      	pop	{r4, pc}
    TCXO_OFF(); 
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	20a0      	movs	r0, #160	; 0xa0
 80032f0:	2200      	movs	r2, #0
 80032f2:	0149      	lsls	r1, r1, #5
 80032f4:	05c0      	lsls	r0, r0, #23
 80032f6:	f7ff f841 	bl	800237c <HW_GPIO_Write>
}
 80032fa:	e7f6      	b.n	80032ea <SX1276SetXO+0x1a>

080032fc <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80032fc:	2200      	movs	r2, #0
 80032fe:	b510      	push	{r4, lr}
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8003300:	4907      	ldr	r1, [pc, #28]	; (8003320 <GetFskBandwidthRegValue+0x24>)
 8003302:	00d3      	lsls	r3, r2, #3
 8003304:	585c      	ldr	r4, [r3, r1]
 8003306:	4284      	cmp	r4, r0
 8003308:	d803      	bhi.n	8003312 <GetFskBandwidthRegValue+0x16>
 800330a:	18cb      	adds	r3, r1, r3
 800330c:	689c      	ldr	r4, [r3, #8]
 800330e:	42a0      	cmp	r0, r4
 8003310:	d303      	bcc.n	800331a <GetFskBandwidthRegValue+0x1e>
 8003312:	3201      	adds	r2, #1
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8003314:	2a15      	cmp	r2, #21
 8003316:	d1f4      	bne.n	8003302 <GetFskBandwidthRegValue+0x6>
 8003318:	e7fe      	b.n	8003318 <GetFskBandwidthRegValue+0x1c>
        {
            return FskBandwidths[i].RegValue;
 800331a:	7918      	ldrb	r0, [r3, #4]
        }
    }
    // ERROR: Value not found
    while( 1 );
}
 800331c:	bd10      	pop	{r4, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	080084a8 	.word	0x080084a8

08003324 <SX1276OnDio4Irq>:
    }
}

void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SX1276OnDio4Irq+0x18>)
 8003326:	795a      	ldrb	r2, [r3, #5]
 8003328:	2a00      	cmp	r2, #0
 800332a:	d105      	bne.n	8003338 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800332c:	3330      	adds	r3, #48	; 0x30
 800332e:	781a      	ldrb	r2, [r3, #0]
 8003330:	2a00      	cmp	r2, #0
 8003332:	d101      	bne.n	8003338 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8003334:	3201      	adds	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8003338:	4770      	bx	lr
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	2000061c 	.word	0x2000061c

08003340 <SX1276BoardInit>:
    LoRaBoardCallbacks =callbacks;
 8003340:	4b01      	ldr	r3, [pc, #4]	; (8003348 <SX1276BoardInit+0x8>)
 8003342:	6018      	str	r0, [r3, #0]
}
 8003344:	4770      	bx	lr
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	20000310 	.word	0x20000310

0800334c <SX1276GetStatus>:
    return SX1276.Settings.State;
 800334c:	4b01      	ldr	r3, [pc, #4]	; (8003354 <SX1276GetStatus+0x8>)
 800334e:	7918      	ldrb	r0, [r3, #4]
}
 8003350:	4770      	bx	lr
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	2000061c 	.word	0x2000061c

08003358 <SX1276Reset>:
{
 8003358:	b530      	push	{r4, r5, lr}
 800335a:	b087      	sub	sp, #28
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800335c:	2401      	movs	r4, #1
    GPIO_InitTypeDef initStruct = { 0 };
 800335e:	2214      	movs	r2, #20
 8003360:	2100      	movs	r1, #0
 8003362:	a801      	add	r0, sp, #4
 8003364:	f004 f9b5 	bl	80076d2 <memset>
    initStruct.Speed = GPIO_SPEED_HIGH;
 8003368:	2303      	movs	r3, #3
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800336a:	4d0e      	ldr	r5, [pc, #56]	; (80033a4 <SX1276Reset+0x4c>)
 800336c:	aa01      	add	r2, sp, #4
 800336e:	0021      	movs	r1, r4
 8003370:	0028      	movs	r0, r5
    initStruct.Speed = GPIO_SPEED_HIGH;
 8003372:	9304      	str	r3, [sp, #16]
    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8003374:	9402      	str	r4, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8003376:	f7fe ff8f 	bl	8002298 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 800337a:	0021      	movs	r1, r4
 800337c:	2200      	movs	r2, #0
 800337e:	0028      	movs	r0, r5
 8003380:	f7fe fffc 	bl	800237c <HW_GPIO_Write>
    DelayMs( 1 );
 8003384:	0020      	movs	r0, r4
 8003386:	f7ff fb91 	bl	8002aac <HAL_Delay>
    initStruct.Mode = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 800338c:	aa01      	add	r2, sp, #4
 800338e:	0021      	movs	r1, r4
 8003390:	0028      	movs	r0, r5
    initStruct.Mode = GPIO_NOPULL;
 8003392:	9302      	str	r3, [sp, #8]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8003394:	f7fe ff80 	bl	8002298 <HW_GPIO_Init>
    DelayMs( 6 );
 8003398:	2006      	movs	r0, #6
 800339a:	f7ff fb87 	bl	8002aac <HAL_Delay>
}
 800339e:	b007      	add	sp, #28
 80033a0:	bd30      	pop	{r4, r5, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	50000800 	.word	0x50000800

080033a8 <SX1276WriteBuffer>:
{
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	0006      	movs	r6, r0
 80033ac:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80033ae:	20a0      	movs	r0, #160	; 0xa0
 80033b0:	2180      	movs	r1, #128	; 0x80
{
 80033b2:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80033b4:	0209      	lsls	r1, r1, #8
 80033b6:	2200      	movs	r2, #0
 80033b8:	05c0      	lsls	r0, r0, #23
 80033ba:	f7fe ffdf 	bl	800237c <HW_GPIO_Write>
    HW_SPI_InOut( addr | 0x80 );
 80033be:	2080      	movs	r0, #128	; 0x80
 80033c0:	4330      	orrs	r0, r6
 80033c2:	f7ff fa13 	bl	80027ec <HW_SPI_InOut>
 80033c6:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 80033c8:	42ac      	cmp	r4, r5
 80033ca:	d107      	bne.n	80033dc <SX1276WriteBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	20a0      	movs	r0, #160	; 0xa0
 80033d0:	2201      	movs	r2, #1
 80033d2:	0209      	lsls	r1, r1, #8
 80033d4:	05c0      	lsls	r0, r0, #23
 80033d6:	f7fe ffd1 	bl	800237c <HW_GPIO_Write>
}
 80033da:	bd70      	pop	{r4, r5, r6, pc}
        HW_SPI_InOut( buffer[i] );
 80033dc:	7820      	ldrb	r0, [r4, #0]
 80033de:	f7ff fa05 	bl	80027ec <HW_SPI_InOut>
 80033e2:	3401      	adds	r4, #1
 80033e4:	e7f0      	b.n	80033c8 <SX1276WriteBuffer+0x20>

080033e6 <SX1276Write>:
{
 80033e6:	b507      	push	{r0, r1, r2, lr}
 80033e8:	466b      	mov	r3, sp
 80033ea:	71d9      	strb	r1, [r3, #7]
 80033ec:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80033ee:	2201      	movs	r2, #1
 80033f0:	0019      	movs	r1, r3
 80033f2:	f7ff ffd9 	bl	80033a8 <SX1276WriteBuffer>
}
 80033f6:	bd07      	pop	{r0, r1, r2, pc}

080033f8 <SX1276SetChannel>:
    SX1276.Settings.Channel = freq;
 80033f8:	4b11      	ldr	r3, [pc, #68]	; (8003440 <SX1276SetChannel+0x48>)
{
 80033fa:	b570      	push	{r4, r5, r6, lr}
    SX_FREQ_TO_CHANNEL( channel, freq );
 80033fc:	4911      	ldr	r1, [pc, #68]	; (8003444 <SX1276SetChannel+0x4c>)
    SX1276.Settings.Channel = freq;
 80033fe:	6098      	str	r0, [r3, #8]
{
 8003400:	0005      	movs	r5, r0
    SX_FREQ_TO_CHANNEL( channel, freq );
 8003402:	f7fc ff11 	bl	8000228 <__aeabi_uidivmod>
 8003406:	4b10      	ldr	r3, [pc, #64]	; (8003448 <SX1276SetChannel+0x50>)
 8003408:	0208      	lsls	r0, r1, #8
 800340a:	18c0      	adds	r0, r0, r3
 800340c:	490d      	ldr	r1, [pc, #52]	; (8003444 <SX1276SetChannel+0x4c>)
 800340e:	f7fc fe85 	bl	800011c <__udivsi3>
 8003412:	490c      	ldr	r1, [pc, #48]	; (8003444 <SX1276SetChannel+0x4c>)
 8003414:	0004      	movs	r4, r0
 8003416:	0028      	movs	r0, r5
 8003418:	f7fc fe80 	bl	800011c <__udivsi3>
 800341c:	0200      	lsls	r0, r0, #8
 800341e:	1824      	adds	r4, r4, r0
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8003420:	0c21      	lsrs	r1, r4, #16
 8003422:	b2c9      	uxtb	r1, r1
 8003424:	2006      	movs	r0, #6
 8003426:	f7ff ffde 	bl	80033e6 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 800342a:	0a21      	lsrs	r1, r4, #8
 800342c:	b2c9      	uxtb	r1, r1
 800342e:	2007      	movs	r0, #7
 8003430:	f7ff ffd9 	bl	80033e6 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8003434:	b2e1      	uxtb	r1, r4
 8003436:	2008      	movs	r0, #8
 8003438:	f7ff ffd5 	bl	80033e6 <SX1276Write>
}
 800343c:	bd70      	pop	{r4, r5, r6, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	2000061c 	.word	0x2000061c
 8003444:	00003d09 	.word	0x00003d09
 8003448:	00001e84 	.word	0x00001e84

0800344c <SX1276ReadBuffer>:
{
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	0006      	movs	r6, r0
 8003450:	000c      	movs	r4, r1
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003452:	20a0      	movs	r0, #160	; 0xa0
 8003454:	2180      	movs	r1, #128	; 0x80
{
 8003456:	0015      	movs	r5, r2
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8003458:	0209      	lsls	r1, r1, #8
 800345a:	2200      	movs	r2, #0
 800345c:	05c0      	lsls	r0, r0, #23
 800345e:	f7fe ff8d 	bl	800237c <HW_GPIO_Write>
    HW_SPI_InOut( addr & 0x7F );
 8003462:	207f      	movs	r0, #127	; 0x7f
 8003464:	4030      	ands	r0, r6
 8003466:	f7ff f9c1 	bl	80027ec <HW_SPI_InOut>
 800346a:	1965      	adds	r5, r4, r5
    for( i = 0; i < size; i++ )
 800346c:	42ac      	cmp	r4, r5
 800346e:	d107      	bne.n	8003480 <SX1276ReadBuffer+0x34>
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	20a0      	movs	r0, #160	; 0xa0
 8003474:	2201      	movs	r2, #1
 8003476:	0209      	lsls	r1, r1, #8
 8003478:	05c0      	lsls	r0, r0, #23
 800347a:	f7fe ff7f 	bl	800237c <HW_GPIO_Write>
}
 800347e:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = HW_SPI_InOut( 0 );
 8003480:	2000      	movs	r0, #0
 8003482:	f7ff f9b3 	bl	80027ec <HW_SPI_InOut>
 8003486:	7020      	strb	r0, [r4, #0]
 8003488:	3401      	adds	r4, #1
 800348a:	e7ef      	b.n	800346c <SX1276ReadBuffer+0x20>

0800348c <SX1276Read>:
{
 800348c:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800348e:	466b      	mov	r3, sp
 8003490:	1ddc      	adds	r4, r3, #7
 8003492:	2201      	movs	r2, #1
 8003494:	0021      	movs	r1, r4
 8003496:	f7ff ffd9 	bl	800344c <SX1276ReadBuffer>
    return data;
 800349a:	7820      	ldrb	r0, [r4, #0]
}
 800349c:	bd16      	pop	{r1, r2, r4, pc}
	...

080034a0 <RxChainCalibration>:
{
 80034a0:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80034a2:	2009      	movs	r0, #9
 80034a4:	f7ff fff2 	bl	800348c <SX1276Read>
 80034a8:	0005      	movs	r5, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80034aa:	2006      	movs	r0, #6
 80034ac:	f7ff ffee 	bl	800348c <SX1276Read>
 80034b0:	0004      	movs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80034b2:	2007      	movs	r0, #7
 80034b4:	f7ff ffea 	bl	800348c <SX1276Read>
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80034b8:	0424      	lsls	r4, r4, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80034ba:	0200      	lsls	r0, r0, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80034bc:	4304      	orrs	r4, r0
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80034be:	2008      	movs	r0, #8
 80034c0:	f7ff ffe4 	bl	800348c <SX1276Read>
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <RxChainCalibration+0x90>)
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80034c6:	4320      	orrs	r0, r4
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80034c8:	b2c4      	uxtb	r4, r0
 80034ca:	435c      	muls	r4, r3
 80034cc:	0a00      	lsrs	r0, r0, #8
 80034ce:	4358      	muls	r0, r3
 80034d0:	3480      	adds	r4, #128	; 0x80
 80034d2:	0a24      	lsrs	r4, r4, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 80034d4:	2100      	movs	r1, #0
    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80034d6:	1824      	adds	r4, r4, r0
    SX1276Write( REG_PACONFIG, 0x00 );
 80034d8:	2009      	movs	r0, #9
 80034da:	f7ff ff84 	bl	80033e6 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80034de:	203b      	movs	r0, #59	; 0x3b
 80034e0:	f7ff ffd4 	bl	800348c <SX1276Read>
 80034e4:	2140      	movs	r1, #64	; 0x40
 80034e6:	4301      	orrs	r1, r0
 80034e8:	b2c9      	uxtb	r1, r1
 80034ea:	203b      	movs	r0, #59	; 0x3b
 80034ec:	f7ff ff7b 	bl	80033e6 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80034f0:	2620      	movs	r6, #32
 80034f2:	203b      	movs	r0, #59	; 0x3b
 80034f4:	f7ff ffca 	bl	800348c <SX1276Read>
 80034f8:	4230      	tst	r0, r6
 80034fa:	d1fa      	bne.n	80034f2 <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 80034fc:	480d      	ldr	r0, [pc, #52]	; (8003534 <RxChainCalibration+0x94>)
 80034fe:	f7ff ff7b 	bl	80033f8 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003502:	203b      	movs	r0, #59	; 0x3b
 8003504:	f7ff ffc2 	bl	800348c <SX1276Read>
 8003508:	2140      	movs	r1, #64	; 0x40
 800350a:	4301      	orrs	r1, r0
 800350c:	b2c9      	uxtb	r1, r1
 800350e:	203b      	movs	r0, #59	; 0x3b
 8003510:	f7ff ff69 	bl	80033e6 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003514:	2620      	movs	r6, #32
 8003516:	203b      	movs	r0, #59	; 0x3b
 8003518:	f7ff ffb8 	bl	800348c <SX1276Read>
 800351c:	4230      	tst	r0, r6
 800351e:	d1fa      	bne.n	8003516 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8003520:	0029      	movs	r1, r5
 8003522:	2009      	movs	r0, #9
 8003524:	f7ff ff5f 	bl	80033e6 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8003528:	0020      	movs	r0, r4
 800352a:	f7ff ff65 	bl	80033f8 <SX1276SetChannel>
}
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	00003d09 	.word	0x00003d09
 8003534:	33bca100 	.word	0x33bca100

08003538 <SX1276GetTimeOnAir>:
{
 8003538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353a:	000d      	movs	r5, r1
 800353c:	b085      	sub	sp, #20
    switch( modem )
 800353e:	2800      	cmp	r0, #0
 8003540:	d003      	beq.n	800354a <SX1276GetTimeOnAir+0x12>
 8003542:	2801      	cmp	r0, #1
 8003544:	d05a      	beq.n	80035fc <SX1276GetTimeOnAir+0xc4>
    uint32_t airTime = 0;
 8003546:	2000      	movs	r0, #0
    return airTime;
 8003548:	e04e      	b.n	80035e8 <SX1276GetTimeOnAir+0xb0>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800354a:	4c71      	ldr	r4, [pc, #452]	; (8003710 <SX1276GetTimeOnAir+0x1d8>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800354c:	2027      	movs	r0, #39	; 0x27
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800354e:	8c26      	ldrh	r6, [r4, #32]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003550:	f7ff ff9c 	bl	800348c <SX1276Read>
 8003554:	23f8      	movs	r3, #248	; 0xf8
 8003556:	4398      	bics	r0, r3
 8003558:	3001      	adds	r0, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800355a:	1980      	adds	r0, r0, r6
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800355c:	f7fe fd9e 	bl	800209c <__aeabi_i2d>
 8003560:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003562:	1ce1      	adds	r1, r4, #3
 8003564:	7fc9      	ldrb	r1, [r1, #31]
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003566:	0002      	movs	r2, r0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003568:	2000      	movs	r0, #0
 800356a:	2900      	cmp	r1, #0
 800356c:	d13e      	bne.n	80035ec <SX1276GetTimeOnAir+0xb4>
 800356e:	4969      	ldr	r1, [pc, #420]	; (8003714 <SX1276GetTimeOnAir+0x1dc>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003570:	f7fd f886 	bl	8000680 <__aeabi_dadd>
 8003574:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003576:	2030      	movs	r0, #48	; 0x30
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8003578:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800357a:	f7ff ff87 	bl	800348c <SX1276Read>
 800357e:	23f9      	movs	r3, #249	; 0xf9
 8003580:	4398      	bics	r0, r3
 8003582:	d135      	bne.n	80035f0 <SX1276GetTimeOnAir+0xb8>
 8003584:	2000      	movs	r0, #0
 8003586:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003588:	0032      	movs	r2, r6
 800358a:	003b      	movs	r3, r7
 800358c:	f7fd f878 	bl	8000680 <__aeabi_dadd>
 8003590:	0006      	movs	r6, r0
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003592:	0028      	movs	r0, r5
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8003594:	000f      	movs	r7, r1
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8003596:	f7fe fd81 	bl	800209c <__aeabi_i2d>
 800359a:	0002      	movs	r2, r0
 800359c:	000b      	movs	r3, r1
 800359e:	0030      	movs	r0, r6
 80035a0:	0039      	movs	r1, r7
 80035a2:	f7fd f86d 	bl	8000680 <__aeabi_dadd>
 80035a6:	000b      	movs	r3, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80035a8:	1d61      	adds	r1, r4, #5
 80035aa:	7fc9      	ldrb	r1, [r1, #31]
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80035ac:	0002      	movs	r2, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80035ae:	2000      	movs	r0, #0
 80035b0:	2900      	cmp	r1, #0
 80035b2:	d120      	bne.n	80035f6 <SX1276GetTimeOnAir+0xbe>
 80035b4:	2100      	movs	r1, #0
                                     pktLen +
 80035b6:	f7fd f863 	bl	8000680 <__aeabi_dadd>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80035ba:	2200      	movs	r2, #0
 80035bc:	4b56      	ldr	r3, [pc, #344]	; (8003718 <SX1276GetTimeOnAir+0x1e0>)
 80035be:	f7fd ffa3 	bl	8001508 <__aeabi_dmul>
 80035c2:	0006      	movs	r6, r0
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80035c4:	69e0      	ldr	r0, [r4, #28]
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80035c6:	000f      	movs	r7, r1
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80035c8:	f7fe fdaa 	bl	8002120 <__aeabi_ui2d>
 80035cc:	0002      	movs	r2, r0
 80035ce:	000b      	movs	r3, r1
 80035d0:	0030      	movs	r0, r6
 80035d2:	0039      	movs	r1, r7
 80035d4:	f7fd fb64 	bl	8000ca0 <__aeabi_ddiv>
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80035d8:	2200      	movs	r2, #0
 80035da:	4b50      	ldr	r3, [pc, #320]	; (800371c <SX1276GetTimeOnAir+0x1e4>)
 80035dc:	f7fd ff94 	bl	8001508 <__aeabi_dmul>
 80035e0:	f004 fdd4 	bl	800818c <round>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80035e4:	f7fc ff6e 	bl	80004c4 <__aeabi_d2uiz>
}
 80035e8:	b005      	add	sp, #20
 80035ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80035ec:	2100      	movs	r1, #0
 80035ee:	e7bf      	b.n	8003570 <SX1276GetTimeOnAir+0x38>
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 80035f0:	2000      	movs	r0, #0
 80035f2:	4948      	ldr	r1, [pc, #288]	; (8003714 <SX1276GetTimeOnAir+0x1dc>)
 80035f4:	e7c8      	b.n	8003588 <SX1276GetTimeOnAir+0x50>
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	05c9      	lsls	r1, r1, #23
 80035fa:	e7dc      	b.n	80035b6 <SX1276GetTimeOnAir+0x7e>
            switch( SX1276.Settings.LoRa.Bandwidth )
 80035fc:	4c44      	ldr	r4, [pc, #272]	; (8003710 <SX1276GetTimeOnAir+0x1d8>)
 80035fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003600:	3b07      	subs	r3, #7
 8003602:	2b02      	cmp	r3, #2
 8003604:	d900      	bls.n	8003608 <SX1276GetTimeOnAir+0xd0>
 8003606:	e07d      	b.n	8003704 <SX1276GetTimeOnAir+0x1cc>
 8003608:	4a45      	ldr	r2, [pc, #276]	; (8003720 <SX1276GetTimeOnAir+0x1e8>)
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	18d3      	adds	r3, r2, r3
 800360e:	681e      	ldr	r6, [r3, #0]
 8003610:	685f      	ldr	r7, [r3, #4]
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8003612:	2001      	movs	r0, #1
 8003614:	6ca3      	ldr	r3, [r4, #72]	; 0x48
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003616:	00ed      	lsls	r5, r5, #3
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8003618:	4098      	lsls	r0, r3
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	f7fe fd3e 	bl	800209c <__aeabi_i2d>
 8003620:	0002      	movs	r2, r0
 8003622:	000b      	movs	r3, r1
 8003624:	0030      	movs	r0, r6
 8003626:	0039      	movs	r1, r7
 8003628:	f7fd fb3a 	bl	8000ca0 <__aeabi_ddiv>
 800362c:	0002      	movs	r2, r0
 800362e:	000b      	movs	r3, r1
            double ts = 1 / rs;
 8003630:	2000      	movs	r0, #0
 8003632:	4938      	ldr	r1, [pc, #224]	; (8003714 <SX1276GetTimeOnAir+0x1dc>)
 8003634:	f7fd fb34 	bl	8000ca0 <__aeabi_ddiv>
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8003638:	0023      	movs	r3, r4
            double ts = 1 / rs;
 800363a:	0006      	movs	r6, r0
 800363c:	000f      	movs	r7, r1
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800363e:	334e      	adds	r3, #78	; 0x4e
 8003640:	8818      	ldrh	r0, [r3, #0]
 8003642:	f7fe fd2b 	bl	800209c <__aeabi_i2d>
 8003646:	2200      	movs	r2, #0
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <SX1276GetTimeOnAir+0x1ec>)
 800364a:	f7fd f819 	bl	8000680 <__aeabi_dadd>
 800364e:	0032      	movs	r2, r6
 8003650:	003b      	movs	r3, r7
 8003652:	f7fd ff59 	bl	8001508 <__aeabi_dmul>
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8003656:	0023      	movs	r3, r4
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8003658:	9002      	str	r0, [sp, #8]
 800365a:	9103      	str	r1, [sp, #12]
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800365c:	3352      	adds	r3, #82	; 0x52
 800365e:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003660:	9b01      	ldr	r3, [sp, #4]
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8003662:	3450      	adds	r4, #80	; 0x50
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003664:	009b      	lsls	r3, r3, #2
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8003666:	0100      	lsls	r0, r0, #4
 8003668:	1ac0      	subs	r0, r0, r3
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 800366a:	7823      	ldrb	r3, [r4, #0]
 800366c:	2214      	movs	r2, #20
 800366e:	1e59      	subs	r1, r3, #1
 8003670:	418b      	sbcs	r3, r1
 8003672:	301c      	adds	r0, #28
 8003674:	425b      	negs	r3, r3
 8003676:	401a      	ands	r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 8003678:	1828      	adds	r0, r5, r0
 800367a:	1a80      	subs	r0, r0, r2
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800367c:	f7fe fd50 	bl	8002120 <__aeabi_ui2d>
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <SX1276GetTimeOnAir+0x1d8>)
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003682:	0004      	movs	r4, r0
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003684:	334c      	adds	r3, #76	; 0x4c
 8003686:	7818      	ldrb	r0, [r3, #0]
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8003688:	000d      	movs	r5, r1
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800368a:	1e43      	subs	r3, r0, #1
 800368c:	4198      	sbcs	r0, r3
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 800368e:	9b01      	ldr	r3, [sp, #4]
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8003690:	0040      	lsls	r0, r0, #1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8003692:	1a18      	subs	r0, r3, r0
 8003694:	0080      	lsls	r0, r0, #2
 8003696:	f7fe fd43 	bl	8002120 <__aeabi_ui2d>
 800369a:	0002      	movs	r2, r0
 800369c:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800369e:	0020      	movs	r0, r4
 80036a0:	0029      	movs	r1, r5
 80036a2:	f7fd fafd 	bl	8000ca0 <__aeabi_ddiv>
 80036a6:	f004 fc6d 	bl	8007f84 <ceil>
 80036aa:	0004      	movs	r4, r0
 80036ac:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <SX1276GetTimeOnAir+0x1d8>)
 80036b0:	334d      	adds	r3, #77	; 0x4d
 80036b2:	7818      	ldrb	r0, [r3, #0]
 80036b4:	3004      	adds	r0, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80036b6:	f7fe fcf1 	bl	800209c <__aeabi_i2d>
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80036ba:	0022      	movs	r2, r4
 80036bc:	002b      	movs	r3, r5
 80036be:	f7fd ff23 	bl	8001508 <__aeabi_dmul>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80036c2:	2200      	movs	r2, #0
 80036c4:	2300      	movs	r3, #0
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80036c6:	0004      	movs	r4, r0
 80036c8:	000d      	movs	r5, r1
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 80036ca:	f7fc fec7 	bl	800045c <__aeabi_dcmpgt>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	d01b      	beq.n	800370a <SX1276GetTimeOnAir+0x1d2>
 80036d2:	2200      	movs	r2, #0
 80036d4:	4b10      	ldr	r3, [pc, #64]	; (8003718 <SX1276GetTimeOnAir+0x1e0>)
 80036d6:	0020      	movs	r0, r4
 80036d8:	0029      	movs	r1, r5
 80036da:	f7fc ffd1 	bl	8000680 <__aeabi_dadd>
            double tPayload = nPayload * ts;
 80036de:	0032      	movs	r2, r6
 80036e0:	003b      	movs	r3, r7
 80036e2:	f7fd ff11 	bl	8001508 <__aeabi_dmul>
            double tOnAir = tPreamble + tPayload;
 80036e6:	9a02      	ldr	r2, [sp, #8]
 80036e8:	9b03      	ldr	r3, [sp, #12]
 80036ea:	f7fc ffc9 	bl	8000680 <__aeabi_dadd>
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 80036ee:	2200      	movs	r2, #0
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <SX1276GetTimeOnAir+0x1e4>)
 80036f2:	f7fd ff09 	bl	8001508 <__aeabi_dmul>
 80036f6:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <SX1276GetTimeOnAir+0x1f0>)
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <SX1276GetTimeOnAir+0x1f4>)
 80036fa:	f7fc ffc1 	bl	8000680 <__aeabi_dadd>
 80036fe:	f004 fcc3 	bl	8008088 <floor>
 8003702:	e76f      	b.n	80035e4 <SX1276GetTimeOnAir+0xac>
            switch( SX1276.Settings.LoRa.Bandwidth )
 8003704:	2600      	movs	r6, #0
 8003706:	2700      	movs	r7, #0
 8003708:	e783      	b.n	8003612 <SX1276GetTimeOnAir+0xda>
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800370a:	2000      	movs	r0, #0
 800370c:	4902      	ldr	r1, [pc, #8]	; (8003718 <SX1276GetTimeOnAir+0x1e0>)
 800370e:	e7e6      	b.n	80036de <SX1276GetTimeOnAir+0x1a6>
 8003710:	2000061c 	.word	0x2000061c
 8003714:	3ff00000 	.word	0x3ff00000
 8003718:	40200000 	.word	0x40200000
 800371c:	408f4000 	.word	0x408f4000
 8003720:	08008490 	.word	0x08008490
 8003724:	40110000 	.word	0x40110000
 8003728:	d916872b 	.word	0xd916872b
 800372c:	3feff7ce 	.word	0x3feff7ce

08003730 <SX1276ReadRssi>:
{
 8003730:	b510      	push	{r4, lr}
    switch( modem )
 8003732:	2800      	cmp	r0, #0
 8003734:	d004      	beq.n	8003740 <SX1276ReadRssi+0x10>
 8003736:	2801      	cmp	r0, #1
 8003738:	d00a      	beq.n	8003750 <SX1276ReadRssi+0x20>
        rssi = -1;
 800373a:	2001      	movs	r0, #1
 800373c:	4240      	negs	r0, r0
 800373e:	e006      	b.n	800374e <SX1276ReadRssi+0x1e>
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8003740:	2011      	movs	r0, #17
 8003742:	f7ff fea3 	bl	800348c <SX1276Read>
 8003746:	0840      	lsrs	r0, r0, #1
 8003748:	b2c0      	uxtb	r0, r0
 800374a:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800374c:	b200      	sxth	r0, r0
}
 800374e:	bd10      	pop	{r4, pc}
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003750:	4a06      	ldr	r2, [pc, #24]	; (800376c <SX1276ReadRssi+0x3c>)
 8003752:	4b07      	ldr	r3, [pc, #28]	; (8003770 <SX1276ReadRssi+0x40>)
 8003754:	6892      	ldr	r2, [r2, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8003756:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8003758:	429a      	cmp	r2, r3
 800375a:	d903      	bls.n	8003764 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800375c:	f7ff fe96 	bl	800348c <SX1276Read>
 8003760:	389d      	subs	r0, #157	; 0x9d
 8003762:	e7f3      	b.n	800374c <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8003764:	f7ff fe92 	bl	800348c <SX1276Read>
 8003768:	38a4      	subs	r0, #164	; 0xa4
 800376a:	e7ef      	b.n	800374c <SX1276ReadRssi+0x1c>
 800376c:	2000061c 	.word	0x2000061c
 8003770:	1f4add40 	.word	0x1f4add40

08003774 <SX1276SetOpMode.part.2>:
void SX1276SetOpMode( uint8_t opMode )
 8003774:	b510      	push	{r4, lr}
 8003776:	0004      	movs	r4, r0
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8003778:	2001      	movs	r0, #1
 800377a:	f7ff fe87 	bl	800348c <SX1276Read>
 800377e:	2307      	movs	r3, #7
 8003780:	0001      	movs	r1, r0
 8003782:	4399      	bics	r1, r3
 8003784:	4321      	orrs	r1, r4
 8003786:	b2c9      	uxtb	r1, r1
 8003788:	2001      	movs	r0, #1
 800378a:	f7ff fe2c 	bl	80033e6 <SX1276Write>
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 800378e:	4c05      	ldr	r4, [pc, #20]	; (80037a4 <SX1276SetOpMode.part.2+0x30>)
 8003790:	2001      	movs	r0, #1
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	2000      	movs	r0, #0
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4798      	blx	r3
}
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	20000310 	.word	0x20000310

080037a8 <SX1276SetSleep>:
{
 80037a8:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 80037aa:	4806      	ldr	r0, [pc, #24]	; (80037c4 <SX1276SetSleep+0x1c>)
 80037ac:	f003 fe5a 	bl	8007464 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80037b0:	4805      	ldr	r0, [pc, #20]	; (80037c8 <SX1276SetSleep+0x20>)
 80037b2:	f003 fe57 	bl	8007464 <TimerStop>
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7ff ffdc 	bl	8003774 <SX1276SetOpMode.part.2>
    SX1276.Settings.State = RF_IDLE;
 80037bc:	2200      	movs	r2, #0
 80037be:	4b03      	ldr	r3, [pc, #12]	; (80037cc <SX1276SetSleep+0x24>)
 80037c0:	711a      	strb	r2, [r3, #4]
}
 80037c2:	bd10      	pop	{r4, pc}
 80037c4:	20000684 	.word	0x20000684
 80037c8:	200005f4 	.word	0x200005f4
 80037cc:	2000061c 	.word	0x2000061c

080037d0 <SX1276SetOpMode>:
{
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	1e04      	subs	r4, r0, #0
    if( opMode == RF_OPMODE_SLEEP )
 80037d4:	d102      	bne.n	80037dc <SX1276SetOpMode+0xc>
 80037d6:	f7ff ffcd 	bl	8003774 <SX1276SetOpMode.part.2>
}
 80037da:	bd70      	pop	{r4, r5, r6, pc}
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 80037dc:	4d0c      	ldr	r5, [pc, #48]	; (8003810 <SX1276SetOpMode+0x40>)
 80037de:	2001      	movs	r0, #1
 80037e0:	682b      	ldr	r3, [r5, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 80037e6:	682b      	ldr	r3, [r5, #0]
 80037e8:	2000      	movs	r0, #0
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 80037ee:	682b      	ldr	r3, [r5, #0]
 80037f0:	0020      	movs	r0, r4
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80037f6:	2001      	movs	r0, #1
 80037f8:	f7ff fe48 	bl	800348c <SX1276Read>
 80037fc:	2307      	movs	r3, #7
 80037fe:	0001      	movs	r1, r0
 8003800:	4399      	bics	r1, r3
 8003802:	4321      	orrs	r1, r4
 8003804:	b2c9      	uxtb	r1, r1
 8003806:	2001      	movs	r0, #1
 8003808:	f7ff fded 	bl	80033e6 <SX1276Write>
}
 800380c:	e7e5      	b.n	80037da <SX1276SetOpMode+0xa>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	20000310 	.word	0x20000310

08003814 <SX1276SetStby>:
{
 8003814:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8003816:	4806      	ldr	r0, [pc, #24]	; (8003830 <SX1276SetStby+0x1c>)
 8003818:	f003 fe24 	bl	8007464 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800381c:	4805      	ldr	r0, [pc, #20]	; (8003834 <SX1276SetStby+0x20>)
 800381e:	f003 fe21 	bl	8007464 <TimerStop>
    SX1276SetOpMode( RF_OPMODE_STANDBY );
 8003822:	2001      	movs	r0, #1
 8003824:	f7ff ffd4 	bl	80037d0 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8003828:	2200      	movs	r2, #0
 800382a:	4b03      	ldr	r3, [pc, #12]	; (8003838 <SX1276SetStby+0x24>)
 800382c:	711a      	strb	r2, [r3, #4]
}
 800382e:	bd10      	pop	{r4, pc}
 8003830:	20000684 	.word	0x20000684
 8003834:	200005f4 	.word	0x200005f4
 8003838:	2000061c 	.word	0x2000061c

0800383c <SX1276SetRx>:
{
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( SX1276.Settings.Modem )
 800383e:	4c79      	ldr	r4, [pc, #484]	; (8003a24 <SX1276SetRx+0x1e8>)
{
 8003840:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 8003842:	7965      	ldrb	r5, [r4, #5]
 8003844:	2d00      	cmp	r5, #0
 8003846:	d003      	beq.n	8003850 <SX1276SetRx+0x14>
 8003848:	2d01      	cmp	r5, #1
 800384a:	d04f      	beq.n	80038ec <SX1276SetRx+0xb0>
    bool rxContinuous = false;
 800384c:	2700      	movs	r7, #0
 800384e:	e029      	b.n	80038a4 <SX1276SetRx+0x68>
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003850:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003852:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8003854:	7fdf      	ldrb	r7, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003856:	f7ff fe19 	bl	800348c <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800385a:	2103      	movs	r1, #3
 800385c:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800385e:	3109      	adds	r1, #9
 8003860:	4301      	orrs	r1, r0
 8003862:	2040      	movs	r0, #64	; 0x40
 8003864:	f7ff fdbf 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003868:	2041      	movs	r0, #65	; 0x41
 800386a:	f7ff fe0f 	bl	800348c <SX1276Read>
 800386e:	213f      	movs	r1, #63	; 0x3f
 8003870:	4249      	negs	r1, r1
 8003872:	4301      	orrs	r1, r0
 8003874:	b2c9      	uxtb	r1, r1
 8003876:	2041      	movs	r0, #65	; 0x41
 8003878:	f7ff fdb5 	bl	80033e6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800387c:	2035      	movs	r0, #53	; 0x35
 800387e:	f7ff fe05 	bl	800348c <SX1276Read>
 8003882:	233f      	movs	r3, #63	; 0x3f
 8003884:	4018      	ands	r0, r3
 8003886:	0023      	movs	r3, r4
 8003888:	333e      	adds	r3, #62	; 0x3e
 800388a:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800388c:	211e      	movs	r1, #30
 800388e:	200d      	movs	r0, #13
 8003890:	f7ff fda9 	bl	80033e6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8003894:	0023      	movs	r3, r4
 8003896:	3330      	adds	r3, #48	; 0x30
 8003898:	701d      	strb	r5, [r3, #0]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800389a:	0023      	movs	r3, r4
 800389c:	3331      	adds	r3, #49	; 0x31
 800389e:	701d      	strb	r5, [r3, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80038a0:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80038a2:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80038a4:	2280      	movs	r2, #128	; 0x80
 80038a6:	2100      	movs	r1, #0
 80038a8:	0052      	lsls	r2, r2, #1
 80038aa:	485f      	ldr	r0, [pc, #380]	; (8003a28 <SX1276SetRx+0x1ec>)
 80038ac:	f003 ff11 	bl	80076d2 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80038b0:	2301      	movs	r3, #1
 80038b2:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 80038b4:	2e00      	cmp	r6, #0
 80038b6:	d007      	beq.n	80038c8 <SX1276SetRx+0x8c>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80038b8:	4d5c      	ldr	r5, [pc, #368]	; (8003a2c <SX1276SetRx+0x1f0>)
 80038ba:	0031      	movs	r1, r6
 80038bc:	0028      	movs	r0, r5
 80038be:	f003 fdfd 	bl	80074bc <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80038c2:	0028      	movs	r0, r5
 80038c4:	f003 fd5c 	bl	8007380 <TimerStart>
    if( SX1276.Settings.Modem == MODEM_FSK )
 80038c8:	7963      	ldrb	r3, [r4, #5]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d000      	beq.n	80038d0 <SX1276SetRx+0x94>
 80038ce:	e0a2      	b.n	8003a16 <SX1276SetRx+0x1da>
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80038d0:	2005      	movs	r0, #5
 80038d2:	f7ff ff7d 	bl	80037d0 <SX1276SetOpMode>
        if( rxContinuous == false )
 80038d6:	2f00      	cmp	r7, #0
 80038d8:	d107      	bne.n	80038ea <SX1276SetRx+0xae>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80038da:	4d55      	ldr	r5, [pc, #340]	; (8003a30 <SX1276SetRx+0x1f4>)
 80038dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038de:	0028      	movs	r0, r5
 80038e0:	f003 fdec 	bl	80074bc <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80038e4:	0028      	movs	r0, r5
 80038e6:	f003 fd4b 	bl	8007380 <TimerStart>
}
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( SX1276.Settings.LoRa.IqInverted == true )
 80038ec:	0023      	movs	r3, r4
 80038ee:	3355      	adds	r3, #85	; 0x55
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2741      	movs	r7, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80038f4:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d023      	beq.n	8003942 <SX1276SetRx+0x106>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80038fa:	f7ff fdc7 	bl	800348c <SX1276Read>
 80038fe:	4338      	orrs	r0, r7
 8003900:	b2c1      	uxtb	r1, r0
 8003902:	2033      	movs	r0, #51	; 0x33
 8003904:	f7ff fd6f 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003908:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800390a:	203b      	movs	r0, #59	; 0x3b
 800390c:	f7ff fd6b 	bl	80033e6 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003910:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003912:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8003914:	2b08      	cmp	r3, #8
 8003916:	d86d      	bhi.n	80039f4 <SX1276SetRx+0x1b8>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8003918:	f7ff fdb8 	bl	800348c <SX1276Read>
 800391c:	217f      	movs	r1, #127	; 0x7f
 800391e:	4001      	ands	r1, r0
 8003920:	2031      	movs	r0, #49	; 0x31
 8003922:	f7ff fd60 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_TEST30, 0x00 );
 8003926:	2030      	movs	r0, #48	; 0x30
 8003928:	2100      	movs	r1, #0
 800392a:	f7ff fd5c 	bl	80033e6 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800392e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003930:	2808      	cmp	r0, #8
 8003932:	d81a      	bhi.n	800396a <SX1276SetRx+0x12e>
 8003934:	f7fc fbe8 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003938:	443d3610 	.word	0x443d3610
 800393c:	5959524b 	.word	0x5959524b
 8003940:	59          	.byte	0x59
 8003941:	00          	.byte	0x00
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8003942:	f7ff fda3 	bl	800348c <SX1276Read>
 8003946:	0001      	movs	r1, r0
 8003948:	43b9      	bics	r1, r7
 800394a:	4329      	orrs	r1, r5
 800394c:	b2c9      	uxtb	r1, r1
 800394e:	2033      	movs	r0, #51	; 0x33
 8003950:	f7ff fd49 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8003954:	211d      	movs	r1, #29
 8003956:	e7d8      	b.n	800390a <SX1276SetRx+0xce>
                    SX1276Write( REG_LR_TEST2F, 0x48 );
 8003958:	2148      	movs	r1, #72	; 0x48
 800395a:	202f      	movs	r0, #47	; 0x2f
 800395c:	f7ff fd43 	bl	80033e6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8003960:	68a3      	ldr	r3, [r4, #8]
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <SX1276SetRx+0x1f8>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8003964:	1898      	adds	r0, r3, r2
 8003966:	f7ff fd47 	bl	80033f8 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800396a:	0023      	movs	r3, r4
 800396c:	3356      	adds	r3, #86	; 0x56
 800396e:	781f      	ldrb	r7, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003970:	0023      	movs	r3, r4
 8003972:	3353      	adds	r3, #83	; 0x53
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <SX1276SetRx+0x1c8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800397a:	211d      	movs	r1, #29
 800397c:	2011      	movs	r0, #17
 800397e:	f7ff fd32 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003982:	2040      	movs	r0, #64	; 0x40
 8003984:	f7ff fd82 	bl	800348c <SX1276Read>
 8003988:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800398a:	4001      	ands	r1, r0
 800398c:	2040      	movs	r0, #64	; 0x40
 800398e:	f7ff fd2a 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8003992:	2100      	movs	r1, #0
 8003994:	200f      	movs	r0, #15
 8003996:	f7ff fd26 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800399a:	2100      	movs	r1, #0
 800399c:	200d      	movs	r0, #13
 800399e:	f7ff fd22 	bl	80033e6 <SX1276Write>
        break;
 80039a2:	e77f      	b.n	80038a4 <SX1276SetRx+0x68>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80039a4:	2144      	movs	r1, #68	; 0x44
 80039a6:	202f      	movs	r0, #47	; 0x2f
 80039a8:	f7ff fd1d 	bl	80033e6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80039ac:	68a3      	ldr	r3, [r4, #8]
 80039ae:	4a22      	ldr	r2, [pc, #136]	; (8003a38 <SX1276SetRx+0x1fc>)
 80039b0:	e7d8      	b.n	8003964 <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80039b2:	2144      	movs	r1, #68	; 0x44
 80039b4:	202f      	movs	r0, #47	; 0x2f
 80039b6:	f7ff fd16 	bl	80033e6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80039ba:	68a3      	ldr	r3, [r4, #8]
 80039bc:	4a1f      	ldr	r2, [pc, #124]	; (8003a3c <SX1276SetRx+0x200>)
 80039be:	e7d1      	b.n	8003964 <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80039c0:	2144      	movs	r1, #68	; 0x44
 80039c2:	202f      	movs	r0, #47	; 0x2f
 80039c4:	f7ff fd0f 	bl	80033e6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80039c8:	68a3      	ldr	r3, [r4, #8]
 80039ca:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <SX1276SetRx+0x204>)
 80039cc:	e7ca      	b.n	8003964 <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80039ce:	2144      	movs	r1, #68	; 0x44
 80039d0:	202f      	movs	r0, #47	; 0x2f
 80039d2:	f7ff fd08 	bl	80033e6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80039d6:	68a3      	ldr	r3, [r4, #8]
 80039d8:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <SX1276SetRx+0x208>)
 80039da:	e7c3      	b.n	8003964 <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x44 );
 80039dc:	2144      	movs	r1, #68	; 0x44
 80039de:	202f      	movs	r0, #47	; 0x2f
 80039e0:	f7ff fd01 	bl	80033e6 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80039e4:	68a3      	ldr	r3, [r4, #8]
 80039e6:	4a18      	ldr	r2, [pc, #96]	; (8003a48 <SX1276SetRx+0x20c>)
 80039e8:	e7bc      	b.n	8003964 <SX1276SetRx+0x128>
                    SX1276Write( REG_LR_TEST2F, 0x40 );
 80039ea:	2140      	movs	r1, #64	; 0x40
 80039ec:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80039ee:	f7ff fcfa 	bl	80033e6 <SX1276Write>
 80039f2:	e7ba      	b.n	800396a <SX1276SetRx+0x12e>
 80039f4:	f7ff fd4a 	bl	800348c <SX1276Read>
 80039f8:	2180      	movs	r1, #128	; 0x80
 80039fa:	4249      	negs	r1, r1
 80039fc:	4301      	orrs	r1, r0
 80039fe:	b2c9      	uxtb	r1, r1
 8003a00:	2031      	movs	r0, #49	; 0x31
 8003a02:	e7f4      	b.n	80039ee <SX1276SetRx+0x1b2>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003a04:	211f      	movs	r1, #31
 8003a06:	2011      	movs	r0, #17
 8003a08:	f7ff fced 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8003a0c:	2040      	movs	r0, #64	; 0x40
 8003a0e:	f7ff fd3d 	bl	800348c <SX1276Read>
 8003a12:	213f      	movs	r1, #63	; 0x3f
 8003a14:	e7b9      	b.n	800398a <SX1276SetRx+0x14e>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8003a16:	2005      	movs	r0, #5
        if( rxContinuous == true )
 8003a18:	2f00      	cmp	r7, #0
 8003a1a:	d100      	bne.n	8003a1e <SX1276SetRx+0x1e2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8003a1c:	2006      	movs	r0, #6
 8003a1e:	f7ff fed7 	bl	80037d0 <SX1276SetOpMode>
}
 8003a22:	e762      	b.n	80038ea <SX1276SetRx+0xae>
 8003a24:	2000061c 	.word	0x2000061c
 8003a28:	20000318 	.word	0x20000318
 8003a2c:	20000684 	.word	0x20000684
 8003a30:	20000608 	.word	0x20000608
 8003a34:	00001e82 	.word	0x00001e82
 8003a38:	000028b4 	.word	0x000028b4
 8003a3c:	00003d04 	.word	0x00003d04
 8003a40:	0000515e 	.word	0x0000515e
 8003a44:	00007a12 	.word	0x00007a12
 8003a48:	0000a2c6 	.word	0x0000a2c6

08003a4c <SX1276SetTx>:
{
 8003a4c:	b570      	push	{r4, r5, r6, lr}
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003a4e:	4d25      	ldr	r5, [pc, #148]	; (8003ae4 <SX1276SetTx+0x98>)
{
 8003a50:	0001      	movs	r1, r0
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003a52:	0028      	movs	r0, r5
 8003a54:	f003 fd32 	bl	80074bc <TimerSetValue>
    switch( SX1276.Settings.Modem )
 8003a58:	4c23      	ldr	r4, [pc, #140]	; (8003ae8 <SX1276SetTx+0x9c>)
 8003a5a:	7963      	ldrb	r3, [r4, #5]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <SX1276SetTx+0x2a>
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d023      	beq.n	8003aac <SX1276SetTx+0x60>
    SX1276.Settings.State = RF_TX_RUNNING;
 8003a64:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8003a66:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8003a68:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8003a6a:	f003 fc89 	bl	8007380 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8003a6e:	2003      	movs	r0, #3
 8003a70:	f7ff feae 	bl	80037d0 <SX1276SetOpMode>
}
 8003a74:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003a76:	2040      	movs	r0, #64	; 0x40
 8003a78:	f7ff fd08 	bl	800348c <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8003a7c:	2103      	movs	r1, #3
 8003a7e:	4008      	ands	r0, r1
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003a80:	310d      	adds	r1, #13
 8003a82:	4301      	orrs	r1, r0
 8003a84:	2040      	movs	r0, #64	; 0x40
 8003a86:	f7ff fcae 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8003a8a:	2041      	movs	r0, #65	; 0x41
 8003a8c:	f7ff fcfe 	bl	800348c <SX1276Read>
 8003a90:	213e      	movs	r1, #62	; 0x3e
 8003a92:	4001      	ands	r1, r0
 8003a94:	2041      	movs	r0, #65	; 0x41
 8003a96:	f7ff fca6 	bl	80033e6 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8003a9a:	2035      	movs	r0, #53	; 0x35
 8003a9c:	f7ff fcf6 	bl	800348c <SX1276Read>
 8003aa0:	233f      	movs	r3, #63	; 0x3f
 8003aa2:	4018      	ands	r0, r3
 8003aa4:	0023      	movs	r3, r4
 8003aa6:	333e      	adds	r3, #62	; 0x3e
 8003aa8:	7018      	strb	r0, [r3, #0]
        break;
 8003aaa:	e7db      	b.n	8003a64 <SX1276SetTx+0x18>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003aac:	0023      	movs	r3, r4
 8003aae:	3353      	adds	r3, #83	; 0x53
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00d      	beq.n	8003ad2 <SX1276SetTx+0x86>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003ab6:	21f5      	movs	r1, #245	; 0xf5
 8003ab8:	2011      	movs	r0, #17
 8003aba:	f7ff fc94 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8003abe:	2040      	movs	r0, #64	; 0x40
 8003ac0:	f7ff fce4 	bl	800348c <SX1276Read>
 8003ac4:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003ac6:	4001      	ands	r1, r0
 8003ac8:	2040      	movs	r0, #64	; 0x40
 8003aca:	4301      	orrs	r1, r0
 8003acc:	f7ff fc8b 	bl	80033e6 <SX1276Write>
 8003ad0:	e7c8      	b.n	8003a64 <SX1276SetTx+0x18>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003ad2:	21f7      	movs	r1, #247	; 0xf7
 8003ad4:	2011      	movs	r0, #17
 8003ad6:	f7ff fc86 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003ada:	2040      	movs	r0, #64	; 0x40
 8003adc:	f7ff fcd6 	bl	800348c <SX1276Read>
 8003ae0:	213f      	movs	r1, #63	; 0x3f
 8003ae2:	e7f0      	b.n	8003ac6 <SX1276SetTx+0x7a>
 8003ae4:	200005f4 	.word	0x200005f4
 8003ae8:	2000061c 	.word	0x2000061c

08003aec <SX1276StartCad>:
{
 8003aec:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8003aee:	4c0b      	ldr	r4, [pc, #44]	; (8003b1c <SX1276StartCad+0x30>)
 8003af0:	7963      	ldrb	r3, [r4, #5]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d110      	bne.n	8003b18 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003af6:	21fa      	movs	r1, #250	; 0xfa
 8003af8:	2011      	movs	r0, #17
 8003afa:	f7ff fc74 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8003afe:	2040      	movs	r0, #64	; 0x40
 8003b00:	f7ff fcc4 	bl	800348c <SX1276Read>
 8003b04:	2503      	movs	r5, #3
 8003b06:	43a8      	bics	r0, r5
 8003b08:	b2c1      	uxtb	r1, r0
 8003b0a:	2040      	movs	r0, #64	; 0x40
 8003b0c:	f7ff fc6b 	bl	80033e6 <SX1276Write>
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8003b10:	2007      	movs	r0, #7
            SX1276.Settings.State = RF_CAD;
 8003b12:	7125      	strb	r5, [r4, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8003b14:	f7ff fe5c 	bl	80037d0 <SX1276SetOpMode>
}
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	2000061c 	.word	0x2000061c

08003b20 <SX1276SetModem>:
{
 8003b20:	b510      	push	{r4, lr}
 8003b22:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8003b24:	2001      	movs	r0, #1
 8003b26:	f7ff fcb1 	bl	800348c <SX1276Read>
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <SX1276SetModem+0x70>)
 8003b2c:	0602      	lsls	r2, r0, #24
 8003b2e:	d51a      	bpl.n	8003b66 <SX1276SetModem+0x46>
        SX1276.Settings.Modem = MODEM_LORA;
 8003b30:	2201      	movs	r2, #1
        SX1276.Settings.Modem = MODEM_FSK;
 8003b32:	715a      	strb	r2, [r3, #5]
    if( SX1276.Settings.Modem == modem )
 8003b34:	795a      	ldrb	r2, [r3, #5]
 8003b36:	42a2      	cmp	r2, r4
 8003b38:	d014      	beq.n	8003b64 <SX1276SetModem+0x44>
    SX1276.Settings.Modem = modem;
 8003b3a:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 8003b3c:	2c01      	cmp	r4, #1
 8003b3e:	d014      	beq.n	8003b6a <SX1276SetModem+0x4a>
        SX1276SetSleep( );
 8003b40:	f7ff fe32 	bl	80037a8 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7ff fca1 	bl	800348c <SX1276Read>
 8003b4a:	217f      	movs	r1, #127	; 0x7f
 8003b4c:	4001      	ands	r1, r0
 8003b4e:	2001      	movs	r0, #1
 8003b50:	f7ff fc49 	bl	80033e6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003b54:	2100      	movs	r1, #0
 8003b56:	2040      	movs	r0, #64	; 0x40
 8003b58:	f7ff fc45 	bl	80033e6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8003b5c:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8003b5e:	2041      	movs	r0, #65	; 0x41
 8003b60:	f7ff fc41 	bl	80033e6 <SX1276Write>
}
 8003b64:	bd10      	pop	{r4, pc}
        SX1276.Settings.Modem = MODEM_FSK;
 8003b66:	2200      	movs	r2, #0
 8003b68:	e7e3      	b.n	8003b32 <SX1276SetModem+0x12>
        SX1276SetSleep( );
 8003b6a:	f7ff fe1d 	bl	80037a8 <SX1276SetSleep>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8003b6e:	0020      	movs	r0, r4
 8003b70:	f7ff fc8c 	bl	800348c <SX1276Read>
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	4249      	negs	r1, r1
 8003b78:	4301      	orrs	r1, r0
 8003b7a:	b2c9      	uxtb	r1, r1
 8003b7c:	0020      	movs	r0, r4
 8003b7e:	f7ff fc32 	bl	80033e6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8003b82:	2100      	movs	r1, #0
 8003b84:	2040      	movs	r0, #64	; 0x40
 8003b86:	f7ff fc2e 	bl	80033e6 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	e7e7      	b.n	8003b5e <SX1276SetModem+0x3e>
 8003b8e:	46c0      	nop			; (mov r8, r8)
 8003b90:	2000061c 	.word	0x2000061c

08003b94 <SX1276Init>:
{
 8003b94:	b570      	push	{r4, r5, r6, lr}
    RadioEvents = events;
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <SX1276Init+0x70>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003b98:	4c1b      	ldr	r4, [pc, #108]	; (8003c08 <SX1276Init+0x74>)
    RadioEvents = events;
 8003b9a:	6018      	str	r0, [r3, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003b9c:	0021      	movs	r1, r4
 8003b9e:	481b      	ldr	r0, [pc, #108]	; (8003c0c <SX1276Init+0x78>)
 8003ba0:	f003 fbe6 	bl	8007370 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8003ba4:	0021      	movs	r1, r4
 8003ba6:	481a      	ldr	r0, [pc, #104]	; (8003c10 <SX1276Init+0x7c>)
 8003ba8:	f003 fbe2 	bl	8007370 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8003bac:	0021      	movs	r1, r4
 8003bae:	4819      	ldr	r0, [pc, #100]	; (8003c14 <SX1276Init+0x80>)
 8003bb0:	f003 fbde 	bl	8007370 <TimerInit>
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8003bb4:	4e18      	ldr	r6, [pc, #96]	; (8003c18 <SX1276Init+0x84>)
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	6833      	ldr	r3, [r6, #0]
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8003bba:	2400      	movs	r4, #0
    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4798      	blx	r3
    SX1276Reset( );
 8003bc0:	f7ff fbca 	bl	8003358 <SX1276Reset>
    RxChainCalibration( );
 8003bc4:	f7ff fc6c 	bl	80034a0 <RxChainCalibration>
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7ff fdd3 	bl	8003774 <SX1276SetOpMode.part.2>
    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 8003bce:	6833      	ldr	r3, [r6, #0]
 8003bd0:	4812      	ldr	r0, [pc, #72]	; (8003c1c <SX1276Init+0x88>)
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	4798      	blx	r3
        SX1276SetModem( RadioRegsInit[i].Modem );
 8003bd6:	4d12      	ldr	r5, [pc, #72]	; (8003c20 <SX1276Init+0x8c>)
 8003bd8:	5d60      	ldrb	r0, [r4, r5]
 8003bda:	192d      	adds	r5, r5, r4
 8003bdc:	f7ff ffa0 	bl	8003b20 <SX1276SetModem>
 8003be0:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003be2:	78a9      	ldrb	r1, [r5, #2]
 8003be4:	7868      	ldrb	r0, [r5, #1]
 8003be6:	f7ff fbfe 	bl	80033e6 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003bea:	2c30      	cmp	r4, #48	; 0x30
 8003bec:	d1f3      	bne.n	8003bd6 <SX1276Init+0x42>
    SX1276SetModem( MODEM_FSK );
 8003bee:	2000      	movs	r0, #0
 8003bf0:	f7ff ff96 	bl	8003b20 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <SX1276Init+0x90>)
 8003bf8:	711a      	strb	r2, [r3, #4]
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8003bfa:	6833      	ldr	r3, [r6, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4798      	blx	r3
 8003c00:	3002      	adds	r0, #2
}
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	20000314 	.word	0x20000314
 8003c08:	0800488d 	.word	0x0800488d
 8003c0c:	200005f4 	.word	0x200005f4
 8003c10:	20000684 	.word	0x20000684
 8003c14:	20000608 	.word	0x20000608
 8003c18:	20000310 	.word	0x20000310
 8003c1c:	20000030 	.word	0x20000030
 8003c20:	08008558 	.word	0x08008558
 8003c24:	2000061c 	.word	0x2000061c

08003c28 <SX1276IsChannelFree>:
{
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	000e      	movs	r6, r1
 8003c2c:	0017      	movs	r7, r2
 8003c2e:	001d      	movs	r5, r3
 8003c30:	0004      	movs	r4, r0
    SX1276SetModem( modem );
 8003c32:	f7ff ff75 	bl	8003b20 <SX1276SetModem>
    SX1276SetChannel( freq );
 8003c36:	0030      	movs	r0, r6
 8003c38:	f7ff fbde 	bl	80033f8 <SX1276SetChannel>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003c3c:	2005      	movs	r0, #5
 8003c3e:	f7ff fdc7 	bl	80037d0 <SX1276SetOpMode>
    DelayMs( 1 );
 8003c42:	2001      	movs	r0, #1
 8003c44:	f7fe ff32 	bl	8002aac <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8003c48:	f003 fc49 	bl	80074de <TimerGetCurrentTime>
 8003c4c:	0006      	movs	r6, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003c4e:	0030      	movs	r0, r6
 8003c50:	f003 fc4b 	bl	80074ea <TimerGetElapsedTime>
 8003c54:	42a8      	cmp	r0, r5
 8003c56:	d304      	bcc.n	8003c62 <SX1276IsChannelFree+0x3a>
    bool status = true;
 8003c58:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8003c5a:	f7ff fda5 	bl	80037a8 <SX1276SetSleep>
}
 8003c5e:	0020      	movs	r0, r4
 8003c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( modem );
 8003c62:	0020      	movs	r0, r4
 8003c64:	f7ff fd64 	bl	8003730 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8003c68:	42b8      	cmp	r0, r7
 8003c6a:	ddf0      	ble.n	8003c4e <SX1276IsChannelFree+0x26>
            status = false;
 8003c6c:	2400      	movs	r4, #0
 8003c6e:	e7f4      	b.n	8003c5a <SX1276IsChannelFree+0x32>

08003c70 <SX1276Random>:
{
 8003c70:	b570      	push	{r4, r5, r6, lr}
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003c72:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8003c74:	2001      	movs	r0, #1
 8003c76:	f7ff ff53 	bl	8003b20 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003c7a:	21ff      	movs	r1, #255	; 0xff
 8003c7c:	2011      	movs	r0, #17
 8003c7e:	f7ff fbb2 	bl	80033e6 <SX1276Write>
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003c82:	2005      	movs	r0, #5
 8003c84:	f7ff fda4 	bl	80037d0 <SX1276SetOpMode>
    uint32_t rnd = 0;
 8003c88:	0025      	movs	r5, r4
        DelayMs( 1 );
 8003c8a:	2601      	movs	r6, #1
 8003c8c:	0030      	movs	r0, r6
 8003c8e:	f7fe ff0d 	bl	8002aac <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8003c92:	202c      	movs	r0, #44	; 0x2c
 8003c94:	f7ff fbfa 	bl	800348c <SX1276Read>
 8003c98:	4030      	ands	r0, r6
 8003c9a:	40a0      	lsls	r0, r4
 8003c9c:	3401      	adds	r4, #1
 8003c9e:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8003ca0:	2c20      	cmp	r4, #32
 8003ca2:	d1f3      	bne.n	8003c8c <SX1276Random+0x1c>
    SX1276SetSleep( );
 8003ca4:	f7ff fd80 	bl	80037a8 <SX1276SetSleep>
}
 8003ca8:	0028      	movs	r0, r5
 8003caa:	bd70      	pop	{r4, r5, r6, pc}

08003cac <SX1276SetRxConfig>:
{
 8003cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cae:	b08d      	sub	sp, #52	; 0x34
 8003cb0:	9306      	str	r3, [sp, #24]
 8003cb2:	ab12      	add	r3, sp, #72	; 0x48
 8003cb4:	0016      	movs	r6, r2
 8003cb6:	cb04      	ldmia	r3!, {r2}
 8003cb8:	0004      	movs	r4, r0
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	9208      	str	r2, [sp, #32]
 8003cbe:	9301      	str	r3, [sp, #4]
 8003cc0:	ab14      	add	r3, sp, #80	; 0x50
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	aa0c      	add	r2, sp, #48	; 0x30
 8003cc6:	9305      	str	r3, [sp, #20]
 8003cc8:	ab15      	add	r3, sp, #84	; 0x54
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	000d      	movs	r5, r1
 8003cce:	9302      	str	r3, [sp, #8]
 8003cd0:	ab16      	add	r3, sp, #88	; 0x58
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	9303      	str	r3, [sp, #12]
 8003cd6:	ab17      	add	r3, sp, #92	; 0x5c
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	9304      	str	r3, [sp, #16]
 8003cdc:	ab18      	add	r3, sp, #96	; 0x60
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8003ce2:	ab19      	add	r3, sp, #100	; 0x64
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ce8:	2319      	movs	r3, #25
 8003cea:	189b      	adds	r3, r3, r2
 8003cec:	7fdf      	ldrb	r7, [r3, #31]
 8003cee:	231d      	movs	r3, #29
 8003cf0:	189b      	adds	r3, r3, r2
 8003cf2:	7fdb      	ldrb	r3, [r3, #31]
 8003cf4:	9309      	str	r3, [sp, #36]	; 0x24
    SX1276SetModem( modem );
 8003cf6:	f7ff ff13 	bl	8003b20 <SX1276SetModem>
    switch( modem )
 8003cfa:	2c00      	cmp	r4, #0
 8003cfc:	d004      	beq.n	8003d08 <SX1276SetRxConfig+0x5c>
 8003cfe:	2c01      	cmp	r4, #1
 8003d00:	d100      	bne.n	8003d04 <SX1276SetRxConfig+0x58>
 8003d02:	e08b      	b.n	8003e1c <SX1276SetRxConfig+0x170>
}
 8003d04:	b00d      	add	sp, #52	; 0x34
 8003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003d08:	466a      	mov	r2, sp
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003d0a:	4cb2      	ldr	r4, [pc, #712]	; (8003fd4 <SX1276SetRxConfig+0x328>)
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003d0c:	9b08      	ldr	r3, [sp, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003d0e:	7a12      	ldrb	r2, [r2, #8]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003d10:	61a3      	str	r3, [r4, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003d12:	1ce3      	adds	r3, r4, #3
 8003d14:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8003d16:	466a      	mov	r2, sp
 8003d18:	7b12      	ldrb	r2, [r2, #12]
 8003d1a:	1d23      	adds	r3, r4, #4
 8003d1c:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003d1e:	466a      	mov	r2, sp
 8003d20:	7c12      	ldrb	r2, [r2, #16]
 8003d22:	1d63      	adds	r3, r4, #5
 8003d24:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8003d26:	2124      	movs	r1, #36	; 0x24
 8003d28:	466a      	mov	r2, sp
 8003d2a:	1852      	adds	r2, r2, r1
 8003d2c:	7812      	ldrb	r2, [r2, #0]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003d2e:	1da3      	adds	r3, r4, #6
 8003d30:	77df      	strb	r7, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8003d32:	1de3      	adds	r3, r4, #7
 8003d34:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003d36:	466b      	mov	r3, sp
 8003d38:	889b      	ldrh	r3, [r3, #4]
            SX1276.Settings.Fsk.Datarate = datarate;
 8003d3a:	61e6      	str	r6, [r4, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003d3c:	8423      	strh	r3, [r4, #32]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003d3e:	6165      	str	r5, [r4, #20]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8003d40:	0030      	movs	r0, r6
 8003d42:	f7fe f9ed 	bl	8002120 <__aeabi_ui2d>
 8003d46:	0002      	movs	r2, r0
 8003d48:	000b      	movs	r3, r1
 8003d4a:	0006      	movs	r6, r0
 8003d4c:	000f      	movs	r7, r1
 8003d4e:	2000      	movs	r0, #0
 8003d50:	49a1      	ldr	r1, [pc, #644]	; (8003fd8 <SX1276SetRxConfig+0x32c>)
 8003d52:	f7fc ffa5 	bl	8000ca0 <__aeabi_ddiv>
 8003d56:	2200      	movs	r2, #0
 8003d58:	4ba0      	ldr	r3, [pc, #640]	; (8003fdc <SX1276SetRxConfig+0x330>)
 8003d5a:	f7fd fbd5 	bl	8001508 <__aeabi_dmul>
 8003d5e:	9006      	str	r0, [sp, #24]
 8003d60:	9107      	str	r1, [sp, #28]
 8003d62:	9805      	ldr	r0, [sp, #20]
 8003d64:	f7fe f99a 	bl	800209c <__aeabi_i2d>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	000b      	movs	r3, r1
 8003d6c:	9806      	ldr	r0, [sp, #24]
 8003d6e:	9907      	ldr	r1, [sp, #28]
 8003d70:	f7fd fbca 	bl	8001508 <__aeabi_dmul>
 8003d74:	2200      	movs	r2, #0
 8003d76:	4b9a      	ldr	r3, [pc, #616]	; (8003fe0 <SX1276SetRxConfig+0x334>)
 8003d78:	f7fd fbc6 	bl	8001508 <__aeabi_dmul>
 8003d7c:	f7fc fba2 	bl	80004c4 <__aeabi_d2uiz>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003d80:	0032      	movs	r2, r6
 8003d82:	003b      	movs	r3, r7
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8003d84:	62e0      	str	r0, [r4, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8003d86:	4997      	ldr	r1, [pc, #604]	; (8003fe4 <SX1276SetRxConfig+0x338>)
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fc ff89 	bl	8000ca0 <__aeabi_ddiv>
 8003d8e:	f7fc fb99 	bl	80004c4 <__aeabi_d2uiz>
 8003d92:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8003d94:	0a21      	lsrs	r1, r4, #8
 8003d96:	2002      	movs	r0, #2
 8003d98:	f7ff fb25 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8003d9c:	b2e1      	uxtb	r1, r4
 8003d9e:	2003      	movs	r0, #3
 8003da0:	f7ff fb21 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8003da4:	0028      	movs	r0, r5
 8003da6:	f7ff faa9 	bl	80032fc <GetFskBandwidthRegValue>
 8003daa:	0001      	movs	r1, r0
 8003dac:	2012      	movs	r0, #18
 8003dae:	f7ff fb1a 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8003db2:	9808      	ldr	r0, [sp, #32]
 8003db4:	f7ff faa2 	bl	80032fc <GetFskBandwidthRegValue>
 8003db8:	0001      	movs	r1, r0
 8003dba:	2013      	movs	r0, #19
 8003dbc:	f7ff fb13 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003dc0:	9b01      	ldr	r3, [sp, #4]
 8003dc2:	2025      	movs	r0, #37	; 0x25
 8003dc4:	0a19      	lsrs	r1, r3, #8
 8003dc6:	f7ff fb0e 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003dca:	466b      	mov	r3, sp
 8003dcc:	2026      	movs	r0, #38	; 0x26
 8003dce:	7919      	ldrb	r1, [r3, #4]
 8003dd0:	f7ff fb09 	bl	80033e6 <SX1276Write>
            if( fixLen == 1 )
 8003dd4:	9b02      	ldr	r3, [sp, #8]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8003dd6:	9903      	ldr	r1, [sp, #12]
            if( fixLen == 1 )
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d100      	bne.n	8003dde <SX1276SetRxConfig+0x132>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8003ddc:	21ff      	movs	r1, #255	; 0xff
 8003dde:	2032      	movs	r0, #50	; 0x32
 8003de0:	f7ff fb01 	bl	80033e6 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003de4:	2030      	movs	r0, #48	; 0x30
 8003de6:	f7ff fb51 	bl	800348c <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 8003dea:	216f      	movs	r1, #111	; 0x6f
 8003dec:	4008      	ands	r0, r1
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003dee:	2100      	movs	r1, #0
 8003df0:	9b02      	ldr	r3, [sp, #8]
 8003df2:	428b      	cmp	r3, r1
 8003df4:	d100      	bne.n	8003df8 <SX1276SetRxConfig+0x14c>
 8003df6:	3980      	subs	r1, #128	; 0x80
                           ( crcOn << 4 ) );
 8003df8:	9b04      	ldr	r3, [sp, #16]
 8003dfa:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003dfc:	4318      	orrs	r0, r3
 8003dfe:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 8003e00:	b2c9      	uxtb	r1, r1
 8003e02:	2030      	movs	r0, #48	; 0x30
 8003e04:	f7ff faef 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003e08:	2031      	movs	r0, #49	; 0x31
 8003e0a:	f7ff fb3f 	bl	800348c <SX1276Read>
 8003e0e:	2140      	movs	r1, #64	; 0x40
 8003e10:	4301      	orrs	r1, r0
 8003e12:	2031      	movs	r0, #49	; 0x31
 8003e14:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003e16:	f7ff fae6 	bl	80033e6 <SX1276Write>
}
 8003e1a:	e773      	b.n	8003d04 <SX1276SetRxConfig+0x58>
            if( bandwidth > 2 )
 8003e1c:	2d02      	cmp	r5, #2
 8003e1e:	d900      	bls.n	8003e22 <SX1276SetRxConfig+0x176>
 8003e20:	e7fe      	b.n	8003e20 <SX1276SetRxConfig+0x174>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003e22:	4b6c      	ldr	r3, [pc, #432]	; (8003fd4 <SX1276SetRxConfig+0x328>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8003e24:	4669      	mov	r1, sp
 8003e26:	001a      	movs	r2, r3
 8003e28:	7e09      	ldrb	r1, [r1, #24]
 8003e2a:	324d      	adds	r2, #77	; 0x4d
 8003e2c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003e2e:	4669      	mov	r1, sp
 8003e30:	001a      	movs	r2, r3
 8003e32:	8889      	ldrh	r1, [r1, #4]
 8003e34:	324e      	adds	r2, #78	; 0x4e
 8003e36:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003e38:	4669      	mov	r1, sp
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	7a09      	ldrb	r1, [r1, #8]
 8003e3e:	3250      	adds	r2, #80	; 0x50
 8003e40:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8003e42:	4669      	mov	r1, sp
 8003e44:	001a      	movs	r2, r3
 8003e46:	7b09      	ldrb	r1, [r1, #12]
 8003e48:	3251      	adds	r2, #81	; 0x51
 8003e4a:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003e4c:	4669      	mov	r1, sp
 8003e4e:	001a      	movs	r2, r3
 8003e50:	7c09      	ldrb	r1, [r1, #16]
 8003e52:	3252      	adds	r2, #82	; 0x52
 8003e54:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8003e56:	2028      	movs	r0, #40	; 0x28
 8003e58:	4669      	mov	r1, sp
 8003e5a:	001a      	movs	r2, r3
 8003e5c:	1809      	adds	r1, r1, r0
 8003e5e:	7809      	ldrb	r1, [r1, #0]
 8003e60:	3253      	adds	r2, #83	; 0x53
 8003e62:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003e64:	4669      	mov	r1, sp
 8003e66:	001a      	movs	r2, r3
 8003e68:	3004      	adds	r0, #4
 8003e6a:	1809      	adds	r1, r1, r0
 8003e6c:	7809      	ldrb	r1, [r1, #0]
 8003e6e:	3254      	adds	r2, #84	; 0x54
 8003e70:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003e72:	001a      	movs	r2, r3
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003e74:	4669      	mov	r1, sp
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003e76:	3255      	adds	r2, #85	; 0x55
 8003e78:	7017      	strb	r7, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	3808      	subs	r0, #8
 8003e7e:	1809      	adds	r1, r1, r0
 8003e80:	7809      	ldrb	r1, [r1, #0]
            bandwidth += 7;
 8003e82:	1dec      	adds	r4, r5, #7
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003e84:	3256      	adds	r2, #86	; 0x56
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003e86:	645c      	str	r4, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8003e88:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003e8a:	7011      	strb	r1, [r2, #0]
            if( datarate > 12 )
 8003e8c:	2e0c      	cmp	r6, #12
 8003e8e:	d900      	bls.n	8003e92 <SX1276SetRxConfig+0x1e6>
 8003e90:	e09c      	b.n	8003fcc <SX1276SetRxConfig+0x320>
            else if( datarate < 6 )
 8003e92:	2e05      	cmp	r6, #5
 8003e94:	d800      	bhi.n	8003e98 <SX1276SetRxConfig+0x1ec>
 8003e96:	e085      	b.n	8003fa4 <SX1276SetRxConfig+0x2f8>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003e98:	2c07      	cmp	r4, #7
 8003e9a:	d17c      	bne.n	8003f96 <SX1276SetRxConfig+0x2ea>
 8003e9c:	0032      	movs	r2, r6
 8003e9e:	3a0b      	subs	r2, #11
 8003ea0:	2a01      	cmp	r2, #1
 8003ea2:	d87c      	bhi.n	8003f9e <SX1276SetRxConfig+0x2f2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	334c      	adds	r3, #76	; 0x4c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003ea8:	201d      	movs	r0, #29
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003eaa:	701a      	strb	r2, [r3, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003eac:	f7ff faee 	bl	800348c <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003eb0:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003eb2:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003eb4:	0059      	lsls	r1, r3, #1
 8003eb6:	9b02      	ldr	r3, [sp, #8]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8003eb8:	2708      	movs	r7, #8
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003eba:	4319      	orrs	r1, r3
 8003ebc:	0123      	lsls	r3, r4, #4
 8003ebe:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003ec0:	b2c9      	uxtb	r1, r1
 8003ec2:	f7ff fa90 	bl	80033e6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003ec6:	201e      	movs	r0, #30
 8003ec8:	f7ff fae0 	bl	800348c <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003ecc:	9b05      	ldr	r3, [sp, #20]
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8003ece:	4038      	ands	r0, r7
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003ed0:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003ed2:	9b04      	ldr	r3, [sp, #16]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003ed4:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003ed6:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003ed8:	4319      	orrs	r1, r3
 8003eda:	4301      	orrs	r1, r0
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003edc:	0130      	lsls	r0, r6, #4
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003ede:	4301      	orrs	r1, r0
 8003ee0:	b2c9      	uxtb	r1, r1
 8003ee2:	201e      	movs	r0, #30
 8003ee4:	f7ff fa7f 	bl	80033e6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003ee8:	2026      	movs	r0, #38	; 0x26
 8003eea:	f7ff facf 	bl	800348c <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003eee:	4d39      	ldr	r5, [pc, #228]	; (8003fd4 <SX1276SetRxConfig+0x328>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003ef0:	43b8      	bics	r0, r7
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003ef2:	002b      	movs	r3, r5
 8003ef4:	334c      	adds	r3, #76	; 0x4c
 8003ef6:	7819      	ldrb	r1, [r3, #0]
 8003ef8:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003efa:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003efc:	b2c9      	uxtb	r1, r1
 8003efe:	2026      	movs	r0, #38	; 0x26
 8003f00:	f7ff fa71 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003f04:	466b      	mov	r3, sp
 8003f06:	201f      	movs	r0, #31
 8003f08:	7d19      	ldrb	r1, [r3, #20]
 8003f0a:	f7ff fa6c 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003f0e:	9b01      	ldr	r3, [sp, #4]
 8003f10:	2020      	movs	r0, #32
 8003f12:	0a19      	lsrs	r1, r3, #8
 8003f14:	f7ff fa67 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003f18:	466b      	mov	r3, sp
 8003f1a:	2021      	movs	r0, #33	; 0x21
 8003f1c:	7919      	ldrb	r1, [r3, #4]
 8003f1e:	f7ff fa62 	bl	80033e6 <SX1276Write>
            if( fixLen == 1 )
 8003f22:	9b02      	ldr	r3, [sp, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <SX1276SetRxConfig+0x284>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8003f28:	9903      	ldr	r1, [sp, #12]
 8003f2a:	2022      	movs	r0, #34	; 0x22
 8003f2c:	f7ff fa5b 	bl	80033e6 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003f30:	002b      	movs	r3, r5
 8003f32:	3353      	adds	r3, #83	; 0x53
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00f      	beq.n	8003f5a <SX1276SetRxConfig+0x2ae>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003f3a:	2044      	movs	r0, #68	; 0x44
 8003f3c:	f7ff faa6 	bl	800348c <SX1276Read>
 8003f40:	2180      	movs	r1, #128	; 0x80
 8003f42:	4249      	negs	r1, r1
 8003f44:	4301      	orrs	r1, r0
 8003f46:	b2c9      	uxtb	r1, r1
 8003f48:	2044      	movs	r0, #68	; 0x44
 8003f4a:	f7ff fa4c 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003f4e:	002b      	movs	r3, r5
 8003f50:	3354      	adds	r3, #84	; 0x54
 8003f52:	7819      	ldrb	r1, [r3, #0]
 8003f54:	2024      	movs	r0, #36	; 0x24
 8003f56:	f7ff fa46 	bl	80033e6 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8003f5a:	2c09      	cmp	r4, #9
 8003f5c:	d128      	bne.n	8003fb0 <SX1276SetRxConfig+0x304>
 8003f5e:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <SX1276SetRxConfig+0x33c>)
 8003f60:	68aa      	ldr	r2, [r5, #8]
                SX1276Write( REG_LR_TEST36, 0x02 );
 8003f62:	2102      	movs	r1, #2
 8003f64:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d91e      	bls.n	8003fa8 <SX1276SetRxConfig+0x2fc>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8003f6a:	f7ff fa3c 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x64 );
 8003f6e:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8003f70:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_TEST36, 0x03 );
 8003f72:	f7ff fa38 	bl	80033e6 <SX1276Write>
 8003f76:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003f78:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8003f7a:	2e06      	cmp	r6, #6
 8003f7c:	d11b      	bne.n	8003fb6 <SX1276SetRxConfig+0x30a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003f7e:	f7ff fa85 	bl	800348c <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003f82:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003f84:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003f86:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003f88:	b2c9      	uxtb	r1, r1
 8003f8a:	2031      	movs	r0, #49	; 0x31
 8003f8c:	f7ff fa2b 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003f90:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003f92:	2037      	movs	r0, #55	; 0x37
 8003f94:	e73f      	b.n	8003e16 <SX1276SetRxConfig+0x16a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003f96:	2c08      	cmp	r4, #8
 8003f98:	d101      	bne.n	8003f9e <SX1276SetRxConfig+0x2f2>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003f9a:	2e0c      	cmp	r6, #12
 8003f9c:	d082      	beq.n	8003ea4 <SX1276SetRxConfig+0x1f8>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003f9e:	334c      	adds	r3, #76	; 0x4c
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	e781      	b.n	8003ea8 <SX1276SetRxConfig+0x1fc>
                datarate = 6;
 8003fa4:	2606      	movs	r6, #6
 8003fa6:	e7fa      	b.n	8003f9e <SX1276SetRxConfig+0x2f2>
                SX1276Write( REG_LR_TEST36, 0x02 );
 8003fa8:	f7ff fa1d 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_TEST3A, 0x7F );
 8003fac:	217f      	movs	r1, #127	; 0x7f
 8003fae:	e7df      	b.n	8003f70 <SX1276SetRxConfig+0x2c4>
                SX1276Write( REG_LR_TEST36, 0x03 );
 8003fb0:	2103      	movs	r1, #3
 8003fb2:	2036      	movs	r0, #54	; 0x36
 8003fb4:	e7dd      	b.n	8003f72 <SX1276SetRxConfig+0x2c6>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003fb6:	f7ff fa69 	bl	800348c <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003fba:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003fbc:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003fbe:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003fc0:	b2c9      	uxtb	r1, r1
 8003fc2:	2031      	movs	r0, #49	; 0x31
 8003fc4:	f7ff fa0f 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003fc8:	210a      	movs	r1, #10
 8003fca:	e7e2      	b.n	8003f92 <SX1276SetRxConfig+0x2e6>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003fcc:	260c      	movs	r6, #12
 8003fce:	2d02      	cmp	r5, #2
 8003fd0:	d0e5      	beq.n	8003f9e <SX1276SetRxConfig+0x2f2>
 8003fd2:	e767      	b.n	8003ea4 <SX1276SetRxConfig+0x1f8>
 8003fd4:	2000061c 	.word	0x2000061c
 8003fd8:	3ff00000 	.word	0x3ff00000
 8003fdc:	40200000 	.word	0x40200000
 8003fe0:	408f4000 	.word	0x408f4000
 8003fe4:	417e8480 	.word	0x417e8480
 8003fe8:	1f4add40 	.word	0x1f4add40

08003fec <SX1276SetTxConfig>:
{
 8003fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fee:	000e      	movs	r6, r1
 8003ff0:	b089      	sub	sp, #36	; 0x24
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	ab0e      	add	r3, sp, #56	; 0x38
 8003ff6:	cb10      	ldmia	r3!, {r4}
 8003ff8:	0005      	movs	r5, r0
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	9203      	str	r2, [sp, #12]
 8003ffe:	9304      	str	r3, [sp, #16]
 8004000:	ab10      	add	r3, sp, #64	; 0x40
 8004002:	881f      	ldrh	r7, [r3, #0]
 8004004:	ab11      	add	r3, sp, #68	; 0x44
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	ab12      	add	r3, sp, #72	; 0x48
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	9302      	str	r3, [sp, #8]
 8004010:	ab13      	add	r3, sp, #76	; 0x4c
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	9305      	str	r3, [sp, #20]
 8004016:	ab14      	add	r3, sp, #80	; 0x50
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	9307      	str	r3, [sp, #28]
 800401c:	ab15      	add	r3, sp, #84	; 0x54
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	9306      	str	r3, [sp, #24]
    SX1276SetModem( modem );
 8004022:	f7ff fd7d 	bl	8003b20 <SX1276SetModem>
    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8004026:	4b8a      	ldr	r3, [pc, #552]	; (8004250 <SX1276SetTxConfig+0x264>)
 8004028:	0030      	movs	r0, r6
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	4798      	blx	r3
    switch( modem )
 8004030:	2d00      	cmp	r5, #0
 8004032:	d003      	beq.n	800403c <SX1276SetTxConfig+0x50>
 8004034:	2d01      	cmp	r5, #1
 8004036:	d061      	beq.n	80040fc <SX1276SetTxConfig+0x110>
}
 8004038:	b009      	add	sp, #36	; 0x24
 800403a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.FixLen = fixLen;
 800403c:	4669      	mov	r1, sp
            SX1276.Settings.Fsk.Power = power;
 800403e:	4b85      	ldr	r3, [pc, #532]	; (8004254 <SX1276SetTxConfig+0x268>)
            SX1276.Settings.Fsk.Fdev = fdev;
 8004040:	9a03      	ldr	r2, [sp, #12]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004042:	7909      	ldrb	r1, [r1, #4]
            SX1276.Settings.Fsk.Fdev = fdev;
 8004044:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004046:	9a00      	ldr	r2, [sp, #0]
            SX1276.Settings.Fsk.Power = power;
 8004048:	731e      	strb	r6, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800404a:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800404c:	1cda      	adds	r2, r3, #3
 800404e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004050:	4669      	mov	r1, sp
 8004052:	7a09      	ldrb	r1, [r1, #8]
 8004054:	1d5a      	adds	r2, r3, #5
 8004056:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004058:	4669      	mov	r1, sp
 800405a:	7e09      	ldrb	r1, [r1, #24]
 800405c:	1d9a      	adds	r2, r3, #6
 800405e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004060:	9a16      	ldr	r2, [sp, #88]	; 0x58
            SX1276.Settings.Fsk.Datarate = datarate;
 8004062:	61dc      	str	r4, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004066:	841f      	strh	r7, [r3, #32]
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8004068:	9803      	ldr	r0, [sp, #12]
 800406a:	f7fe f859 	bl	8002120 <__aeabi_ui2d>
 800406e:	2200      	movs	r2, #0
 8004070:	4b79      	ldr	r3, [pc, #484]	; (8004258 <SX1276SetTxConfig+0x26c>)
 8004072:	f7fc fe15 	bl	8000ca0 <__aeabi_ddiv>
 8004076:	f7fc fa25 	bl	80004c4 <__aeabi_d2uiz>
 800407a:	b286      	uxth	r6, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 800407c:	0a31      	lsrs	r1, r6, #8
 800407e:	2004      	movs	r0, #4
 8004080:	f7ff f9b1 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8004084:	b2f1      	uxtb	r1, r6
 8004086:	2005      	movs	r0, #5
 8004088:	f7ff f9ad 	bl	80033e6 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800408c:	0020      	movs	r0, r4
 800408e:	f7fe f847 	bl	8002120 <__aeabi_ui2d>
 8004092:	000b      	movs	r3, r1
 8004094:	0002      	movs	r2, r0
 8004096:	4971      	ldr	r1, [pc, #452]	; (800425c <SX1276SetTxConfig+0x270>)
 8004098:	2000      	movs	r0, #0
 800409a:	f7fc fe01 	bl	8000ca0 <__aeabi_ddiv>
 800409e:	f7fc fa11 	bl	80004c4 <__aeabi_d2uiz>
 80040a2:	b284      	uxth	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80040a4:	0a21      	lsrs	r1, r4, #8
 80040a6:	2002      	movs	r0, #2
 80040a8:	f7ff f99d 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80040ac:	b2e1      	uxtb	r1, r4
 80040ae:	2003      	movs	r0, #3
 80040b0:	f7ff f999 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80040b4:	0a39      	lsrs	r1, r7, #8
 80040b6:	2025      	movs	r0, #37	; 0x25
 80040b8:	f7ff f995 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80040bc:	b2f9      	uxtb	r1, r7
 80040be:	2026      	movs	r0, #38	; 0x26
 80040c0:	f7ff f991 	bl	80033e6 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80040c4:	2030      	movs	r0, #48	; 0x30
 80040c6:	f7ff f9e1 	bl	800348c <SX1276Read>
                           RF_PACKETCONFIG1_CRC_MASK &
 80040ca:	216f      	movs	r1, #111	; 0x6f
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80040cc:	9b01      	ldr	r3, [sp, #4]
                           RF_PACKETCONFIG1_CRC_MASK &
 80040ce:	4001      	ands	r1, r0
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <SX1276SetTxConfig+0xec>
 80040d4:	2580      	movs	r5, #128	; 0x80
 80040d6:	426d      	negs	r5, r5
                           ( crcOn << 4 ) );
 80040d8:	9b02      	ldr	r3, [sp, #8]
 80040da:	0118      	lsls	r0, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80040dc:	4301      	orrs	r1, r0
 80040de:	4329      	orrs	r1, r5
            SX1276Write( REG_PACKETCONFIG1,
 80040e0:	b2c9      	uxtb	r1, r1
 80040e2:	2030      	movs	r0, #48	; 0x30
 80040e4:	f7ff f97f 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80040e8:	2031      	movs	r0, #49	; 0x31
 80040ea:	f7ff f9cf 	bl	800348c <SX1276Read>
 80040ee:	2140      	movs	r1, #64	; 0x40
 80040f0:	4301      	orrs	r1, r0
 80040f2:	2031      	movs	r0, #49	; 0x31
 80040f4:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80040f6:	f7ff f976 	bl	80033e6 <SX1276Write>
}
 80040fa:	e79d      	b.n	8004038 <SX1276SetTxConfig+0x4c>
            SX1276.Settings.LoRa.Power = power;
 80040fc:	4d55      	ldr	r5, [pc, #340]	; (8004254 <SX1276SetTxConfig+0x268>)
 80040fe:	002b      	movs	r3, r5
 8004100:	3340      	adds	r3, #64	; 0x40
 8004102:	701e      	strb	r6, [r3, #0]
            if( bandwidth > 2 )
 8004104:	9b00      	ldr	r3, [sp, #0]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d900      	bls.n	800410c <SX1276SetTxConfig+0x120>
 800410a:	e7fe      	b.n	800410a <SX1276SetTxConfig+0x11e>
            bandwidth += 7;
 800410c:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.LoRa.Coderate = coderate;
 800410e:	466a      	mov	r2, sp
            bandwidth += 7;
 8004110:	1dde      	adds	r6, r3, #7
            SX1276.Settings.LoRa.Coderate = coderate;
 8004112:	002b      	movs	r3, r5
 8004114:	7c12      	ldrb	r2, [r2, #16]
 8004116:	334d      	adds	r3, #77	; 0x4d
 8004118:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800411a:	002b      	movs	r3, r5
            SX1276.Settings.LoRa.FixLen = fixLen;
 800411c:	466a      	mov	r2, sp
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800411e:	334e      	adds	r3, #78	; 0x4e
 8004120:	801f      	strh	r7, [r3, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004122:	002b      	movs	r3, r5
 8004124:	7912      	ldrb	r2, [r2, #4]
 8004126:	3350      	adds	r3, #80	; 0x50
 8004128:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800412a:	466a      	mov	r2, sp
 800412c:	002b      	movs	r3, r5
 800412e:	7d12      	ldrb	r2, [r2, #20]
 8004130:	3353      	adds	r3, #83	; 0x53
 8004132:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004134:	466a      	mov	r2, sp
 8004136:	002b      	movs	r3, r5
 8004138:	7f12      	ldrb	r2, [r2, #28]
 800413a:	3354      	adds	r3, #84	; 0x54
 800413c:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800413e:	466a      	mov	r2, sp
 8004140:	002b      	movs	r3, r5
 8004142:	7a12      	ldrb	r2, [r2, #8]
 8004144:	3352      	adds	r3, #82	; 0x52
 8004146:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004148:	466a      	mov	r2, sp
 800414a:	002b      	movs	r3, r5
 800414c:	7e12      	ldrb	r2, [r2, #24]
 800414e:	3355      	adds	r3, #85	; 0x55
 8004150:	701a      	strb	r2, [r3, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8004152:	9b16      	ldr	r3, [sp, #88]	; 0x58
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004154:	646e      	str	r6, [r5, #68]	; 0x44
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8004156:	65ab      	str	r3, [r5, #88]	; 0x58
            SX1276.Settings.LoRa.Datarate = datarate;
 8004158:	64ac      	str	r4, [r5, #72]	; 0x48
 800415a:	002b      	movs	r3, r5
            if( datarate > 12 )
 800415c:	2c0c      	cmp	r4, #12
 800415e:	d872      	bhi.n	8004246 <SX1276SetTxConfig+0x25a>
            else if( datarate < 6 )
 8004160:	2c05      	cmp	r4, #5
 8004162:	d963      	bls.n	800422c <SX1276SetTxConfig+0x240>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004164:	2e07      	cmp	r6, #7
 8004166:	d15a      	bne.n	800421e <SX1276SetTxConfig+0x232>
 8004168:	0022      	movs	r2, r4
 800416a:	3a0b      	subs	r2, #11
 800416c:	2a01      	cmp	r2, #1
 800416e:	d85a      	bhi.n	8004226 <SX1276SetTxConfig+0x23a>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8004170:	2201      	movs	r2, #1
 8004172:	334c      	adds	r3, #76	; 0x4c
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004174:	701a      	strb	r2, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004176:	9b05      	ldr	r3, [sp, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00f      	beq.n	800419c <SX1276SetTxConfig+0x1b0>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800417c:	2044      	movs	r0, #68	; 0x44
 800417e:	f7ff f985 	bl	800348c <SX1276Read>
 8004182:	2180      	movs	r1, #128	; 0x80
 8004184:	4249      	negs	r1, r1
 8004186:	4301      	orrs	r1, r0
 8004188:	b2c9      	uxtb	r1, r1
 800418a:	2044      	movs	r0, #68	; 0x44
 800418c:	f7ff f92b 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8004190:	4b30      	ldr	r3, [pc, #192]	; (8004254 <SX1276SetTxConfig+0x268>)
 8004192:	2024      	movs	r0, #36	; 0x24
 8004194:	3354      	adds	r3, #84	; 0x54
 8004196:	7819      	ldrb	r1, [r3, #0]
 8004198:	f7ff f925 	bl	80033e6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800419c:	201d      	movs	r0, #29
 800419e:	f7ff f975 	bl	800348c <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80041a2:	9b04      	ldr	r3, [sp, #16]
 80041a4:	0136      	lsls	r6, r6, #4
 80041a6:	0059      	lsls	r1, r3, #1
 80041a8:	9b01      	ldr	r3, [sp, #4]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80041aa:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80041ac:	430b      	orrs	r3, r1
 80041ae:	0019      	movs	r1, r3
 80041b0:	4331      	orrs	r1, r6
            SX1276Write( REG_LR_MODEMCONFIG1,
 80041b2:	b2c9      	uxtb	r1, r1
 80041b4:	f7ff f917 	bl	80033e6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80041b8:	201e      	movs	r0, #30
 80041ba:	f7ff f967 	bl	800348c <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80041be:	9b02      	ldr	r3, [sp, #8]
 80041c0:	0121      	lsls	r1, r4, #4
 80041c2:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80041c4:	4319      	orrs	r1, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80041c6:	230b      	movs	r3, #11
 80041c8:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80041ca:	4301      	orrs	r1, r0
 80041cc:	b2c9      	uxtb	r1, r1
 80041ce:	201e      	movs	r0, #30
 80041d0:	f7ff f909 	bl	80033e6 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80041d4:	2026      	movs	r0, #38	; 0x26
 80041d6:	f7ff f959 	bl	800348c <SX1276Read>
 80041da:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80041dc:	354c      	adds	r5, #76	; 0x4c
 80041de:	7829      	ldrb	r1, [r5, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80041e0:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80041e2:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80041e4:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 80041e6:	b2c9      	uxtb	r1, r1
 80041e8:	2026      	movs	r0, #38	; 0x26
 80041ea:	f7ff f8fc 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80041ee:	0a39      	lsrs	r1, r7, #8
 80041f0:	2020      	movs	r0, #32
 80041f2:	f7ff f8f8 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80041f6:	2021      	movs	r0, #33	; 0x21
 80041f8:	b2f9      	uxtb	r1, r7
 80041fa:	f7ff f8f4 	bl	80033e6 <SX1276Write>
 80041fe:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004200:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 8004202:	2c06      	cmp	r4, #6
 8004204:	d114      	bne.n	8004230 <SX1276SetTxConfig+0x244>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004206:	f7ff f941 	bl	800348c <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800420a:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800420c:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800420e:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004210:	b2c9      	uxtb	r1, r1
 8004212:	2031      	movs	r0, #49	; 0x31
 8004214:	f7ff f8e7 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004218:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800421a:	2037      	movs	r0, #55	; 0x37
 800421c:	e76b      	b.n	80040f6 <SX1276SetTxConfig+0x10a>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800421e:	2e08      	cmp	r6, #8
 8004220:	d101      	bne.n	8004226 <SX1276SetTxConfig+0x23a>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004222:	2c0c      	cmp	r4, #12
 8004224:	d0a4      	beq.n	8004170 <SX1276SetTxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004226:	334c      	adds	r3, #76	; 0x4c
 8004228:	2200      	movs	r2, #0
 800422a:	e7a3      	b.n	8004174 <SX1276SetTxConfig+0x188>
                datarate = 6;
 800422c:	2406      	movs	r4, #6
 800422e:	e7fa      	b.n	8004226 <SX1276SetTxConfig+0x23a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004230:	f7ff f92c 	bl	800348c <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004234:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004236:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004238:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800423a:	b2c9      	uxtb	r1, r1
 800423c:	2031      	movs	r0, #49	; 0x31
 800423e:	f7ff f8d2 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004242:	210a      	movs	r1, #10
 8004244:	e7e9      	b.n	800421a <SX1276SetTxConfig+0x22e>
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004246:	9a00      	ldr	r2, [sp, #0]
 8004248:	240c      	movs	r4, #12
 800424a:	2a02      	cmp	r2, #2
 800424c:	d0eb      	beq.n	8004226 <SX1276SetTxConfig+0x23a>
 800424e:	e78f      	b.n	8004170 <SX1276SetTxConfig+0x184>
 8004250:	20000310 	.word	0x20000310
 8004254:	2000061c 	.word	0x2000061c
 8004258:	404e8480 	.word	0x404e8480
 800425c:	417e8480 	.word	0x417e8480

08004260 <SX1276SetTxContinuousWave>:
{
 8004260:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8004262:	24fa      	movs	r4, #250	; 0xfa
{
 8004264:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8004266:	00a4      	lsls	r4, r4, #2
 8004268:	4354      	muls	r4, r2
{
 800426a:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800426c:	f7ff f8c4 	bl	80033f8 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8004270:	2305      	movs	r3, #5
 8004272:	9302      	str	r3, [sp, #8]
 8004274:	2396      	movs	r3, #150	; 0x96
 8004276:	2000      	movs	r0, #0
 8004278:	015b      	lsls	r3, r3, #5
 800427a:	0002      	movs	r2, r0
 800427c:	0029      	movs	r1, r5
 800427e:	9007      	str	r0, [sp, #28]
 8004280:	9006      	str	r0, [sp, #24]
 8004282:	9005      	str	r0, [sp, #20]
 8004284:	9004      	str	r0, [sp, #16]
 8004286:	9003      	str	r0, [sp, #12]
 8004288:	9001      	str	r0, [sp, #4]
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	9408      	str	r4, [sp, #32]
 800428e:	0003      	movs	r3, r0
 8004290:	f7ff feac 	bl	8003fec <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8004294:	2031      	movs	r0, #49	; 0x31
 8004296:	f7ff f8f9 	bl	800348c <SX1276Read>
 800429a:	2540      	movs	r5, #64	; 0x40
 800429c:	43a8      	bics	r0, r5
 800429e:	b2c1      	uxtb	r1, r0
 80042a0:	2031      	movs	r0, #49	; 0x31
 80042a2:	f7ff f8a0 	bl	80033e6 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80042a6:	0028      	movs	r0, r5
 80042a8:	21f0      	movs	r1, #240	; 0xf0
 80042aa:	f7ff f89c 	bl	80033e6 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80042ae:	21a0      	movs	r1, #160	; 0xa0
 80042b0:	2041      	movs	r0, #65	; 0x41
 80042b2:	f7ff f898 	bl	80033e6 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80042b6:	4d08      	ldr	r5, [pc, #32]	; (80042d8 <SX1276SetTxContinuousWave+0x78>)
 80042b8:	0021      	movs	r1, r4
 80042ba:	0028      	movs	r0, r5
 80042bc:	f003 f8fe 	bl	80074bc <TimerSetValue>
    SX1276.Settings.State = RF_TX_RUNNING;
 80042c0:	2202      	movs	r2, #2
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 80042c4:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 80042c6:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80042c8:	f003 f85a 	bl	8007380 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80042cc:	2003      	movs	r0, #3
 80042ce:	f7ff fa7f 	bl	80037d0 <SX1276SetOpMode>
}
 80042d2:	b00b      	add	sp, #44	; 0x2c
 80042d4:	bd30      	pop	{r4, r5, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	200005f4 	.word	0x200005f4
 80042dc:	2000061c 	.word	0x2000061c

080042e0 <SX1276OnDio2Irq>:
{
 80042e0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80042e2:	4c2b      	ldr	r4, [pc, #172]	; (8004390 <SX1276OnDio2Irq+0xb0>)
 80042e4:	7921      	ldrb	r1, [r4, #4]
 80042e6:	2901      	cmp	r1, #1
 80042e8:	d002      	beq.n	80042f0 <SX1276OnDio2Irq+0x10>
 80042ea:	2902      	cmp	r1, #2
 80042ec:	d048      	beq.n	8004380 <SX1276OnDio2Irq+0xa0>
}
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80042f0:	7963      	ldrb	r3, [r4, #5]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d017      	beq.n	8004326 <SX1276OnDio2Irq+0x46>
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d1f9      	bne.n	80042ee <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 80042fa:	3453      	adds	r4, #83	; 0x53
 80042fc:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80042fe:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f4      	beq.n	80042ee <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004304:	2012      	movs	r0, #18
 8004306:	f7ff f86e 	bl	80033e6 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <SX1276OnDio2Irq+0xb4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ed      	beq.n	80042ee <SX1276OnDio2Irq+0xe>
 8004312:	695c      	ldr	r4, [r3, #20]
 8004314:	2c00      	cmp	r4, #0
 8004316:	d0ea      	beq.n	80042ee <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004318:	201c      	movs	r0, #28
 800431a:	f7ff f8b7 	bl	800348c <SX1276Read>
 800431e:	233f      	movs	r3, #63	; 0x3f
 8004320:	4018      	ands	r0, r3
 8004322:	47a0      	blx	r4
}
 8004324:	e7e3      	b.n	80042ee <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8004326:	0023      	movs	r3, r4
 8004328:	3330      	adds	r3, #48	; 0x30
 800432a:	7019      	strb	r1, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800432c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 800432e:	2d01      	cmp	r5, #1
 8004330:	d1dd      	bne.n	80042ee <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 8004332:	4819      	ldr	r0, [pc, #100]	; (8004398 <SX1276OnDio2Irq+0xb8>)
 8004334:	f003 f896 	bl	8007464 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8004338:	0023      	movs	r3, r4
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800433a:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800433c:	3331      	adds	r3, #49	; 0x31
 800433e:	701d      	strb	r5, [r3, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004340:	f7ff f8a4 	bl	800348c <SX1276Read>
 8004344:	0023      	movs	r3, r4
 8004346:	0840      	lsrs	r0, r0, #1
 8004348:	3332      	adds	r3, #50	; 0x32
 800434a:	4240      	negs	r0, r0
 800434c:	7018      	strb	r0, [r3, #0]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800434e:	201b      	movs	r0, #27
 8004350:	f7ff f89c 	bl	800348c <SX1276Read>
 8004354:	0005      	movs	r5, r0
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8004356:	201c      	movs	r0, #28
 8004358:	f7ff f898 	bl	800348c <SX1276Read>
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800435c:	022d      	lsls	r5, r5, #8
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 800435e:	4a0f      	ldr	r2, [pc, #60]	; (800439c <SX1276OnDio2Irq+0xbc>)
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8004360:	4328      	orrs	r0, r5
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8004362:	b2c3      	uxtb	r3, r0
 8004364:	4353      	muls	r3, r2
 8004366:	0a00      	lsrs	r0, r0, #8
 8004368:	4350      	muls	r0, r2
 800436a:	3380      	adds	r3, #128	; 0x80
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	1818      	adds	r0, r3, r0
 8004370:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8004372:	200c      	movs	r0, #12
 8004374:	f7ff f88a 	bl	800348c <SX1276Read>
 8004378:	3438      	adds	r4, #56	; 0x38
 800437a:	0940      	lsrs	r0, r0, #5
 800437c:	7020      	strb	r0, [r4, #0]
 800437e:	e7b6      	b.n	80042ee <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 8004380:	7963      	ldrb	r3, [r4, #5]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d1b3      	bne.n	80042ee <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004386:	3453      	adds	r4, #83	; 0x53
 8004388:	7823      	ldrb	r3, [r4, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0af      	beq.n	80042ee <SX1276OnDio2Irq+0xe>
 800438e:	e7b9      	b.n	8004304 <SX1276OnDio2Irq+0x24>
 8004390:	2000061c 	.word	0x2000061c
 8004394:	20000314 	.word	0x20000314
 8004398:	20000608 	.word	0x20000608
 800439c:	00003d09 	.word	0x00003d09

080043a0 <SX1276OnDio3Irq>:
{
 80043a0:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <SX1276OnDio3Irq+0x4c>)
 80043a4:	795d      	ldrb	r5, [r3, #5]
 80043a6:	2d01      	cmp	r5, #1
 80043a8:	d111      	bne.n	80043ce <SX1276OnDio3Irq+0x2e>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80043aa:	2012      	movs	r0, #18
 80043ac:	f7ff f86e 	bl	800348c <SX1276Read>
 80043b0:	4028      	ands	r0, r5
 80043b2:	1e04      	subs	r4, r0, #0
 80043b4:	4e0e      	ldr	r6, [pc, #56]	; (80043f0 <SX1276OnDio3Irq+0x50>)
 80043b6:	d00b      	beq.n	80043d0 <SX1276OnDio3Irq+0x30>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80043b8:	2105      	movs	r1, #5
 80043ba:	2012      	movs	r0, #18
 80043bc:	f7ff f813 	bl	80033e6 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <SX1276OnDio3Irq+0x2e>
 80043c6:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 80043c8:	0028      	movs	r0, r5
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10b      	bne.n	80043e6 <SX1276OnDio3Irq+0x46>
}
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 80043d0:	2104      	movs	r1, #4
 80043d2:	2012      	movs	r0, #18
 80043d4:	f7ff f807 	bl	80033e6 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80043d8:	6833      	ldr	r3, [r6, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f7      	beq.n	80043ce <SX1276OnDio3Irq+0x2e>
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f4      	beq.n	80043ce <SX1276OnDio3Irq+0x2e>
                RadioEvents->CadDone( false );
 80043e4:	0020      	movs	r0, r4
 80043e6:	4798      	blx	r3
}
 80043e8:	e7f1      	b.n	80043ce <SX1276OnDio3Irq+0x2e>
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	2000061c 	.word	0x2000061c
 80043f0:	20000314 	.word	0x20000314

080043f4 <SX1276WriteFifo>:
{
 80043f4:	b510      	push	{r4, lr}
 80043f6:	000a      	movs	r2, r1
    SX1276WriteBuffer( 0, buffer, size );
 80043f8:	0001      	movs	r1, r0
 80043fa:	2000      	movs	r0, #0
 80043fc:	f7fe ffd4 	bl	80033a8 <SX1276WriteBuffer>
}
 8004400:	bd10      	pop	{r4, pc}
	...

08004404 <SX1276Send>:
{
 8004404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004406:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 8004408:	4c3a      	ldr	r4, [pc, #232]	; (80044f4 <SX1276Send+0xf0>)
{
 800440a:	1dde      	adds	r6, r3, #7
 800440c:	7031      	strb	r1, [r6, #0]
    switch( SX1276.Settings.Modem )
 800440e:	7965      	ldrb	r5, [r4, #5]
{
 8004410:	0007      	movs	r7, r0
    switch( SX1276.Settings.Modem )
 8004412:	2d00      	cmp	r5, #0
 8004414:	d003      	beq.n	800441e <SX1276Send+0x1a>
 8004416:	2d01      	cmp	r5, #1
 8004418:	d02e      	beq.n	8004478 <SX1276Send+0x74>
    uint32_t txTimeout = 0;
 800441a:	2000      	movs	r0, #0
 800441c:	e01c      	b.n	8004458 <SX1276Send+0x54>
            SX1276.Settings.FskPacketHandler.Size = size;
 800441e:	7831      	ldrb	r1, [r6, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004420:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8004422:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 8004424:	1ce3      	adds	r3, r4, #3
 8004426:	7fdb      	ldrb	r3, [r3, #31]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d118      	bne.n	800445e <SX1276Send+0x5a>
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800442c:	2101      	movs	r1, #1
 800442e:	0030      	movs	r0, r6
 8004430:	f7ff ffe0 	bl	80043f4 <SX1276WriteFifo>
            if( ( size > 0 ) && ( size <= 64 ) )
 8004434:	7832      	ldrb	r2, [r6, #0]
 8004436:	1e53      	subs	r3, r2, #1
 8004438:	2b3f      	cmp	r3, #63	; 0x3f
 800443a:	d814      	bhi.n	8004466 <SX1276Send+0x62>
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800443c:	0023      	movs	r3, r4
 800443e:	333f      	adds	r3, #63	; 0x3f
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8004440:	0025      	movs	r5, r4
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8004442:	701a      	strb	r2, [r3, #0]
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8004444:	353f      	adds	r5, #63	; 0x3f
 8004446:	0038      	movs	r0, r7
 8004448:	7829      	ldrb	r1, [r5, #0]
 800444a:	f7ff ffd3 	bl	80043f4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800444e:	782b      	ldrb	r3, [r5, #0]
 8004450:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8004452:	6aa0      	ldr	r0, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004454:	189b      	adds	r3, r3, r2
 8004456:	87a3      	strh	r3, [r4, #60]	; 0x3c
    SX1276SetTx( txTimeout );
 8004458:	f7ff faf8 	bl	8003a4c <SX1276SetTx>
}
 800445c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_PAYLOADLENGTH, size );
 800445e:	2032      	movs	r0, #50	; 0x32
 8004460:	f7fe ffc1 	bl	80033e6 <SX1276Write>
 8004464:	e7e6      	b.n	8004434 <SX1276Send+0x30>
                memcpy1( RxTxBuffer, buffer, size );
 8004466:	b292      	uxth	r2, r2
 8004468:	0039      	movs	r1, r7
 800446a:	4823      	ldr	r0, [pc, #140]	; (80044f8 <SX1276Send+0xf4>)
 800446c:	f003 f8c6 	bl	80075fc <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8004470:	0023      	movs	r3, r4
 8004472:	2220      	movs	r2, #32
 8004474:	333f      	adds	r3, #63	; 0x3f
 8004476:	e7e3      	b.n	8004440 <SX1276Send+0x3c>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004478:	0023      	movs	r3, r4
 800447a:	3355      	adds	r3, #85	; 0x55
 800447c:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800447e:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004480:	2b00      	cmp	r3, #0
 8004482:	d02b      	beq.n	80044dc <SX1276Send+0xd8>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004484:	f7ff f802 	bl	800348c <SX1276Read>
 8004488:	2341      	movs	r3, #65	; 0x41
 800448a:	4398      	bics	r0, r3
 800448c:	b2c1      	uxtb	r1, r0
 800448e:	2033      	movs	r0, #51	; 0x33
 8004490:	f7fe ffa9 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004494:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004496:	203b      	movs	r0, #59	; 0x3b
 8004498:	f7fe ffa5 	bl	80033e6 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800449c:	0023      	movs	r3, r4
 800449e:	7831      	ldrb	r1, [r6, #0]
 80044a0:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80044a2:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 80044a4:	7019      	strb	r1, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80044a6:	f7fe ff9e 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80044aa:	2100      	movs	r1, #0
 80044ac:	200e      	movs	r0, #14
 80044ae:	f7fe ff9a 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80044b2:	2100      	movs	r1, #0
 80044b4:	200d      	movs	r0, #13
 80044b6:	f7fe ff96 	bl	80033e6 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80044ba:	2001      	movs	r0, #1
 80044bc:	f7fe ffe6 	bl	800348c <SX1276Read>
 80044c0:	23f8      	movs	r3, #248	; 0xf8
 80044c2:	4398      	bics	r0, r3
 80044c4:	d104      	bne.n	80044d0 <SX1276Send+0xcc>
                SX1276SetStby( );
 80044c6:	f7ff f9a5 	bl	8003814 <SX1276SetStby>
                DelayMs( 1 );
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7fe faee 	bl	8002aac <HAL_Delay>
            SX1276WriteFifo( buffer, size );
 80044d0:	0038      	movs	r0, r7
 80044d2:	7831      	ldrb	r1, [r6, #0]
 80044d4:	f7ff ff8e 	bl	80043f4 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80044d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
        break;
 80044da:	e7bd      	b.n	8004458 <SX1276Send+0x54>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80044dc:	f7fe ffd6 	bl	800348c <SX1276Read>
 80044e0:	2341      	movs	r3, #65	; 0x41
 80044e2:	0001      	movs	r1, r0
 80044e4:	4399      	bics	r1, r3
 80044e6:	4329      	orrs	r1, r5
 80044e8:	b2c9      	uxtb	r1, r1
 80044ea:	2033      	movs	r0, #51	; 0x33
 80044ec:	f7fe ff7b 	bl	80033e6 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80044f0:	211d      	movs	r1, #29
 80044f2:	e7d0      	b.n	8004496 <SX1276Send+0x92>
 80044f4:	2000061c 	.word	0x2000061c
 80044f8:	20000318 	.word	0x20000318

080044fc <SX1276ReadFifo>:
{
 80044fc:	b510      	push	{r4, lr}
 80044fe:	000a      	movs	r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 8004500:	0001      	movs	r1, r0
 8004502:	2000      	movs	r0, #0
 8004504:	f7fe ffa2 	bl	800344c <SX1276ReadBuffer>
}
 8004508:	bd10      	pop	{r4, pc}
	...

0800450c <SX1276OnDio0Irq>:
{
 800450c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    volatile uint8_t irqFlags = 0;
 800450e:	466b      	mov	r3, sp
 8004510:	1ddd      	adds	r5, r3, #7
 8004512:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8004514:	4c8b      	ldr	r4, [pc, #556]	; (8004744 <SX1276OnDio0Irq+0x238>)
    volatile uint8_t irqFlags = 0;
 8004516:	702b      	strb	r3, [r5, #0]
    switch( SX1276.Settings.State )
 8004518:	7923      	ldrb	r3, [r4, #4]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d003      	beq.n	8004526 <SX1276OnDio0Irq+0x1a>
 800451e:	2b02      	cmp	r3, #2
 8004520:	d100      	bne.n	8004524 <SX1276OnDio0Irq+0x18>
 8004522:	e0fb      	b.n	800471c <SX1276OnDio0Irq+0x210>
}
 8004524:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            switch( SX1276.Settings.Modem )
 8004526:	7963      	ldrb	r3, [r4, #5]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d024      	beq.n	8004576 <SX1276OnDio0Irq+0x6a>
 800452c:	2b01      	cmp	r3, #1
 800452e:	d1f9      	bne.n	8004524 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8004530:	2140      	movs	r1, #64	; 0x40
 8004532:	2012      	movs	r0, #18
 8004534:	f7fe ff57 	bl	80033e6 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004538:	2012      	movs	r0, #18
 800453a:	f7fe ffa7 	bl	800348c <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800453e:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8004540:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8004542:	782b      	ldrb	r3, [r5, #0]
 8004544:	4f80      	ldr	r7, [pc, #512]	; (8004748 <SX1276OnDio0Irq+0x23c>)
 8004546:	4e81      	ldr	r6, [pc, #516]	; (800474c <SX1276OnDio0Irq+0x240>)
 8004548:	420b      	tst	r3, r1
 800454a:	d100      	bne.n	800454e <SX1276OnDio0Irq+0x42>
 800454c:	e095      	b.n	800467a <SX1276OnDio0Irq+0x16e>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800454e:	2012      	movs	r0, #18
 8004550:	f7fe ff49 	bl	80033e6 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8004554:	0023      	movs	r3, r4
 8004556:	3356      	adds	r3, #86	; 0x56
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d100      	bne.n	8004560 <SX1276OnDio0Irq+0x54>
                            SX1276.Settings.State = RF_IDLE;
 800455e:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 8004560:	0038      	movs	r0, r7
 8004562:	f002 ff7f 	bl	8007464 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8004566:	6833      	ldr	r3, [r6, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0db      	beq.n	8004524 <SX1276OnDio0Irq+0x18>
 800456c:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0d8      	beq.n	8004524 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 8004572:	4798      	blx	r3
}
 8004574:	e7d6      	b.n	8004524 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8004576:	1d63      	adds	r3, r4, #5
 8004578:	7fdb      	ldrb	r3, [r3, #31]
 800457a:	4e75      	ldr	r6, [pc, #468]	; (8004750 <SX1276OnDio0Irq+0x244>)
 800457c:	4f73      	ldr	r7, [pc, #460]	; (800474c <SX1276OnDio0Irq+0x240>)
 800457e:	2b00      	cmp	r3, #0
 8004580:	d037      	beq.n	80045f2 <SX1276OnDio0Irq+0xe6>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8004582:	203f      	movs	r0, #63	; 0x3f
 8004584:	f7fe ff82 	bl	800348c <SX1276Read>
 8004588:	7028      	strb	r0, [r5, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800458a:	782b      	ldrb	r3, [r5, #0]
 800458c:	079b      	lsls	r3, r3, #30
 800458e:	d430      	bmi.n	80045f2 <SX1276OnDio0Irq+0xe6>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8004590:	210b      	movs	r1, #11
 8004592:	203e      	movs	r0, #62	; 0x3e
 8004594:	f7fe ff27 	bl	80033e6 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8004598:	2110      	movs	r1, #16
 800459a:	203f      	movs	r0, #63	; 0x3f
 800459c:	f7fe ff23 	bl	80033e6 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80045a0:	4869      	ldr	r0, [pc, #420]	; (8004748 <SX1276OnDio0Irq+0x23c>)
 80045a2:	f002 ff5f 	bl	8007464 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80045a6:	1de3      	adds	r3, r4, #7
 80045a8:	7fdd      	ldrb	r5, [r3, #31]
 80045aa:	2d00      	cmp	r5, #0
 80045ac:	d114      	bne.n	80045d8 <SX1276OnDio0Irq+0xcc>
                            TimerStop( &RxTimeoutSyncWord );
 80045ae:	0030      	movs	r0, r6
 80045b0:	f002 ff58 	bl	8007464 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80045b4:	7125      	strb	r5, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <SX1276OnDio0Irq+0xb8>
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d000      	beq.n	80045c4 <SX1276OnDio0Irq+0xb8>
                            RadioEvents->RxError( );
 80045c2:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80045c4:	0022      	movs	r2, r4
 80045c6:	2300      	movs	r3, #0
 80045c8:	3230      	adds	r2, #48	; 0x30
 80045ca:	7013      	strb	r3, [r2, #0]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80045cc:	0022      	movs	r2, r4
 80045ce:	3231      	adds	r2, #49	; 0x31
 80045d0:	7013      	strb	r3, [r2, #0]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80045d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80045d4:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 80045d6:	e7a5      	b.n	8004524 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80045d8:	200d      	movs	r0, #13
 80045da:	f7fe ff57 	bl	800348c <SX1276Read>
 80045de:	2140      	movs	r1, #64	; 0x40
 80045e0:	4301      	orrs	r1, r0
 80045e2:	b2c9      	uxtb	r1, r1
 80045e4:	200d      	movs	r0, #13
 80045e6:	f7fe fefe 	bl	80033e6 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80045ea:	0030      	movs	r0, r6
 80045ec:	f002 fec8 	bl	8007380 <TimerStart>
 80045f0:	e7e1      	b.n	80045b6 <SX1276OnDio0Irq+0xaa>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80045f2:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 80045f4:	4d57      	ldr	r5, [pc, #348]	; (8004754 <SX1276OnDio0Irq+0x248>)
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d130      	bne.n	800465c <SX1276OnDio0Irq+0x150>
 80045fa:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d12d      	bne.n	800465c <SX1276OnDio0Irq+0x150>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8004600:	1ce3      	adds	r3, r4, #3
 8004602:	7fdb      	ldrb	r3, [r3, #31]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d124      	bne.n	8004652 <SX1276OnDio0Irq+0x146>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8004608:	3101      	adds	r1, #1
 800460a:	4853      	ldr	r0, [pc, #332]	; (8004758 <SX1276OnDio0Irq+0x24c>)
 800460c:	f7ff ff76 	bl	80044fc <SX1276ReadFifo>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004610:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 8004612:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004614:	1a09      	subs	r1, r1, r0
 8004616:	b2c9      	uxtb	r1, r1
 8004618:	1828      	adds	r0, r5, r0
 800461a:	f7ff ff6f 	bl	80044fc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800461e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 8004620:	4849      	ldr	r0, [pc, #292]	; (8004748 <SX1276OnDio0Irq+0x23c>)
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004622:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 8004624:	f002 ff1e 	bl	8007464 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8004628:	1de3      	adds	r3, r4, #7
 800462a:	7fdb      	ldrb	r3, [r3, #31]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d117      	bne.n	8004660 <SX1276OnDio0Irq+0x154>
                    TimerStop( &RxTimeoutSyncWord );
 8004630:	0030      	movs	r0, r6
                    SX1276.Settings.State = RF_IDLE;
 8004632:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8004634:	f002 ff16 	bl	8007464 <TimerStop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0c2      	beq.n	80045c4 <SX1276OnDio0Irq+0xb8>
 800463e:	689e      	ldr	r6, [r3, #8]
 8004640:	2e00      	cmp	r6, #0
 8004642:	d0bf      	beq.n	80045c4 <SX1276OnDio0Irq+0xb8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8004644:	2232      	movs	r2, #50	; 0x32
 8004646:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 8004648:	56a2      	ldrsb	r2, [r4, r2]
 800464a:	2300      	movs	r3, #0
 800464c:	0028      	movs	r0, r5
 800464e:	47b0      	blx	r6
 8004650:	e7b8      	b.n	80045c4 <SX1276OnDio0Irq+0xb8>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8004652:	2032      	movs	r0, #50	; 0x32
 8004654:	f7fe ff1a 	bl	800348c <SX1276Read>
 8004658:	8760      	strh	r0, [r4, #58]	; 0x3a
 800465a:	e7d9      	b.n	8004610 <SX1276OnDio0Irq+0x104>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800465c:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800465e:	e7d9      	b.n	8004614 <SX1276OnDio0Irq+0x108>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8004660:	200d      	movs	r0, #13
 8004662:	f7fe ff13 	bl	800348c <SX1276Read>
 8004666:	2140      	movs	r1, #64	; 0x40
 8004668:	4301      	orrs	r1, r0
 800466a:	b2c9      	uxtb	r1, r1
 800466c:	200d      	movs	r0, #13
 800466e:	f7fe feba 	bl	80033e6 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 8004672:	0030      	movs	r0, r6
 8004674:	f002 fe84 	bl	8007380 <TimerStart>
 8004678:	e7de      	b.n	8004638 <SX1276OnDio0Irq+0x12c>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = SX1276Read( REG_LR_PKTSNRVALUE );
 800467a:	2019      	movs	r0, #25
 800467c:	f7fe ff06 	bl	800348c <SX1276Read>
 8004680:	0023      	movs	r3, r4
 8004682:	b240      	sxtb	r0, r0
 8004684:	3360      	adds	r3, #96	; 0x60
 8004686:	7018      	strb	r0, [r3, #0]
                        snr = ( SX1276.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8004688:	1085      	asrs	r5, r0, #2
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 800468a:	2800      	cmp	r0, #0
 800468c:	da03      	bge.n	8004696 <SX1276OnDio0Irq+0x18a>
                        snr = ( ( ~SX1276.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 800468e:	4245      	negs	r5, r0
 8004690:	10ad      	asrs	r5, r5, #2
                        snr = -snr;
 8004692:	426d      	negs	r5, r5
 8004694:	b26d      	sxtb	r5, r5
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8004696:	201a      	movs	r0, #26
 8004698:	f7fe fef8 	bl	800348c <SX1276Read>
 800469c:	b203      	sxth	r3, r0
 800469e:	492f      	ldr	r1, [pc, #188]	; (800475c <SX1276OnDio0Irq+0x250>)
 80046a0:	111b      	asrs	r3, r3, #4
                    if( snr < 0 )
 80046a2:	2d00      	cmp	r5, #0
 80046a4:	da00      	bge.n	80046a8 <SX1276OnDio0Irq+0x19c>
 80046a6:	1940      	adds	r0, r0, r5
 80046a8:	0022      	movs	r2, r4
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80046aa:	68a5      	ldr	r5, [r4, #8]
 80046ac:	3262      	adds	r2, #98	; 0x62
 80046ae:	428d      	cmp	r5, r1
 80046b0:	d932      	bls.n	8004718 <SX1276OnDio0Irq+0x20c>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80046b2:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80046b4:	18c0      	adds	r0, r0, r3
 80046b6:	8010      	strh	r0, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80046b8:	0025      	movs	r5, r4
 80046ba:	2013      	movs	r0, #19
 80046bc:	f7fe fee6 	bl	800348c <SX1276Read>
 80046c0:	3564      	adds	r5, #100	; 0x64
 80046c2:	7028      	strb	r0, [r5, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80046c4:	2010      	movs	r0, #16
 80046c6:	f7fe fee1 	bl	800348c <SX1276Read>
 80046ca:	0001      	movs	r1, r0
 80046cc:	200d      	movs	r0, #13
 80046ce:	f7fe fe8a 	bl	80033e6 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80046d2:	7829      	ldrb	r1, [r5, #0]
 80046d4:	4d1f      	ldr	r5, [pc, #124]	; (8004754 <SX1276OnDio0Irq+0x248>)
 80046d6:	0028      	movs	r0, r5
 80046d8:	f7ff ff10 	bl	80044fc <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80046dc:	0023      	movs	r3, r4
 80046de:	3356      	adds	r3, #86	; 0x56
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d100      	bne.n	80046e8 <SX1276OnDio0Irq+0x1dc>
                        SX1276.Settings.State = RF_IDLE;
 80046e6:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80046e8:	0038      	movs	r0, r7
 80046ea:	f002 febb 	bl	8007464 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80046ee:	6833      	ldr	r3, [r6, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d100      	bne.n	80046f6 <SX1276OnDio0Irq+0x1ea>
 80046f4:	e716      	b.n	8004524 <SX1276OnDio0Irq+0x18>
 80046f6:	689e      	ldr	r6, [r3, #8]
 80046f8:	2e00      	cmp	r6, #0
 80046fa:	d100      	bne.n	80046fe <SX1276OnDio0Irq+0x1f2>
 80046fc:	e712      	b.n	8004524 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80046fe:	0023      	movs	r3, r4
 8004700:	0022      	movs	r2, r4
 8004702:	3360      	adds	r3, #96	; 0x60
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	3464      	adds	r4, #100	; 0x64
 8004708:	3262      	adds	r2, #98	; 0x62
 800470a:	2100      	movs	r1, #0
 800470c:	5e52      	ldrsh	r2, [r2, r1]
 800470e:	b25b      	sxtb	r3, r3
 8004710:	7821      	ldrb	r1, [r4, #0]
 8004712:	0028      	movs	r0, r5
 8004714:	47b0      	blx	r6
 8004716:	e705      	b.n	8004524 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8004718:	38a4      	subs	r0, #164	; 0xa4
 800471a:	e7cb      	b.n	80046b4 <SX1276OnDio0Irq+0x1a8>
            TimerStop( &TxTimeoutTimer );
 800471c:	4810      	ldr	r0, [pc, #64]	; (8004760 <SX1276OnDio0Irq+0x254>)
 800471e:	f002 fea1 	bl	8007464 <TimerStop>
            switch( SX1276.Settings.Modem )
 8004722:	7963      	ldrb	r3, [r4, #5]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d103      	bne.n	8004730 <SX1276OnDio0Irq+0x224>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8004728:	2108      	movs	r1, #8
 800472a:	2012      	movs	r0, #18
 800472c:	f7fe fe5b 	bl	80033e6 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8004730:	2300      	movs	r3, #0
 8004732:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <SX1276OnDio0Irq+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d100      	bne.n	800473e <SX1276OnDio0Irq+0x232>
 800473c:	e6f2      	b.n	8004524 <SX1276OnDio0Irq+0x18>
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	e715      	b.n	800456e <SX1276OnDio0Irq+0x62>
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	2000061c 	.word	0x2000061c
 8004748:	20000684 	.word	0x20000684
 800474c:	20000314 	.word	0x20000314
 8004750:	20000608 	.word	0x20000608
 8004754:	20000318 	.word	0x20000318
 8004758:	20000656 	.word	0x20000656
 800475c:	1f4add40 	.word	0x1f4add40
 8004760:	200005f4 	.word	0x200005f4

08004764 <SX1276OnDio1Irq>:
{
 8004764:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8004766:	4c2e      	ldr	r4, [pc, #184]	; (8004820 <SX1276OnDio1Irq+0xbc>)
 8004768:	7921      	ldrb	r1, [r4, #4]
 800476a:	2901      	cmp	r1, #1
 800476c:	d002      	beq.n	8004774 <SX1276OnDio1Irq+0x10>
 800476e:	2902      	cmp	r1, #2
 8004770:	d040      	beq.n	80047f4 <SX1276OnDio1Irq+0x90>
}
 8004772:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8004774:	7963      	ldrb	r3, [r4, #5]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d013      	beq.n	80047a2 <SX1276OnDio1Irq+0x3e>
 800477a:	2b01      	cmp	r3, #1
 800477c:	d1f9      	bne.n	8004772 <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800477e:	4829      	ldr	r0, [pc, #164]	; (8004824 <SX1276OnDio1Irq+0xc0>)
 8004780:	f002 fe70 	bl	8007464 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8004784:	2180      	movs	r1, #128	; 0x80
 8004786:	2012      	movs	r0, #18
 8004788:	f7fe fe2d 	bl	80033e6 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800478c:	2300      	movs	r3, #0
 800478e:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8004790:	4b25      	ldr	r3, [pc, #148]	; (8004828 <SX1276OnDio1Irq+0xc4>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ec      	beq.n	8004772 <SX1276OnDio1Irq+0xe>
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0e9      	beq.n	8004772 <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800479e:	4798      	blx	r3
 80047a0:	e7e7      	b.n	8004772 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80047a2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <SX1276OnDio1Irq+0x58>
 80047a8:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <SX1276OnDio1Irq+0x58>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80047ae:	1ce3      	adds	r3, r4, #3
 80047b0:	7fdb      	ldrb	r3, [r3, #31]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d113      	bne.n	80047de <SX1276OnDio1Irq+0x7a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80047b6:	481d      	ldr	r0, [pc, #116]	; (800482c <SX1276OnDio1Irq+0xc8>)
 80047b8:	f7ff fea0 	bl	80044fc <SX1276ReadFifo>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.FifoThresh )
 80047bc:	0025      	movs	r5, r4
 80047be:	353e      	adds	r5, #62	; 0x3e
 80047c0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80047c2:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80047c4:	7829      	ldrb	r1, [r5, #0]
 80047c6:	1a9b      	subs	r3, r3, r2
 80047c8:	4819      	ldr	r0, [pc, #100]	; (8004830 <SX1276OnDio1Irq+0xcc>)
 80047ca:	428b      	cmp	r3, r1
 80047cc:	dd0c      	ble.n	80047e8 <SX1276OnDio1Irq+0x84>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh );
 80047ce:	1880      	adds	r0, r0, r2
 80047d0:	f7ff fe94 	bl	80044fc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80047d4:	782b      	ldrb	r3, [r5, #0]
 80047d6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 80047d8:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80047da:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 80047dc:	e7c9      	b.n	8004772 <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80047de:	2032      	movs	r0, #50	; 0x32
 80047e0:	f7fe fe54 	bl	800348c <SX1276Read>
 80047e4:	8760      	strh	r0, [r4, #58]	; 0x3a
 80047e6:	e7e9      	b.n	80047bc <SX1276OnDio1Irq+0x58>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80047e8:	b2d9      	uxtb	r1, r3
 80047ea:	1880      	adds	r0, r0, r2
 80047ec:	f7ff fe86 	bl	80044fc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80047f0:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80047f2:	e7f2      	b.n	80047da <SX1276OnDio1Irq+0x76>
            switch( SX1276.Settings.Modem )
 80047f4:	7963      	ldrb	r3, [r4, #5]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1bb      	bne.n	8004772 <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80047fa:	0025      	movs	r5, r4
 80047fc:	353f      	adds	r5, #63	; 0x3f
 80047fe:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8004800:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 8004802:	7829      	ldrb	r1, [r5, #0]
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	480a      	ldr	r0, [pc, #40]	; (8004830 <SX1276OnDio1Irq+0xcc>)
 8004808:	428b      	cmp	r3, r1
 800480a:	dd03      	ble.n	8004814 <SX1276OnDio1Irq+0xb0>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800480c:	1880      	adds	r0, r0, r2
 800480e:	f7ff fdf1 	bl	80043f4 <SX1276WriteFifo>
 8004812:	e7df      	b.n	80047d4 <SX1276OnDio1Irq+0x70>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8004814:	b2d9      	uxtb	r1, r3
 8004816:	1880      	adds	r0, r0, r2
 8004818:	f7ff fdec 	bl	80043f4 <SX1276WriteFifo>
 800481c:	e7e8      	b.n	80047f0 <SX1276OnDio1Irq+0x8c>
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	2000061c 	.word	0x2000061c
 8004824:	20000684 	.word	0x20000684
 8004828:	20000314 	.word	0x20000314
 800482c:	20000656 	.word	0x20000656
 8004830:	20000318 	.word	0x20000318

08004834 <SX1276SetMaxPayloadLength>:
{
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	0004      	movs	r4, r0
 8004838:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800483a:	f7ff f971 	bl	8003b20 <SX1276SetModem>
    switch( modem )
 800483e:	2c00      	cmp	r4, #0
 8004840:	d002      	beq.n	8004848 <SX1276SetMaxPayloadLength+0x14>
 8004842:	2c01      	cmp	r4, #1
 8004844:	d00a      	beq.n	800485c <SX1276SetMaxPayloadLength+0x28>
}
 8004846:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8004848:	4b06      	ldr	r3, [pc, #24]	; (8004864 <SX1276SetMaxPayloadLength+0x30>)
 800484a:	3303      	adds	r3, #3
 800484c:	7fdb      	ldrb	r3, [r3, #31]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f9      	bne.n	8004846 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004852:	0029      	movs	r1, r5
 8004854:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004856:	f7fe fdc6 	bl	80033e6 <SX1276Write>
}
 800485a:	e7f4      	b.n	8004846 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800485c:	0029      	movs	r1, r5
 800485e:	2023      	movs	r0, #35	; 0x23
 8004860:	e7f9      	b.n	8004856 <SX1276SetMaxPayloadLength+0x22>
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	2000061c 	.word	0x2000061c

08004868 <SX1276SetPublicNetwork>:
{
 8004868:	b510      	push	{r4, lr}
 800486a:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 800486c:	2001      	movs	r0, #1
 800486e:	f7ff f957 	bl	8003b20 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004874:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004876:	335c      	adds	r3, #92	; 0x5c
 8004878:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800487a:	2c00      	cmp	r4, #0
 800487c:	d100      	bne.n	8004880 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800487e:	2112      	movs	r1, #18
 8004880:	2039      	movs	r0, #57	; 0x39
 8004882:	f7fe fdb0 	bl	80033e6 <SX1276Write>
}
 8004886:	bd10      	pop	{r4, pc}
 8004888:	2000061c 	.word	0x2000061c

0800488c <SX1276OnTimeoutIrq>:
{
 800488c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800488e:	4c2e      	ldr	r4, [pc, #184]	; (8004948 <SX1276OnTimeoutIrq+0xbc>)
 8004890:	7923      	ldrb	r3, [r4, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d002      	beq.n	800489c <SX1276OnTimeoutIrq+0x10>
 8004896:	2b02      	cmp	r3, #2
 8004898:	d032      	beq.n	8004900 <SX1276OnTimeoutIrq+0x74>
}
 800489a:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800489c:	7963      	ldrb	r3, [r4, #5]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d120      	bne.n	80048e4 <SX1276OnTimeoutIrq+0x58>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80048a2:	0022      	movs	r2, r4
 80048a4:	3230      	adds	r2, #48	; 0x30
 80048a6:	7013      	strb	r3, [r2, #0]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80048a8:	0022      	movs	r2, r4
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80048aa:	210b      	movs	r1, #11
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80048ac:	3231      	adds	r2, #49	; 0x31
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80048ae:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80048b0:	7013      	strb	r3, [r2, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80048b2:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80048b4:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80048b6:	f7fe fd96 	bl	80033e6 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80048ba:	2110      	movs	r1, #16
 80048bc:	203f      	movs	r0, #63	; 0x3f
 80048be:	f7fe fd92 	bl	80033e6 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 80048c2:	1de3      	adds	r3, r4, #7
 80048c4:	7fdb      	ldrb	r3, [r3, #31]
 80048c6:	4d21      	ldr	r5, [pc, #132]	; (800494c <SX1276OnTimeoutIrq+0xc0>)
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d014      	beq.n	80048f6 <SX1276OnTimeoutIrq+0x6a>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80048cc:	200d      	movs	r0, #13
 80048ce:	f7fe fddd 	bl	800348c <SX1276Read>
 80048d2:	2140      	movs	r1, #64	; 0x40
 80048d4:	4301      	orrs	r1, r0
 80048d6:	b2c9      	uxtb	r1, r1
 80048d8:	200d      	movs	r0, #13
 80048da:	f7fe fd84 	bl	80033e6 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 80048de:	0028      	movs	r0, r5
 80048e0:	f002 fd4e 	bl	8007380 <TimerStart>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80048e4:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <SX1276OnTimeoutIrq+0xc4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0d6      	beq.n	800489a <SX1276OnTimeoutIrq+0xe>
 80048ec:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0d3      	beq.n	800489a <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 80048f2:	4798      	blx	r3
}
 80048f4:	e7d1      	b.n	800489a <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 80048f6:	0028      	movs	r0, r5
                SX1276.Settings.State = RF_IDLE;
 80048f8:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 80048fa:	f002 fdb3 	bl	8007464 <TimerStop>
 80048fe:	e7f1      	b.n	80048e4 <SX1276OnTimeoutIrq+0x58>
        SX1276Reset( );
 8004900:	f7fe fd2a 	bl	8003358 <SX1276Reset>
        RxChainCalibration( );
 8004904:	f7fe fdcc 	bl	80034a0 <RxChainCalibration>
 8004908:	2000      	movs	r0, #0
 800490a:	f7fe ff33 	bl	8003774 <SX1276SetOpMode.part.2>
 800490e:	2500      	movs	r5, #0
            SX1276SetModem( RadioRegsInit[i].Modem );
 8004910:	4e10      	ldr	r6, [pc, #64]	; (8004954 <SX1276OnTimeoutIrq+0xc8>)
 8004912:	5da8      	ldrb	r0, [r5, r6]
 8004914:	1976      	adds	r6, r6, r5
 8004916:	f7ff f903 	bl	8003b20 <SX1276SetModem>
 800491a:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800491c:	78b1      	ldrb	r1, [r6, #2]
 800491e:	7870      	ldrb	r0, [r6, #1]
 8004920:	f7fe fd61 	bl	80033e6 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8004924:	2d30      	cmp	r5, #48	; 0x30
 8004926:	d1f3      	bne.n	8004910 <SX1276OnTimeoutIrq+0x84>
        SX1276SetModem( MODEM_FSK );
 8004928:	2000      	movs	r0, #0
 800492a:	f7ff f8f9 	bl	8003b20 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800492e:	0023      	movs	r3, r4
 8004930:	335c      	adds	r3, #92	; 0x5c
 8004932:	7818      	ldrb	r0, [r3, #0]
 8004934:	f7ff ff98 	bl	8004868 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8004938:	2300      	movs	r3, #0
 800493a:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <SX1276OnTimeoutIrq+0xc4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0aa      	beq.n	800489a <SX1276OnTimeoutIrq+0xe>
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	e7d2      	b.n	80048ee <SX1276OnTimeoutIrq+0x62>
 8004948:	2000061c 	.word	0x2000061c
 800494c:	20000608 	.word	0x20000608
 8004950:	20000314 	.word	0x20000314
 8004954:	08008558 	.word	0x08008558

08004958 <SX1276GetWakeupTime>:
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <SX1276GetWakeupTime+0x10>)
{
 800495a:	b510      	push	{r4, lr}
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	4798      	blx	r3
 8004962:	3002      	adds	r0, #2
}
 8004964:	bd10      	pop	{r4, pc}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	20000310 	.word	0x20000310

0800496c <HAL_Init>:
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800496c:	2340      	movs	r3, #64	; 0x40
 800496e:	4a06      	ldr	r2, [pc, #24]	; (8004988 <HAL_Init+0x1c>)
{
 8004970:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004972:	6811      	ldr	r1, [r2, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004974:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004976:	430b      	orrs	r3, r1
 8004978:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800497a:	f7fe f895 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800497e:	f7fe f89b 	bl	8002ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004982:	2000      	movs	r0, #0
 8004984:	bd10      	pop	{r4, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	40022000 	.word	0x40022000

0800498c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800498c:	4a02      	ldr	r2, [pc, #8]	; (8004998 <HAL_IncTick+0xc>)
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	3301      	adds	r3, #1
 8004992:	6013      	str	r3, [r2, #0]
}
 8004994:	4770      	bx	lr
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	20000698 	.word	0x20000698

0800499c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800499c:	4b01      	ldr	r3, [pc, #4]	; (80049a4 <HAL_GetTick+0x8>)
 800499e:	6818      	ldr	r0, [r3, #0]
}
 80049a0:	4770      	bx	lr
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	20000698 	.word	0x20000698

080049a8 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80049a8:	2101      	movs	r1, #1
 80049aa:	4a02      	ldr	r2, [pc, #8]	; (80049b4 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80049ac:	6853      	ldr	r3, [r2, #4]
 80049ae:	438b      	bics	r3, r1
 80049b0:	6053      	str	r3, [r2, #4]
}
 80049b2:	4770      	bx	lr
 80049b4:	40015800 	.word	0x40015800

080049b8 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80049b8:	2102      	movs	r1, #2
 80049ba:	4a02      	ldr	r2, [pc, #8]	; (80049c4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80049bc:	6853      	ldr	r3, [r2, #4]
 80049be:	438b      	bics	r3, r1
 80049c0:	6053      	str	r3, [r2, #4]
}
 80049c2:	4770      	bx	lr
 80049c4:	40015800 	.word	0x40015800

080049c8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80049c8:	2104      	movs	r1, #4
 80049ca:	4a02      	ldr	r2, [pc, #8]	; (80049d4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80049cc:	6853      	ldr	r3, [r2, #4]
 80049ce:	438b      	bics	r3, r1
 80049d0:	6053      	str	r3, [r2, #4]
}
 80049d2:	4770      	bx	lr
 80049d4:	40015800 	.word	0x40015800

080049d8 <HAL_ADC_MspInit>:
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	0004      	movs	r4, r0
 
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80049e0:	2001      	movs	r0, #1
  if(hadc == NULL)
 80049e2:	2c00      	cmp	r4, #0
 80049e4:	d019      	beq.n	8004a1a <HAL_ADC_Init+0x3e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80049e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <HAL_ADC_Init+0x1e>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049ec:	0022      	movs	r2, r4
 80049ee:	3254      	adds	r2, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80049f0:	65e3      	str	r3, [r4, #92]	; 0x5c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049f2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80049f4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80049f6:	f7ff ffef 	bl	80049d8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80049fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049fc:	06db      	lsls	r3, r3, #27
 80049fe:	d404      	bmi.n	8004a0a <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004a00:	2204      	movs	r2, #4
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	6898      	ldr	r0, [r3, #8]
 8004a06:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004a08:	d008      	beq.n	8004a1c <HAL_ADC_Init+0x40>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    return HAL_ERROR;
 8004a0e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a10:	4313      	orrs	r3, r2
 8004a12:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 8004a14:	2300      	movs	r3, #0
 8004a16:	3454      	adds	r4, #84	; 0x54
 8004a18:	7023      	strb	r3, [r4, #0]
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
}
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8004a1c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004a1e:	4953      	ldr	r1, [pc, #332]	; (8004b6c <HAL_ADC_Init+0x190>)
 8004a20:	4011      	ands	r1, r2
 8004a22:	2202      	movs	r2, #2
 8004a24:	430a      	orrs	r2, r1
 8004a26:	65a2      	str	r2, [r4, #88]	; 0x58
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a28:	2203      	movs	r2, #3
 8004a2a:	6899      	ldr	r1, [r3, #8]
 8004a2c:	4011      	ands	r1, r2
 8004a2e:	4a50      	ldr	r2, [pc, #320]	; (8004b70 <HAL_ADC_Init+0x194>)
 8004a30:	2901      	cmp	r1, #1
 8004a32:	d102      	bne.n	8004a3a <HAL_ADC_Init+0x5e>
 8004a34:	681d      	ldr	r5, [r3, #0]
 8004a36:	420d      	tst	r5, r1
 8004a38:	d119      	bne.n	8004a6e <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004a3a:	2680      	movs	r6, #128	; 0x80
 8004a3c:	6865      	ldr	r5, [r4, #4]
 8004a3e:	05f6      	lsls	r6, r6, #23
 8004a40:	0069      	lsls	r1, r5, #1
 8004a42:	0849      	lsrs	r1, r1, #1
 8004a44:	42b1      	cmp	r1, r6
 8004a46:	d003      	beq.n	8004a50 <HAL_ADC_Init+0x74>
 8004a48:	2180      	movs	r1, #128	; 0x80
 8004a4a:	0609      	lsls	r1, r1, #24
 8004a4c:	428d      	cmp	r5, r1
 8004a4e:	d172      	bne.n	8004b36 <HAL_ADC_Init+0x15a>
 8004a50:	6919      	ldr	r1, [r3, #16]
 8004a52:	0089      	lsls	r1, r1, #2
 8004a54:	0889      	lsrs	r1, r1, #2
 8004a56:	6119      	str	r1, [r3, #16]
 8004a58:	6919      	ldr	r1, [r3, #16]
 8004a5a:	430d      	orrs	r5, r1
 8004a5c:	611d      	str	r5, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004a5e:	2518      	movs	r5, #24
 8004a60:	68d9      	ldr	r1, [r3, #12]
 8004a62:	43a9      	bics	r1, r5
 8004a64:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004a66:	68d9      	ldr	r1, [r3, #12]
 8004a68:	68a5      	ldr	r5, [r4, #8]
 8004a6a:	4329      	orrs	r1, r5
 8004a6c:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004a6e:	6811      	ldr	r1, [r2, #0]
 8004a70:	4d40      	ldr	r5, [pc, #256]	; (8004b74 <HAL_ADC_Init+0x198>)
 8004a72:	4029      	ands	r1, r5
 8004a74:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004a76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004a78:	6815      	ldr	r5, [r2, #0]
 8004a7a:	0649      	lsls	r1, r1, #25
 8004a7c:	4329      	orrs	r1, r5
 8004a7e:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004a80:	2280      	movs	r2, #128	; 0x80
 8004a82:	6899      	ldr	r1, [r3, #8]
 8004a84:	0552      	lsls	r2, r2, #21
 8004a86:	4211      	tst	r1, r2
 8004a88:	d102      	bne.n	8004a90 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004a8a:	6899      	ldr	r1, [r3, #8]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	4939      	ldr	r1, [pc, #228]	; (8004b78 <HAL_ADC_Init+0x19c>)
 8004a94:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004a96:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004a98:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004a9a:	68dd      	ldr	r5, [r3, #12]
 8004a9c:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004a9e:	2902      	cmp	r1, #2
 8004aa0:	d100      	bne.n	8004aa4 <HAL_ADC_Init+0xc8>
 8004aa2:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004aa4:	6b66      	ldr	r6, [r4, #52]	; 0x34
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004aa6:	6a21      	ldr	r1, [r4, #32]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004aa8:	4332      	orrs	r2, r6
 8004aaa:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8004aac:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004aae:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8004ab0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004ab2:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004ab4:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004ab6:	69a5      	ldr	r5, [r4, #24]
 8004ab8:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004aba:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004abc:	69e5      	ldr	r5, [r4, #28]
 8004abe:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004ac0:	432a      	orrs	r2, r5
 8004ac2:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ac4:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004ac6:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ac8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004aca:	30ff      	adds	r0, #255	; 0xff
 8004acc:	4282      	cmp	r2, r0
 8004ace:	d004      	beq.n	8004ada <HAL_ADC_Init+0xfe>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004ad0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004ad2:	68d8      	ldr	r0, [r3, #12]
 8004ad4:	432a      	orrs	r2, r5
 8004ad6:	4302      	orrs	r2, r0
 8004ad8:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ada:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004adc:	2a01      	cmp	r2, #1
 8004ade:	d106      	bne.n	8004aee <HAL_ADC_Init+0x112>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004ae0:	2900      	cmp	r1, #0
 8004ae2:	d134      	bne.n	8004b4e <HAL_ADC_Init+0x172>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004ae4:	2280      	movs	r2, #128	; 0x80
 8004ae6:	68d9      	ldr	r1, [r3, #12]
 8004ae8:	0252      	lsls	r2, r2, #9
 8004aea:	430a      	orrs	r2, r1
 8004aec:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004aee:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004af0:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004af2:	2901      	cmp	r1, #1
 8004af4:	d133      	bne.n	8004b5e <HAL_ADC_Init+0x182>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004af6:	4821      	ldr	r0, [pc, #132]	; (8004b7c <HAL_ADC_Init+0x1a0>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004af8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004afa:	4002      	ands	r2, r0
 8004afc:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004afe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004b00:	6918      	ldr	r0, [r3, #16]
 8004b02:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8004b04:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004b06:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004b08:	4302      	orrs	r2, r0
 8004b0a:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	4311      	orrs	r1, r2
 8004b10:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004b12:	2107      	movs	r1, #7
 8004b14:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8004b16:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004b18:	438a      	bics	r2, r1
 8004b1a:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004b20:	430a      	orrs	r2, r1
 8004b22:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8004b24:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8004b26:	65e0      	str	r0, [r4, #92]	; 0x5c
  ADC_STATE_CLR_SET(hadc->State,
 8004b28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b2a:	4393      	bics	r3, r2
 8004b2c:	001a      	movs	r2, r3
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4313      	orrs	r3, r2
 8004b32:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8004b34:	e771      	b.n	8004a1a <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004b36:	6919      	ldr	r1, [r3, #16]
 8004b38:	4e11      	ldr	r6, [pc, #68]	; (8004b80 <HAL_ADC_Init+0x1a4>)
 8004b3a:	0089      	lsls	r1, r1, #2
 8004b3c:	0889      	lsrs	r1, r1, #2
 8004b3e:	6119      	str	r1, [r3, #16]
 8004b40:	6811      	ldr	r1, [r2, #0]
 8004b42:	4031      	ands	r1, r6
 8004b44:	6011      	str	r1, [r2, #0]
 8004b46:	6811      	ldr	r1, [r2, #0]
 8004b48:	430d      	orrs	r5, r1
 8004b4a:	6015      	str	r5, [r2, #0]
 8004b4c:	e787      	b.n	8004a5e <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b4e:	2120      	movs	r1, #32
 8004b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b52:	4301      	orrs	r1, r0
 8004b54:	65a1      	str	r1, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b56:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	65e2      	str	r2, [r4, #92]	; 0x5c
 8004b5c:	e7c7      	b.n	8004aee <HAL_ADC_Init+0x112>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004b5e:	2101      	movs	r1, #1
 8004b60:	420a      	tst	r2, r1
 8004b62:	d0d6      	beq.n	8004b12 <HAL_ADC_Init+0x136>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	438a      	bics	r2, r1
 8004b68:	611a      	str	r2, [r3, #16]
 8004b6a:	e7d2      	b.n	8004b12 <HAL_ADC_Init+0x136>
 8004b6c:	fffffefd 	.word	0xfffffefd
 8004b70:	40012708 	.word	0x40012708
 8004b74:	fdffffff 	.word	0xfdffffff
 8004b78:	fffe0219 	.word	0xfffe0219
 8004b7c:	fffffc03 	.word	0xfffffc03
 8004b80:	ffc3ffff 	.word	0xffc3ffff

08004b84 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	da14      	bge.n	8004bb6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b8c:	230f      	movs	r3, #15
 8004b8e:	b2c0      	uxtb	r0, r0
 8004b90:	4003      	ands	r3, r0
 8004b92:	3b08      	subs	r3, #8
 8004b94:	4a11      	ldr	r2, [pc, #68]	; (8004bdc <HAL_NVIC_SetPriority+0x58>)
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	189b      	adds	r3, r3, r2
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	4010      	ands	r0, r2
 8004ba0:	4090      	lsls	r0, r2
 8004ba2:	32fc      	adds	r2, #252	; 0xfc
 8004ba4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ba6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ba8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004baa:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bac:	69dc      	ldr	r4, [r3, #28]
 8004bae:	43ac      	bics	r4, r5
 8004bb0:	4321      	orrs	r1, r4
 8004bb2:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bb6:	2503      	movs	r5, #3
 8004bb8:	0883      	lsrs	r3, r0, #2
 8004bba:	4028      	ands	r0, r5
 8004bbc:	40a8      	lsls	r0, r5
 8004bbe:	35fc      	adds	r5, #252	; 0xfc
 8004bc0:	002e      	movs	r6, r5
 8004bc2:	4a07      	ldr	r2, [pc, #28]	; (8004be0 <HAL_NVIC_SetPriority+0x5c>)
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	22c0      	movs	r2, #192	; 0xc0
 8004bca:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bcc:	4029      	ands	r1, r5
 8004bce:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bd0:	0092      	lsls	r2, r2, #2
 8004bd2:	589c      	ldr	r4, [r3, r2]
 8004bd4:	43b4      	bics	r4, r6
 8004bd6:	4321      	orrs	r1, r4
 8004bd8:	5099      	str	r1, [r3, r2]
 8004bda:	e7eb      	b.n	8004bb4 <HAL_NVIC_SetPriority+0x30>
 8004bdc:	e000ed00 	.word	0xe000ed00
 8004be0:	e000e100 	.word	0xe000e100

08004be4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004be4:	231f      	movs	r3, #31
 8004be6:	4018      	ands	r0, r3
 8004be8:	3b1e      	subs	r3, #30
 8004bea:	4083      	lsls	r3, r0
 8004bec:	4a01      	ldr	r2, [pc, #4]	; (8004bf4 <HAL_NVIC_EnableIRQ+0x10>)
 8004bee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004bf0:	4770      	bx	lr
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004bfc:	2001      	movs	r0, #1
  if(hdma == NULL)
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d02a      	beq.n	8004c58 <HAL_DMA_Init+0x60>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 8004c02:	1d98      	adds	r0, r3, #6
 8004c04:	7fc2      	ldrb	r2, [r0, #31]
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	2a00      	cmp	r2, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_DMA_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8004c0c:	1d59      	adds	r1, r3, #5
 8004c0e:	77ca      	strb	r2, [r1, #31]
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c10:	2202      	movs	r2, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c12:	6819      	ldr	r1, [r3, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c14:	77c2      	strb	r2, [r0, #31]
  tmp = hdma->Instance->CCR;
 8004c16:	680c      	ldr	r4, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c18:	4a34      	ldr	r2, [pc, #208]	; (8004cec <HAL_DMA_Init+0xf4>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c1a:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c1c:	4014      	ands	r4, r2
  tmp |=  hdma->Init.Direction        |
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c22:	691d      	ldr	r5, [r3, #16]
 8004c24:	432a      	orrs	r2, r5
 8004c26:	695d      	ldr	r5, [r3, #20]
 8004c28:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2a:	699d      	ldr	r5, [r3, #24]
 8004c2c:	432a      	orrs	r2, r5
 8004c2e:	69dd      	ldr	r5, [r3, #28]
 8004c30:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c32:	6a1d      	ldr	r5, [r3, #32]
 8004c34:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 8004c36:	4322      	orrs	r2, r4

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004c38:	600a      	str	r2, [r1, #0]
  
  /* Write to DMA channel selection register */
  if (hdma->Instance == DMA1_Channel1)
 8004c3a:	4a2d      	ldr	r2, [pc, #180]	; (8004cf0 <HAL_DMA_Init+0xf8>)
 8004c3c:	4291      	cmp	r1, r2
 8004c3e:	d10c      	bne.n	8004c5a <HAL_DMA_Init+0x62>
  {
    /*Reset request selection for DMA1 Channel1*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8004c40:	240f      	movs	r4, #15
 8004c42:	4a2c      	ldr	r2, [pc, #176]	; (8004cf4 <HAL_DMA_Init+0xfc>)
 8004c44:	6811      	ldr	r1, [r2, #0]
 8004c46:	43a1      	bics	r1, r4
 8004c48:	6011      	str	r1, [r2, #0]
    
    /* Configure request selection for DMA1 Channel1 */
    DMA1_CSELR->CSELR |= hdma->Init.Request;
 8004c4a:	6811      	ldr	r1, [r2, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
  {
    /*Reset request selection for DMA1 Channel7*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
    
    /* Configure request selection for DMA1 Channel7 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6013      	str	r3, [r2, #0]
  }
#endif   
  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c52:	2301      	movs	r3, #1
 8004c54:	77c3      	strb	r3, [r0, #31]
  
  return HAL_OK;
 8004c56:	2000      	movs	r0, #0
}  
 8004c58:	bd30      	pop	{r4, r5, pc}
  else if (hdma->Instance == DMA1_Channel2)
 8004c5a:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <HAL_DMA_Init+0x100>)
 8004c5c:	4291      	cmp	r1, r2
 8004c5e:	d108      	bne.n	8004c72 <HAL_DMA_Init+0x7a>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C2S;
 8004c60:	24f0      	movs	r4, #240	; 0xf0
 8004c62:	4a24      	ldr	r2, [pc, #144]	; (8004cf4 <HAL_DMA_Init+0xfc>)
 8004c64:	6811      	ldr	r1, [r2, #0]
 8004c66:	43a1      	bics	r1, r4
 8004c68:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << 4U);
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	6811      	ldr	r1, [r2, #0]
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	e7ed      	b.n	8004c4e <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel3)
 8004c72:	4a22      	ldr	r2, [pc, #136]	; (8004cfc <HAL_DMA_Init+0x104>)
 8004c74:	4291      	cmp	r1, r2
 8004c76:	d108      	bne.n	8004c8a <HAL_DMA_Init+0x92>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C3S;
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_DMA_Init+0xfc>)
 8004c7a:	4c21      	ldr	r4, [pc, #132]	; (8004d00 <HAL_DMA_Init+0x108>)
 8004c7c:	6811      	ldr	r1, [r2, #0]
 8004c7e:	4021      	ands	r1, r4
 8004c80:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 8U);
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	6811      	ldr	r1, [r2, #0]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	e7e1      	b.n	8004c4e <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel4)
 8004c8a:	4a1e      	ldr	r2, [pc, #120]	; (8004d04 <HAL_DMA_Init+0x10c>)
 8004c8c:	4291      	cmp	r1, r2
 8004c8e:	d108      	bne.n	8004ca2 <HAL_DMA_Init+0xaa>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C4S;
 8004c90:	4a18      	ldr	r2, [pc, #96]	; (8004cf4 <HAL_DMA_Init+0xfc>)
 8004c92:	4c1d      	ldr	r4, [pc, #116]	; (8004d08 <HAL_DMA_Init+0x110>)
 8004c94:	6811      	ldr	r1, [r2, #0]
 8004c96:	4021      	ands	r1, r4
 8004c98:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 12U);
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	6811      	ldr	r1, [r2, #0]
 8004c9e:	031b      	lsls	r3, r3, #12
 8004ca0:	e7d5      	b.n	8004c4e <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel5)
 8004ca2:	4a1a      	ldr	r2, [pc, #104]	; (8004d0c <HAL_DMA_Init+0x114>)
 8004ca4:	4291      	cmp	r1, r2
 8004ca6:	d108      	bne.n	8004cba <HAL_DMA_Init+0xc2>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C5S;
 8004ca8:	4a12      	ldr	r2, [pc, #72]	; (8004cf4 <HAL_DMA_Init+0xfc>)
 8004caa:	4c19      	ldr	r4, [pc, #100]	; (8004d10 <HAL_DMA_Init+0x118>)
 8004cac:	6811      	ldr	r1, [r2, #0]
 8004cae:	4021      	ands	r1, r4
 8004cb0:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 16U);
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	6811      	ldr	r1, [r2, #0]
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	e7c9      	b.n	8004c4e <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel6)
 8004cba:	4a16      	ldr	r2, [pc, #88]	; (8004d14 <HAL_DMA_Init+0x11c>)
 8004cbc:	4291      	cmp	r1, r2
 8004cbe:	d108      	bne.n	8004cd2 <HAL_DMA_Init+0xda>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C6S;
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <HAL_DMA_Init+0xfc>)
 8004cc2:	4c15      	ldr	r4, [pc, #84]	; (8004d18 <HAL_DMA_Init+0x120>)
 8004cc4:	6811      	ldr	r1, [r2, #0]
 8004cc6:	4021      	ands	r1, r4
 8004cc8:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 20U);
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	6811      	ldr	r1, [r2, #0]
 8004cce:	051b      	lsls	r3, r3, #20
 8004cd0:	e7bd      	b.n	8004c4e <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel7)
 8004cd2:	4a12      	ldr	r2, [pc, #72]	; (8004d1c <HAL_DMA_Init+0x124>)
 8004cd4:	4291      	cmp	r1, r2
 8004cd6:	d1bc      	bne.n	8004c52 <HAL_DMA_Init+0x5a>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
 8004cd8:	4a06      	ldr	r2, [pc, #24]	; (8004cf4 <HAL_DMA_Init+0xfc>)
 8004cda:	4c11      	ldr	r4, [pc, #68]	; (8004d20 <HAL_DMA_Init+0x128>)
 8004cdc:	6811      	ldr	r1, [r2, #0]
 8004cde:	4021      	ands	r1, r4
 8004ce0:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	6811      	ldr	r1, [r2, #0]
 8004ce6:	061b      	lsls	r3, r3, #24
 8004ce8:	e7b1      	b.n	8004c4e <HAL_DMA_Init+0x56>
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	ffffc00f 	.word	0xffffc00f
 8004cf0:	40020008 	.word	0x40020008
 8004cf4:	400200a8 	.word	0x400200a8
 8004cf8:	4002001c 	.word	0x4002001c
 8004cfc:	40020030 	.word	0x40020030
 8004d00:	fffff0ff 	.word	0xfffff0ff
 8004d04:	40020044 	.word	0x40020044
 8004d08:	ffff0fff 	.word	0xffff0fff
 8004d0c:	40020058 	.word	0x40020058
 8004d10:	fff0ffff 	.word	0xfff0ffff
 8004d14:	4002006c 	.word	0x4002006c
 8004d18:	ff0fffff 	.word	0xff0fffff
 8004d1c:	40020080 	.word	0x40020080
 8004d20:	f0ffffff 	.word	0xf0ffffff

08004d24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d26:	2502      	movs	r5, #2
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d28:	1d47      	adds	r7, r0, #5
 8004d2a:	7ffe      	ldrb	r6, [r7, #31]
 8004d2c:	002c      	movs	r4, r5
 8004d2e:	2e01      	cmp	r6, #1
 8004d30:	d01e      	beq.n	8004d70 <HAL_DMA_Start_IT+0x4c>
 8004d32:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8004d34:	1d84      	adds	r4, r0, #6
  __HAL_LOCK(hdma);
 8004d36:	77fe      	strb	r6, [r7, #31]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8004d38:	77e5      	strb	r5, [r4, #31]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d3a:	6804      	ldr	r4, [r0, #0]
 8004d3c:	6825      	ldr	r5, [r4, #0]
 8004d3e:	43b5      	bics	r5, r6
 8004d40:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d42:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d44:	6883      	ldr	r3, [r0, #8]
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d114      	bne.n	8004d74 <HAL_DMA_Start_IT+0x50>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d4a:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d4c:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8004d4e:	2302      	movs	r3, #2
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8004d56:	2304      	movs	r3, #4
 8004d58:	6822      	ldr	r2, [r4, #0]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8004d5e:	2308      	movs	r3, #8
 8004d60:	6822      	ldr	r2, [r4, #0]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 8004d66:	2301      	movs	r3, #1
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	6023      	str	r3, [r4, #0]
  return HAL_OK;    
 8004d6e:	2400      	movs	r4, #0
} 
 8004d70:	0020      	movs	r0, r4
 8004d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004d74:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004d76:	60e2      	str	r2, [r4, #12]
 8004d78:	e7e9      	b.n	8004d4e <HAL_DMA_Start_IT+0x2a>
	...

08004d7c <HAL_DMA_Abort_IT>:
{  
 8004d7c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d7e:	1d84      	adds	r4, r0, #6
 8004d80:	7fe3      	ldrb	r3, [r4, #31]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d004      	beq.n	8004d90 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d86:	2304      	movs	r3, #4
 8004d88:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004d8a:	3b03      	subs	r3, #3
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d90:	210e      	movs	r1, #14
 8004d92:	6802      	ldr	r2, [r0, #0]
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	438b      	bics	r3, r1
 8004d98:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	6811      	ldr	r1, [r2, #0]
 8004d9e:	4399      	bics	r1, r3
 8004da0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004da2:	4917      	ldr	r1, [pc, #92]	; (8004e00 <HAL_DMA_Abort_IT+0x84>)
 8004da4:	428a      	cmp	r2, r1
 8004da6:	d011      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x50>
 8004da8:	4916      	ldr	r1, [pc, #88]	; (8004e04 <HAL_DMA_Abort_IT+0x88>)
 8004daa:	330f      	adds	r3, #15
 8004dac:	428a      	cmp	r2, r1
 8004dae:	d00d      	beq.n	8004dcc <HAL_DMA_Abort_IT+0x50>
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <HAL_DMA_Abort_IT+0x8c>)
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d018      	beq.n	8004de8 <HAL_DMA_Abort_IT+0x6c>
 8004db6:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <HAL_DMA_Abort_IT+0x90>)
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d018      	beq.n	8004dee <HAL_DMA_Abort_IT+0x72>
 8004dbc:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <HAL_DMA_Abort_IT+0x94>)
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d018      	beq.n	8004df4 <HAL_DMA_Abort_IT+0x78>
 8004dc2:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <HAL_DMA_Abort_IT+0x98>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d018      	beq.n	8004dfa <HAL_DMA_Abort_IT+0x7e>
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	045b      	lsls	r3, r3, #17
 8004dcc:	4a12      	ldr	r2, [pc, #72]	; (8004e18 <HAL_DMA_Abort_IT+0x9c>)
 8004dce:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	77e3      	strb	r3, [r4, #31]
    __HAL_UNLOCK(hdma);
 8004dd4:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 8004dd6:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8004dd8:	1d43      	adds	r3, r0, #5
 8004dda:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8004ddc:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8004dde:	42a2      	cmp	r2, r4
 8004de0:	d0d4      	beq.n	8004d8c <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8004de2:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	0023      	movs	r3, r4
 8004de6:	e7d1      	b.n	8004d8c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	e7ee      	b.n	8004dcc <HAL_DMA_Abort_IT+0x50>
 8004dee:	2380      	movs	r3, #128	; 0x80
 8004df0:	015b      	lsls	r3, r3, #5
 8004df2:	e7eb      	b.n	8004dcc <HAL_DMA_Abort_IT+0x50>
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	025b      	lsls	r3, r3, #9
 8004df8:	e7e8      	b.n	8004dcc <HAL_DMA_Abort_IT+0x50>
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	035b      	lsls	r3, r3, #13
 8004dfe:	e7e5      	b.n	8004dcc <HAL_DMA_Abort_IT+0x50>
 8004e00:	40020008 	.word	0x40020008
 8004e04:	4002001c 	.word	0x4002001c
 8004e08:	40020030 	.word	0x40020030
 8004e0c:	40020044 	.word	0x40020044
 8004e10:	40020058 	.word	0x40020058
 8004e14:	4002006c 	.word	0x4002006c
 8004e18:	40020000 	.word	0x40020000

08004e1c <HAL_DMA_IRQHandler>:
{        
 8004e1c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8004e1e:	6803      	ldr	r3, [r0, #0]
 8004e20:	4d5b      	ldr	r5, [pc, #364]	; (8004f90 <HAL_DMA_IRQHandler+0x174>)
 8004e22:	4e5c      	ldr	r6, [pc, #368]	; (8004f94 <HAL_DMA_IRQHandler+0x178>)
{        
 8004e24:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8004e26:	6829      	ldr	r1, [r5, #0]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	42b3      	cmp	r3, r6
 8004e2c:	d015      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x3e>
 8004e2e:	485a      	ldr	r0, [pc, #360]	; (8004f98 <HAL_DMA_IRQHandler+0x17c>)
 8004e30:	3278      	adds	r2, #120	; 0x78
 8004e32:	4283      	cmp	r3, r0
 8004e34:	d011      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x3e>
 8004e36:	4a59      	ldr	r2, [pc, #356]	; (8004f9c <HAL_DMA_IRQHandler+0x180>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <HAL_DMA_IRQHandler+0x22>
 8004e3c:	e084      	b.n	8004f48 <HAL_DMA_IRQHandler+0x12c>
 8004e3e:	4a58      	ldr	r2, [pc, #352]	; (8004fa0 <HAL_DMA_IRQHandler+0x184>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d100      	bne.n	8004e46 <HAL_DMA_IRQHandler+0x2a>
 8004e44:	e083      	b.n	8004f4e <HAL_DMA_IRQHandler+0x132>
 8004e46:	4a57      	ldr	r2, [pc, #348]	; (8004fa4 <HAL_DMA_IRQHandler+0x188>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d100      	bne.n	8004e4e <HAL_DMA_IRQHandler+0x32>
 8004e4c:	e082      	b.n	8004f54 <HAL_DMA_IRQHandler+0x138>
 8004e4e:	4a56      	ldr	r2, [pc, #344]	; (8004fa8 <HAL_DMA_IRQHandler+0x18c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d100      	bne.n	8004e56 <HAL_DMA_IRQHandler+0x3a>
 8004e54:	e081      	b.n	8004f5a <HAL_DMA_IRQHandler+0x13e>
 8004e56:	2280      	movs	r2, #128	; 0x80
 8004e58:	0512      	lsls	r2, r2, #20
 8004e5a:	4211      	tst	r1, r2
 8004e5c:	d016      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x70>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004e5e:	2008      	movs	r0, #8
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	4201      	tst	r1, r0
 8004e64:	d012      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x70>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8004e66:	6819      	ldr	r1, [r3, #0]
 8004e68:	4381      	bics	r1, r0
 8004e6a:	6019      	str	r1, [r3, #0]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e6c:	2301      	movs	r3, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004e6e:	606a      	str	r2, [r5, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004e72:	4313      	orrs	r3, r2
      hdma->State = HAL_DMA_STATE_ERROR;    
 8004e74:	2204      	movs	r2, #4
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e76:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma->State = HAL_DMA_STATE_ERROR;    
 8004e78:	1da3      	adds	r3, r4, #6
 8004e7a:	77da      	strb	r2, [r3, #31]
      __HAL_UNLOCK(hdma); 
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	1d63      	adds	r3, r4, #5
 8004e80:	77da      	strb	r2, [r3, #31]
      if (hdma->XferErrorCallback != NULL)
 8004e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d001      	beq.n	8004e8c <HAL_DMA_IRQHandler+0x70>
        hdma->XferErrorCallback(hdma);
 8004e88:	0020      	movs	r0, r4
 8004e8a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	6829      	ldr	r1, [r5, #0]
 8004e90:	2204      	movs	r2, #4
 8004e92:	42b3      	cmp	r3, r6
 8004e94:	d011      	beq.n	8004eba <HAL_DMA_IRQHandler+0x9e>
 8004e96:	4840      	ldr	r0, [pc, #256]	; (8004f98 <HAL_DMA_IRQHandler+0x17c>)
 8004e98:	323c      	adds	r2, #60	; 0x3c
 8004e9a:	4283      	cmp	r3, r0
 8004e9c:	d00d      	beq.n	8004eba <HAL_DMA_IRQHandler+0x9e>
 8004e9e:	4a3f      	ldr	r2, [pc, #252]	; (8004f9c <HAL_DMA_IRQHandler+0x180>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d05d      	beq.n	8004f60 <HAL_DMA_IRQHandler+0x144>
 8004ea4:	4a3e      	ldr	r2, [pc, #248]	; (8004fa0 <HAL_DMA_IRQHandler+0x184>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d05d      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x14a>
 8004eaa:	4a3e      	ldr	r2, [pc, #248]	; (8004fa4 <HAL_DMA_IRQHandler+0x188>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d05d      	beq.n	8004f6c <HAL_DMA_IRQHandler+0x150>
 8004eb0:	4a3d      	ldr	r2, [pc, #244]	; (8004fa8 <HAL_DMA_IRQHandler+0x18c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d05d      	beq.n	8004f72 <HAL_DMA_IRQHandler+0x156>
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	04d2      	lsls	r2, r2, #19
 8004eba:	4211      	tst	r1, r2
 8004ebc:	d012      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xc8>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ebe:	2004      	movs	r0, #4
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	4201      	tst	r1, r0
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xc8>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ec6:	6819      	ldr	r1, [r3, #0]
 8004ec8:	0689      	lsls	r1, r1, #26
 8004eca:	d402      	bmi.n	8004ed2 <HAL_DMA_IRQHandler+0xb6>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	4381      	bics	r1, r0
 8004ed0:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004ed2:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8004ed4:	2205      	movs	r2, #5
 8004ed6:	1da3      	adds	r3, r4, #6
 8004ed8:	77da      	strb	r2, [r3, #31]
      if(hdma->XferHalfCpltCallback != NULL)
 8004eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0xc8>
        hdma->XferHalfCpltCallback(hdma);
 8004ee0:	0020      	movs	r0, r4
 8004ee2:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	6829      	ldr	r1, [r5, #0]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	42b3      	cmp	r3, r6
 8004eec:	d011      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xf6>
 8004eee:	482a      	ldr	r0, [pc, #168]	; (8004f98 <HAL_DMA_IRQHandler+0x17c>)
 8004ef0:	321e      	adds	r2, #30
 8004ef2:	4283      	cmp	r3, r0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_DMA_IRQHandler+0xf6>
 8004ef6:	4a29      	ldr	r2, [pc, #164]	; (8004f9c <HAL_DMA_IRQHandler+0x180>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d03d      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x15c>
 8004efc:	4a28      	ldr	r2, [pc, #160]	; (8004fa0 <HAL_DMA_IRQHandler+0x184>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d03d      	beq.n	8004f7e <HAL_DMA_IRQHandler+0x162>
 8004f02:	4a28      	ldr	r2, [pc, #160]	; (8004fa4 <HAL_DMA_IRQHandler+0x188>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d03d      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x168>
 8004f08:	4a27      	ldr	r2, [pc, #156]	; (8004fa8 <HAL_DMA_IRQHandler+0x18c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d03d      	beq.n	8004f8a <HAL_DMA_IRQHandler+0x16e>
 8004f0e:	2280      	movs	r2, #128	; 0x80
 8004f10:	0492      	lsls	r2, r2, #18
 8004f12:	4211      	tst	r1, r2
 8004f14:	d017      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x12a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f16:	2002      	movs	r0, #2
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	4201      	tst	r1, r0
 8004f1c:	d013      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x12a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	0689      	lsls	r1, r1, #26
 8004f22:	d402      	bmi.n	8004f2a <HAL_DMA_IRQHandler+0x10e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	4381      	bics	r1, r0
 8004f28:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004f2a:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY;    
 8004f2c:	2201      	movs	r2, #1
      hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 8004f2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f30:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma->State = HAL_DMA_STATE_READY;    
 8004f32:	1da3      	adds	r3, r4, #6
 8004f34:	77da      	strb	r2, [r3, #31]
      __HAL_UNLOCK(hdma);
 8004f36:	2200      	movs	r2, #0
 8004f38:	1d63      	adds	r3, r4, #5
 8004f3a:	77da      	strb	r2, [r3, #31]
      if(hdma->XferCpltCallback != NULL)
 8004f3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d001      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x12a>
        hdma->XferCpltCallback(hdma);
 8004f42:	0020      	movs	r0, r4
 8004f44:	4798      	blx	r3
}  
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8004f48:	2280      	movs	r2, #128	; 0x80
 8004f4a:	0112      	lsls	r2, r2, #4
 8004f4c:	e785      	b.n	8004e5a <HAL_DMA_IRQHandler+0x3e>
 8004f4e:	2280      	movs	r2, #128	; 0x80
 8004f50:	0212      	lsls	r2, r2, #8
 8004f52:	e782      	b.n	8004e5a <HAL_DMA_IRQHandler+0x3e>
 8004f54:	2280      	movs	r2, #128	; 0x80
 8004f56:	0312      	lsls	r2, r2, #12
 8004f58:	e77f      	b.n	8004e5a <HAL_DMA_IRQHandler+0x3e>
 8004f5a:	2280      	movs	r2, #128	; 0x80
 8004f5c:	0412      	lsls	r2, r2, #16
 8004f5e:	e77c      	b.n	8004e5a <HAL_DMA_IRQHandler+0x3e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8004f60:	2280      	movs	r2, #128	; 0x80
 8004f62:	00d2      	lsls	r2, r2, #3
 8004f64:	e7a9      	b.n	8004eba <HAL_DMA_IRQHandler+0x9e>
 8004f66:	2280      	movs	r2, #128	; 0x80
 8004f68:	01d2      	lsls	r2, r2, #7
 8004f6a:	e7a6      	b.n	8004eba <HAL_DMA_IRQHandler+0x9e>
 8004f6c:	2280      	movs	r2, #128	; 0x80
 8004f6e:	02d2      	lsls	r2, r2, #11
 8004f70:	e7a3      	b.n	8004eba <HAL_DMA_IRQHandler+0x9e>
 8004f72:	2280      	movs	r2, #128	; 0x80
 8004f74:	03d2      	lsls	r2, r2, #15
 8004f76:	e7a0      	b.n	8004eba <HAL_DMA_IRQHandler+0x9e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8004f78:	2280      	movs	r2, #128	; 0x80
 8004f7a:	0092      	lsls	r2, r2, #2
 8004f7c:	e7c9      	b.n	8004f12 <HAL_DMA_IRQHandler+0xf6>
 8004f7e:	2280      	movs	r2, #128	; 0x80
 8004f80:	0192      	lsls	r2, r2, #6
 8004f82:	e7c6      	b.n	8004f12 <HAL_DMA_IRQHandler+0xf6>
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	0292      	lsls	r2, r2, #10
 8004f88:	e7c3      	b.n	8004f12 <HAL_DMA_IRQHandler+0xf6>
 8004f8a:	2280      	movs	r2, #128	; 0x80
 8004f8c:	0392      	lsls	r2, r2, #14
 8004f8e:	e7c0      	b.n	8004f12 <HAL_DMA_IRQHandler+0xf6>
 8004f90:	40020000 	.word	0x40020000
 8004f94:	40020008 	.word	0x40020008
 8004f98:	4002001c 	.word	0x4002001c
 8004f9c:	40020030 	.word	0x40020030
 8004fa0:	40020044 	.word	0x40020044
 8004fa4:	40020058 	.word	0x40020058
 8004fa8:	4002006c 	.word	0x4002006c

08004fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fac:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004fae:	4a55      	ldr	r2, [pc, #340]	; (8005104 <HAL_GPIO_Init+0x158>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8004fb0:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004fb2:	1882      	adds	r2, r0, r2
 8004fb4:	1e54      	subs	r4, r2, #1
 8004fb6:	41a2      	sbcs	r2, r4
{
 8004fb8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8004fba:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8004fbc:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004fbe:	3205      	adds	r2, #5
 8004fc0:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004fc2:	9a01      	ldr	r2, [sp, #4]
 8004fc4:	40da      	lsrs	r2, r3
 8004fc6:	d101      	bne.n	8004fcc <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8004fc8:	b005      	add	sp, #20
 8004fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004fcc:	2501      	movs	r5, #1
 8004fce:	409d      	lsls	r5, r3
 8004fd0:	9a01      	ldr	r2, [sp, #4]
 8004fd2:	402a      	ands	r2, r5
 8004fd4:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8004fd6:	d100      	bne.n	8004fda <HAL_GPIO_Init+0x2e>
 8004fd8:	e091      	b.n	80050fe <HAL_GPIO_Init+0x152>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004fda:	684a      	ldr	r2, [r1, #4]
 8004fdc:	4694      	mov	ip, r2
 8004fde:	2210      	movs	r2, #16
 8004fe0:	4664      	mov	r4, ip
 8004fe2:	4394      	bics	r4, r2
 8004fe4:	0022      	movs	r2, r4
 8004fe6:	3c01      	subs	r4, #1
 8004fe8:	2a02      	cmp	r2, #2
 8004fea:	d11f      	bne.n	800502c <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004fec:	2407      	movs	r4, #7
 8004fee:	270f      	movs	r7, #15
 8004ff0:	401c      	ands	r4, r3
 8004ff2:	00a4      	lsls	r4, r4, #2
 8004ff4:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 8004ff6:	08da      	lsrs	r2, r3, #3
 8004ff8:	0092      	lsls	r2, r2, #2
 8004ffa:	1882      	adds	r2, r0, r2
 8004ffc:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004ffe:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8005000:	690f      	ldr	r7, [r1, #16]
 8005002:	40a7      	lsls	r7, r4
 8005004:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8005006:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005008:	2403      	movs	r4, #3
 800500a:	005e      	lsls	r6, r3, #1
 800500c:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 800500e:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005010:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005012:	68cc      	ldr	r4, [r1, #12]
 8005014:	40b4      	lsls	r4, r6
 8005016:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 8005018:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800501a:	4662      	mov	r2, ip
 800501c:	06d2      	lsls	r2, r2, #27
 800501e:	0fd2      	lsrs	r2, r2, #31
 8005020:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 8005022:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005024:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005026:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8005028:	6042      	str	r2, [r0, #4]
 800502a:	e001      	b.n	8005030 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800502c:	2c01      	cmp	r4, #1
 800502e:	d9eb      	bls.n	8005008 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005030:	2603      	movs	r6, #3
 8005032:	0034      	movs	r4, r6
 8005034:	005d      	lsls	r5, r3, #1
 8005036:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005038:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800503a:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800503c:	4032      	ands	r2, r6
 800503e:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 8005040:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005042:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005044:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8005046:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 8005048:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800504a:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800504c:	688a      	ldr	r2, [r1, #8]
 800504e:	40aa      	lsls	r2, r5
 8005050:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005052:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 8005054:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8005056:	00d2      	lsls	r2, r2, #3
 8005058:	d551      	bpl.n	80050fe <HAL_GPIO_Init+0x152>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505a:	2501      	movs	r5, #1
 800505c:	4c2a      	ldr	r4, [pc, #168]	; (8005108 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800505e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005060:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005062:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005064:	001d      	movs	r5, r3
 8005066:	4035      	ands	r5, r6
 8005068:	00ad      	lsls	r5, r5, #2
 800506a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800506c:	6362      	str	r2, [r4, #52]	; 0x34
 800506e:	4a27      	ldr	r2, [pc, #156]	; (800510c <HAL_GPIO_Init+0x160>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8005070:	089c      	lsrs	r4, r3, #2
 8005072:	00a4      	lsls	r4, r4, #2
 8005074:	18a4      	adds	r4, r4, r2
 8005076:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8005078:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800507a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800507c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800507e:	05ff      	lsls	r7, r7, #23
 8005080:	2200      	movs	r2, #0
 8005082:	42b8      	cmp	r0, r7
 8005084:	d010      	beq.n	80050a8 <HAL_GPIO_Init+0xfc>
 8005086:	4f22      	ldr	r7, [pc, #136]	; (8005110 <HAL_GPIO_Init+0x164>)
 8005088:	3201      	adds	r2, #1
 800508a:	42b8      	cmp	r0, r7
 800508c:	d00c      	beq.n	80050a8 <HAL_GPIO_Init+0xfc>
 800508e:	4f21      	ldr	r7, [pc, #132]	; (8005114 <HAL_GPIO_Init+0x168>)
 8005090:	3201      	adds	r2, #1
 8005092:	42b8      	cmp	r0, r7
 8005094:	d008      	beq.n	80050a8 <HAL_GPIO_Init+0xfc>
 8005096:	4f20      	ldr	r7, [pc, #128]	; (8005118 <HAL_GPIO_Init+0x16c>)
 8005098:	0032      	movs	r2, r6
 800509a:	42b8      	cmp	r0, r7
 800509c:	d004      	beq.n	80050a8 <HAL_GPIO_Init+0xfc>
 800509e:	4e1f      	ldr	r6, [pc, #124]	; (800511c <HAL_GPIO_Init+0x170>)
 80050a0:	3201      	adds	r2, #1
 80050a2:	42b0      	cmp	r0, r6
 80050a4:	d000      	beq.n	80050a8 <HAL_GPIO_Init+0xfc>
 80050a6:	9a03      	ldr	r2, [sp, #12]
 80050a8:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050aa:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050ac:	9d02      	ldr	r5, [sp, #8]
 80050ae:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050b0:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 80050b4:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 80050b6:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80050b8:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 80050ba:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80050bc:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80050be:	03ff      	lsls	r7, r7, #15
 80050c0:	d401      	bmi.n	80050c6 <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 80050c2:	0035      	movs	r5, r6
 80050c4:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050c6:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80050c8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80050ca:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80050cc:	9d00      	ldr	r5, [sp, #0]
 80050ce:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050d0:	03bf      	lsls	r7, r7, #14
 80050d2:	d401      	bmi.n	80050d8 <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 80050d4:	0035      	movs	r5, r6
 80050d6:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050d8:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80050da:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 80050dc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80050de:	9d00      	ldr	r5, [sp, #0]
 80050e0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050e2:	02ff      	lsls	r7, r7, #11
 80050e4:	d401      	bmi.n	80050ea <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 80050e6:	0035      	movs	r5, r6
 80050e8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050ea:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80050ec:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80050ee:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80050f0:	9e00      	ldr	r6, [sp, #0]
 80050f2:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050f4:	02bf      	lsls	r7, r7, #10
 80050f6:	d401      	bmi.n	80050fc <HAL_GPIO_Init+0x150>
        temp &= ~((uint32_t)iocurrent);
 80050f8:	4025      	ands	r5, r4
 80050fa:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80050fc:	60d6      	str	r6, [r2, #12]
    position++;
 80050fe:	3301      	adds	r3, #1
 8005100:	e75f      	b.n	8004fc2 <HAL_GPIO_Init+0x16>
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	afffe400 	.word	0xafffe400
 8005108:	40021000 	.word	0x40021000
 800510c:	40010000 	.word	0x40010000
 8005110:	50000400 	.word	0x50000400
 8005114:	50000800 	.word	0x50000800
 8005118:	50000c00 	.word	0x50000c00
 800511c:	50001000 	.word	0x50001000
 8005120:	40010400 	.word	0x40010400

08005124 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005124:	2a00      	cmp	r2, #0
 8005126:	d001      	beq.n	800512c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005128:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800512a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800512c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800512e:	e7fc      	b.n	800512a <HAL_GPIO_WritePin+0x6>

08005130 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8005132:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	4210      	tst	r0, r2
 8005138:	d002      	beq.n	8005140 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800513a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800513c:	f7fd fd08 	bl	8002b50 <HAL_GPIO_EXTI_Callback>
  }
}
 8005140:	bd10      	pop	{r4, pc}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	40010400 	.word	0x40010400

08005148 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005148:	2110      	movs	r1, #16
 800514a:	4a02      	ldr	r2, [pc, #8]	; (8005154 <HAL_PWR_DisablePVD+0xc>)
 800514c:	6813      	ldr	r3, [r2, #0]
 800514e:	438b      	bics	r3, r1
 8005150:	6013      	str	r3, [r2, #0]
}
 8005152:	4770      	bx	lr
 8005154:	40007000 	.word	0x40007000

08005158 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	4a03      	ldr	r2, [pc, #12]	; (8005168 <HAL_PWREx_EnableFastWakeUp+0x10>)
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	6811      	ldr	r1, [r2, #0]
 8005160:	430b      	orrs	r3, r1
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	4770      	bx	lr
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	40007000 	.word	0x40007000

0800516c <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	4a03      	ldr	r2, [pc, #12]	; (800517c <HAL_PWREx_EnableUltraLowPower+0x10>)
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	6811      	ldr	r1, [r2, #0]
 8005174:	430b      	orrs	r3, r1
 8005176:	6013      	str	r3, [r2, #0]
}
 8005178:	4770      	bx	lr
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	40007000 	.word	0x40007000

08005180 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005180:	22f0      	movs	r2, #240	; 0xf0
 8005182:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 8005184:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005186:	68d9      	ldr	r1, [r3, #12]
 8005188:	4211      	tst	r1, r2
 800518a:	d00b      	beq.n	80051a4 <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800518c:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800518e:	2101      	movs	r1, #1
 8005190:	4814      	ldr	r0, [pc, #80]	; (80051e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005192:	6802      	ldr	r2, [r0, #0]
 8005194:	438a      	bics	r2, r1
 8005196:	431a      	orrs	r2, r3
 8005198:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800519a:	6800      	ldr	r0, [r0, #0]
 800519c:	4008      	ands	r0, r1
 800519e:	4058      	eors	r0, r3
 80051a0:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80051a2:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051a4:	2180      	movs	r1, #128	; 0x80
 80051a6:	22c0      	movs	r2, #192	; 0xc0
 80051a8:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80051aa:	0549      	lsls	r1, r1, #21
 80051ac:	4c0e      	ldr	r4, [pc, #56]	; (80051e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80051ae:	0152      	lsls	r2, r2, #5
 80051b0:	420d      	tst	r5, r1
 80051b2:	d00a      	beq.n	80051ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80051b8:	23c0      	movs	r3, #192	; 0xc0
 80051ba:	015b      	lsls	r3, r3, #5
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1e5      	bne.n	800518c <RCC_SetFlashLatencyFromMSIRange+0xc>
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80051c2:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051c4:	4243      	negs	r3, r0
 80051c6:	4143      	adcs	r3, r0
 80051c8:	e7e1      	b.n	800518e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ca:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80051cc:	4329      	orrs	r1, r5
 80051ce:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80051d0:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d2:	4c07      	ldr	r4, [pc, #28]	; (80051f0 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80051d4:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80051d8:	4021      	ands	r1, r4
 80051da:	6399      	str	r1, [r3, #56]	; 0x38
 80051dc:	e7ec      	b.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0x38>
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	40021000 	.word	0x40021000
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40007000 	.word	0x40007000
 80051ec:	ffff4000 	.word	0xffff4000
 80051f0:	efffffff 	.word	0xefffffff

080051f4 <HAL_RCC_OscConfig>:
{
 80051f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051f6:	6803      	ldr	r3, [r0, #0]
{
 80051f8:	b085      	sub	sp, #20
 80051fa:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051fc:	07db      	lsls	r3, r3, #31
 80051fe:	d44e      	bmi.n	800529e <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	079b      	lsls	r3, r3, #30
 8005204:	d500      	bpl.n	8005208 <HAL_RCC_OscConfig+0x14>
 8005206:	e09f      	b.n	8005348 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	06db      	lsls	r3, r3, #27
 800520c:	d535      	bpl.n	800527a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 800520e:	230c      	movs	r3, #12
 8005210:	4dbc      	ldr	r5, [pc, #752]	; (8005504 <HAL_RCC_OscConfig+0x310>)
 8005212:	68ea      	ldr	r2, [r5, #12]
 8005214:	421a      	tst	r2, r3
 8005216:	d000      	beq.n	800521a <HAL_RCC_OscConfig+0x26>
 8005218:	e0e9      	b.n	80053ee <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800521a:	682b      	ldr	r3, [r5, #0]
 800521c:	059b      	lsls	r3, r3, #22
 800521e:	d502      	bpl.n	8005226 <HAL_RCC_OscConfig+0x32>
 8005220:	69e3      	ldr	r3, [r4, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d050      	beq.n	80052c8 <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005226:	22e0      	movs	r2, #224	; 0xe0
 8005228:	686b      	ldr	r3, [r5, #4]
 800522a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800522c:	0212      	lsls	r2, r2, #8
 800522e:	4013      	ands	r3, r2
 8005230:	4298      	cmp	r0, r3
 8005232:	d800      	bhi.n	8005236 <HAL_RCC_OscConfig+0x42>
 8005234:	e0c9      	b.n	80053ca <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005236:	f7ff ffa3 	bl	8005180 <RCC_SetFlashLatencyFromMSIRange>
 800523a:	2800      	cmp	r0, #0
 800523c:	d144      	bne.n	80052c8 <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800523e:	686b      	ldr	r3, [r5, #4]
 8005240:	4ab1      	ldr	r2, [pc, #708]	; (8005508 <HAL_RCC_OscConfig+0x314>)
 8005242:	4013      	ands	r3, r2
 8005244:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005246:	4313      	orrs	r3, r2
 8005248:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800524a:	686a      	ldr	r2, [r5, #4]
 800524c:	6a23      	ldr	r3, [r4, #32]
 800524e:	0212      	lsls	r2, r2, #8
 8005250:	061b      	lsls	r3, r3, #24
 8005252:	0a12      	lsrs	r2, r2, #8
 8005254:	4313      	orrs	r3, r2
 8005256:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8005258:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800525a:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800525c:	0b59      	lsrs	r1, r3, #13
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	3101      	adds	r1, #1
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8005266:	0612      	lsls	r2, r2, #24
 8005268:	49a8      	ldr	r1, [pc, #672]	; (800550c <HAL_RCC_OscConfig+0x318>)
 800526a:	0f12      	lsrs	r2, r2, #28
 800526c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 800526e:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8005270:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8005272:	4aa7      	ldr	r2, [pc, #668]	; (8005510 <HAL_RCC_OscConfig+0x31c>)
 8005274:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8005276:	f7fd fc17 	bl	8002aa8 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	071b      	lsls	r3, r3, #28
 800527e:	d500      	bpl.n	8005282 <HAL_RCC_OscConfig+0x8e>
 8005280:	e0ec      	b.n	800545c <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	075b      	lsls	r3, r3, #29
 8005286:	d500      	bpl.n	800528a <HAL_RCC_OscConfig+0x96>
 8005288:	e10f      	b.n	80054aa <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	069b      	lsls	r3, r3, #26
 800528e:	d500      	bpl.n	8005292 <HAL_RCC_OscConfig+0x9e>
 8005290:	e190      	b.n	80055b4 <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005292:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005294:	2900      	cmp	r1, #0
 8005296:	d000      	beq.n	800529a <HAL_RCC_OscConfig+0xa6>
 8005298:	e1c0      	b.n	800561c <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 800529a:	2000      	movs	r0, #0
 800529c:	e015      	b.n	80052ca <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800529e:	210c      	movs	r1, #12
 80052a0:	4d98      	ldr	r5, [pc, #608]	; (8005504 <HAL_RCC_OscConfig+0x310>)
 80052a2:	68eb      	ldr	r3, [r5, #12]
 80052a4:	400b      	ands	r3, r1
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d008      	beq.n	80052bc <HAL_RCC_OscConfig+0xc8>
 80052aa:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052ac:	68ea      	ldr	r2, [r5, #12]
 80052ae:	025b      	lsls	r3, r3, #9
 80052b0:	400a      	ands	r2, r1
 80052b2:	428a      	cmp	r2, r1
 80052b4:	d10b      	bne.n	80052ce <HAL_RCC_OscConfig+0xda>
 80052b6:	68ea      	ldr	r2, [r5, #12]
 80052b8:	421a      	tst	r2, r3
 80052ba:	d008      	beq.n	80052ce <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	039b      	lsls	r3, r3, #14
 80052c0:	d59e      	bpl.n	8005200 <HAL_RCC_OscConfig+0xc>
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d19b      	bne.n	8005200 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80052c8:	2001      	movs	r0, #1
}
 80052ca:	b005      	add	sp, #20
 80052cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ce:	6862      	ldr	r2, [r4, #4]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d112      	bne.n	80052fa <HAL_RCC_OscConfig+0x106>
 80052d4:	682a      	ldr	r2, [r5, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80052da:	f7ff fb5f 	bl	800499c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052de:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80052e0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e2:	02b6      	lsls	r6, r6, #10
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	4233      	tst	r3, r6
 80052e8:	d000      	beq.n	80052ec <HAL_RCC_OscConfig+0xf8>
 80052ea:	e789      	b.n	8005200 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ec:	f7ff fb56 	bl	800499c <HAL_GetTick>
 80052f0:	1bc0      	subs	r0, r0, r7
 80052f2:	2864      	cmp	r0, #100	; 0x64
 80052f4:	d9f6      	bls.n	80052e4 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 80052f6:	2003      	movs	r0, #3
 80052f8:	e7e7      	b.n	80052ca <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052fa:	21a0      	movs	r1, #160	; 0xa0
 80052fc:	02c9      	lsls	r1, r1, #11
 80052fe:	428a      	cmp	r2, r1
 8005300:	d105      	bne.n	800530e <HAL_RCC_OscConfig+0x11a>
 8005302:	2280      	movs	r2, #128	; 0x80
 8005304:	6829      	ldr	r1, [r5, #0]
 8005306:	02d2      	lsls	r2, r2, #11
 8005308:	430a      	orrs	r2, r1
 800530a:	602a      	str	r2, [r5, #0]
 800530c:	e7e2      	b.n	80052d4 <HAL_RCC_OscConfig+0xe0>
 800530e:	6829      	ldr	r1, [r5, #0]
 8005310:	4880      	ldr	r0, [pc, #512]	; (8005514 <HAL_RCC_OscConfig+0x320>)
 8005312:	4001      	ands	r1, r0
 8005314:	6029      	str	r1, [r5, #0]
 8005316:	6829      	ldr	r1, [r5, #0]
 8005318:	400b      	ands	r3, r1
 800531a:	9303      	str	r3, [sp, #12]
 800531c:	9b03      	ldr	r3, [sp, #12]
 800531e:	497e      	ldr	r1, [pc, #504]	; (8005518 <HAL_RCC_OscConfig+0x324>)
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	400b      	ands	r3, r1
 8005324:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005326:	2a00      	cmp	r2, #0
 8005328:	d1d7      	bne.n	80052da <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 800532a:	f7ff fb37 	bl	800499c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532e:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8005330:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005332:	02b6      	lsls	r6, r6, #10
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	4233      	tst	r3, r6
 8005338:	d100      	bne.n	800533c <HAL_RCC_OscConfig+0x148>
 800533a:	e761      	b.n	8005200 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800533c:	f7ff fb2e 	bl	800499c <HAL_GetTick>
 8005340:	1bc0      	subs	r0, r0, r7
 8005342:	2864      	cmp	r0, #100	; 0x64
 8005344:	d9f6      	bls.n	8005334 <HAL_RCC_OscConfig+0x140>
 8005346:	e7d6      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005348:	210c      	movs	r1, #12
 800534a:	4d6e      	ldr	r5, [pc, #440]	; (8005504 <HAL_RCC_OscConfig+0x310>)
 800534c:	68ea      	ldr	r2, [r5, #12]
 800534e:	400a      	ands	r2, r1
 8005350:	2a04      	cmp	r2, #4
 8005352:	d006      	beq.n	8005362 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005354:	68eb      	ldr	r3, [r5, #12]
 8005356:	400b      	ands	r3, r1
 8005358:	428b      	cmp	r3, r1
 800535a:	d110      	bne.n	800537e <HAL_RCC_OscConfig+0x18a>
 800535c:	68eb      	ldr	r3, [r5, #12]
 800535e:	03db      	lsls	r3, r3, #15
 8005360:	d40d      	bmi.n	800537e <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	075b      	lsls	r3, r3, #29
 8005366:	d502      	bpl.n	800536e <HAL_RCC_OscConfig+0x17a>
 8005368:	68e3      	ldr	r3, [r4, #12]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d1ac      	bne.n	80052c8 <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536e:	686a      	ldr	r2, [r5, #4]
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	496a      	ldr	r1, [pc, #424]	; (800551c <HAL_RCC_OscConfig+0x328>)
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	400a      	ands	r2, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	606b      	str	r3, [r5, #4]
 800537c:	e744      	b.n	8005208 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800537e:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005380:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005382:	2a00      	cmp	r2, #0
 8005384:	d010      	beq.n	80053a8 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005386:	2109      	movs	r1, #9
 8005388:	438b      	bics	r3, r1
 800538a:	4313      	orrs	r3, r2
 800538c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800538e:	f7ff fb05 	bl	800499c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005392:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8005394:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005396:	682b      	ldr	r3, [r5, #0]
 8005398:	4233      	tst	r3, r6
 800539a:	d1e8      	bne.n	800536e <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800539c:	f7ff fafe 	bl	800499c <HAL_GetTick>
 80053a0:	1bc0      	subs	r0, r0, r7
 80053a2:	2802      	cmp	r0, #2
 80053a4:	d9f7      	bls.n	8005396 <HAL_RCC_OscConfig+0x1a2>
 80053a6:	e7a6      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 80053a8:	2201      	movs	r2, #1
 80053aa:	4393      	bics	r3, r2
 80053ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80053ae:	f7ff faf5 	bl	800499c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b2:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 80053b4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053b6:	682b      	ldr	r3, [r5, #0]
 80053b8:	4233      	tst	r3, r6
 80053ba:	d100      	bne.n	80053be <HAL_RCC_OscConfig+0x1ca>
 80053bc:	e724      	b.n	8005208 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053be:	f7ff faed 	bl	800499c <HAL_GetTick>
 80053c2:	1bc0      	subs	r0, r0, r7
 80053c4:	2802      	cmp	r0, #2
 80053c6:	d9f6      	bls.n	80053b6 <HAL_RCC_OscConfig+0x1c2>
 80053c8:	e795      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053ca:	686b      	ldr	r3, [r5, #4]
 80053cc:	4a4e      	ldr	r2, [pc, #312]	; (8005508 <HAL_RCC_OscConfig+0x314>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	4303      	orrs	r3, r0
 80053d2:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053d4:	686a      	ldr	r2, [r5, #4]
 80053d6:	6a23      	ldr	r3, [r4, #32]
 80053d8:	0212      	lsls	r2, r2, #8
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	0a12      	lsrs	r2, r2, #8
 80053de:	4313      	orrs	r3, r2
 80053e0:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053e2:	f7ff fecd 	bl	8005180 <RCC_SetFlashLatencyFromMSIRange>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d100      	bne.n	80053ec <HAL_RCC_OscConfig+0x1f8>
 80053ea:	e735      	b.n	8005258 <HAL_RCC_OscConfig+0x64>
 80053ec:	e76c      	b.n	80052c8 <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053ee:	69e3      	ldr	r3, [r4, #28]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d020      	beq.n	8005436 <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	682a      	ldr	r2, [r5, #0]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4313      	orrs	r3, r2
 80053fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80053fe:	f7ff facd 	bl	800499c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8005402:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8005404:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8005406:	00b6      	lsls	r6, r6, #2
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	4233      	tst	r3, r6
 800540c:	d00d      	beq.n	800542a <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800540e:	686b      	ldr	r3, [r5, #4]
 8005410:	4a3d      	ldr	r2, [pc, #244]	; (8005508 <HAL_RCC_OscConfig+0x314>)
 8005412:	4013      	ands	r3, r2
 8005414:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005416:	4313      	orrs	r3, r2
 8005418:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800541a:	686a      	ldr	r2, [r5, #4]
 800541c:	6a23      	ldr	r3, [r4, #32]
 800541e:	0212      	lsls	r2, r2, #8
 8005420:	061b      	lsls	r3, r3, #24
 8005422:	0a12      	lsrs	r2, r2, #8
 8005424:	4313      	orrs	r3, r2
 8005426:	606b      	str	r3, [r5, #4]
 8005428:	e727      	b.n	800527a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800542a:	f7ff fab7 	bl	800499c <HAL_GetTick>
 800542e:	1bc0      	subs	r0, r0, r7
 8005430:	2802      	cmp	r0, #2
 8005432:	d9e9      	bls.n	8005408 <HAL_RCC_OscConfig+0x214>
 8005434:	e75f      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	4a39      	ldr	r2, [pc, #228]	; (8005520 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 800543a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 800543c:	4013      	ands	r3, r2
 800543e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005440:	f7ff faac 	bl	800499c <HAL_GetTick>
 8005444:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8005446:	00b6      	lsls	r6, r6, #2
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	4233      	tst	r3, r6
 800544c:	d100      	bne.n	8005450 <HAL_RCC_OscConfig+0x25c>
 800544e:	e714      	b.n	800527a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005450:	f7ff faa4 	bl	800499c <HAL_GetTick>
 8005454:	1bc0      	subs	r0, r0, r7
 8005456:	2802      	cmp	r0, #2
 8005458:	d9f6      	bls.n	8005448 <HAL_RCC_OscConfig+0x254>
 800545a:	e74c      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800545c:	6962      	ldr	r2, [r4, #20]
 800545e:	2301      	movs	r3, #1
 8005460:	4d28      	ldr	r5, [pc, #160]	; (8005504 <HAL_RCC_OscConfig+0x310>)
 8005462:	2a00      	cmp	r2, #0
 8005464:	d010      	beq.n	8005488 <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 8005466:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005468:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800546a:	4313      	orrs	r3, r2
 800546c:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 800546e:	f7ff fa95 	bl	800499c <HAL_GetTick>
 8005472:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005474:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005476:	4233      	tst	r3, r6
 8005478:	d000      	beq.n	800547c <HAL_RCC_OscConfig+0x288>
 800547a:	e702      	b.n	8005282 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800547c:	f7ff fa8e 	bl	800499c <HAL_GetTick>
 8005480:	1bc0      	subs	r0, r0, r7
 8005482:	2802      	cmp	r0, #2
 8005484:	d9f6      	bls.n	8005474 <HAL_RCC_OscConfig+0x280>
 8005486:	e736      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 8005488:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800548c:	439a      	bics	r2, r3
 800548e:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005490:	f7ff fa84 	bl	800499c <HAL_GetTick>
 8005494:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005496:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005498:	4233      	tst	r3, r6
 800549a:	d100      	bne.n	800549e <HAL_RCC_OscConfig+0x2aa>
 800549c:	e6f1      	b.n	8005282 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800549e:	f7ff fa7d 	bl	800499c <HAL_GetTick>
 80054a2:	1bc0      	subs	r0, r0, r7
 80054a4:	2802      	cmp	r0, #2
 80054a6:	d9f6      	bls.n	8005496 <HAL_RCC_OscConfig+0x2a2>
 80054a8:	e725      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054aa:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80054ac:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ae:	4d15      	ldr	r5, [pc, #84]	; (8005504 <HAL_RCC_OscConfig+0x310>)
 80054b0:	055b      	lsls	r3, r3, #21
 80054b2:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80054b4:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b6:	421a      	tst	r2, r3
 80054b8:	d104      	bne.n	80054c4 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ba:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80054bc:	4313      	orrs	r3, r2
 80054be:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 80054c0:	2301      	movs	r3, #1
 80054c2:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c4:	2780      	movs	r7, #128	; 0x80
 80054c6:	4e17      	ldr	r6, [pc, #92]	; (8005524 <HAL_RCC_OscConfig+0x330>)
 80054c8:	007f      	lsls	r7, r7, #1
 80054ca:	6833      	ldr	r3, [r6, #0]
 80054cc:	423b      	tst	r3, r7
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	68a3      	ldr	r3, [r4, #8]
 80054d4:	0052      	lsls	r2, r2, #1
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d126      	bne.n	8005528 <HAL_RCC_OscConfig+0x334>
 80054da:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80054dc:	4313      	orrs	r3, r2
 80054de:	652b      	str	r3, [r5, #80]	; 0x50
 80054e0:	e047      	b.n	8005572 <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e2:	6833      	ldr	r3, [r6, #0]
 80054e4:	433b      	orrs	r3, r7
 80054e6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80054e8:	f7ff fa58 	bl	800499c <HAL_GetTick>
 80054ec:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ee:	6833      	ldr	r3, [r6, #0]
 80054f0:	423b      	tst	r3, r7
 80054f2:	d1ed      	bne.n	80054d0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f4:	f7ff fa52 	bl	800499c <HAL_GetTick>
 80054f8:	9b01      	ldr	r3, [sp, #4]
 80054fa:	1ac0      	subs	r0, r0, r3
 80054fc:	2864      	cmp	r0, #100	; 0x64
 80054fe:	d9f6      	bls.n	80054ee <HAL_RCC_OscConfig+0x2fa>
 8005500:	e6f9      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	40021000 	.word	0x40021000
 8005508:	ffff1fff 	.word	0xffff1fff
 800550c:	080083ed 	.word	0x080083ed
 8005510:	20000004 	.word	0x20000004
 8005514:	fffeffff 	.word	0xfffeffff
 8005518:	fffbffff 	.word	0xfffbffff
 800551c:	ffffe0ff 	.word	0xffffe0ff
 8005520:	fffffeff 	.word	0xfffffeff
 8005524:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <HAL_RCC_OscConfig+0x366>
 800552c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800552e:	4a60      	ldr	r2, [pc, #384]	; (80056b0 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005530:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005532:	4013      	ands	r3, r2
 8005534:	652b      	str	r3, [r5, #80]	; 0x50
 8005536:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005538:	4a5e      	ldr	r2, [pc, #376]	; (80056b4 <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553a:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800553c:	4013      	ands	r3, r2
 800553e:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005540:	f7ff fa2c 	bl	800499c <HAL_GetTick>
 8005544:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005546:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005548:	423b      	tst	r3, r7
 800554a:	d02a      	beq.n	80055a2 <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7ff fa26 	bl	800499c <HAL_GetTick>
 8005550:	4b59      	ldr	r3, [pc, #356]	; (80056b8 <HAL_RCC_OscConfig+0x4c4>)
 8005552:	1b80      	subs	r0, r0, r6
 8005554:	4298      	cmp	r0, r3
 8005556:	d9f6      	bls.n	8005546 <HAL_RCC_OscConfig+0x352>
 8005558:	e6cd      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800555a:	21a0      	movs	r1, #160	; 0xa0
 800555c:	00c9      	lsls	r1, r1, #3
 800555e:	428b      	cmp	r3, r1
 8005560:	d10d      	bne.n	800557e <HAL_RCC_OscConfig+0x38a>
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	430b      	orrs	r3, r1
 800556a:	652b      	str	r3, [r5, #80]	; 0x50
 800556c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800556e:	431a      	orrs	r2, r3
 8005570:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005572:	f7ff fa13 	bl	800499c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005576:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 8005578:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557a:	00bf      	lsls	r7, r7, #2
 800557c:	e00e      	b.n	800559c <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800557e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005580:	4a4b      	ldr	r2, [pc, #300]	; (80056b0 <HAL_RCC_OscConfig+0x4bc>)
 8005582:	4013      	ands	r3, r2
 8005584:	652b      	str	r3, [r5, #80]	; 0x50
 8005586:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005588:	4a4a      	ldr	r2, [pc, #296]	; (80056b4 <HAL_RCC_OscConfig+0x4c0>)
 800558a:	4013      	ands	r3, r2
 800558c:	e7a7      	b.n	80054de <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558e:	f7ff fa05 	bl	800499c <HAL_GetTick>
 8005592:	4b49      	ldr	r3, [pc, #292]	; (80056b8 <HAL_RCC_OscConfig+0x4c4>)
 8005594:	1b80      	subs	r0, r0, r6
 8005596:	4298      	cmp	r0, r3
 8005598:	d900      	bls.n	800559c <HAL_RCC_OscConfig+0x3a8>
 800559a:	e6ac      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800559e:	423b      	tst	r3, r7
 80055a0:	d0f5      	beq.n	800558e <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 80055a2:	9b00      	ldr	r3, [sp, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d000      	beq.n	80055aa <HAL_RCC_OscConfig+0x3b6>
 80055a8:	e66f      	b.n	800528a <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 80055aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80055ac:	4a43      	ldr	r2, [pc, #268]	; (80056bc <HAL_RCC_OscConfig+0x4c8>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	63ab      	str	r3, [r5, #56]	; 0x38
 80055b2:	e66a      	b.n	800528a <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055b4:	69a1      	ldr	r1, [r4, #24]
 80055b6:	2301      	movs	r3, #1
 80055b8:	4d41      	ldr	r5, [pc, #260]	; (80056c0 <HAL_RCC_OscConfig+0x4cc>)
 80055ba:	4a42      	ldr	r2, [pc, #264]	; (80056c4 <HAL_RCC_OscConfig+0x4d0>)
 80055bc:	2900      	cmp	r1, #0
 80055be:	d018      	beq.n	80055f2 <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 80055c0:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80055c2:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 80055c4:	4319      	orrs	r1, r3
 80055c6:	60a9      	str	r1, [r5, #8]
 80055c8:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80055ca:	430b      	orrs	r3, r1
 80055cc:	636b      	str	r3, [r5, #52]	; 0x34
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	6a11      	ldr	r1, [r2, #32]
 80055d2:	019b      	lsls	r3, r3, #6
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80055d8:	f7ff f9e0 	bl	800499c <HAL_GetTick>
 80055dc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80055de:	68ab      	ldr	r3, [r5, #8]
 80055e0:	4233      	tst	r3, r6
 80055e2:	d000      	beq.n	80055e6 <HAL_RCC_OscConfig+0x3f2>
 80055e4:	e655      	b.n	8005292 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055e6:	f7ff f9d9 	bl	800499c <HAL_GetTick>
 80055ea:	1bc0      	subs	r0, r0, r7
 80055ec:	2802      	cmp	r0, #2
 80055ee:	d9f6      	bls.n	80055de <HAL_RCC_OscConfig+0x3ea>
 80055f0:	e681      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 80055f2:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80055f4:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 80055f6:	4399      	bics	r1, r3
 80055f8:	60a9      	str	r1, [r5, #8]
 80055fa:	6a13      	ldr	r3, [r2, #32]
 80055fc:	4932      	ldr	r1, [pc, #200]	; (80056c8 <HAL_RCC_OscConfig+0x4d4>)
 80055fe:	400b      	ands	r3, r1
 8005600:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8005602:	f7ff f9cb 	bl	800499c <HAL_GetTick>
 8005606:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005608:	68ab      	ldr	r3, [r5, #8]
 800560a:	4233      	tst	r3, r6
 800560c:	d100      	bne.n	8005610 <HAL_RCC_OscConfig+0x41c>
 800560e:	e640      	b.n	8005292 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005610:	f7ff f9c4 	bl	800499c <HAL_GetTick>
 8005614:	1bc0      	subs	r0, r0, r7
 8005616:	2802      	cmp	r0, #2
 8005618:	d9f6      	bls.n	8005608 <HAL_RCC_OscConfig+0x414>
 800561a:	e66c      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800561c:	220c      	movs	r2, #12
 800561e:	4d28      	ldr	r5, [pc, #160]	; (80056c0 <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8005620:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005622:	68eb      	ldr	r3, [r5, #12]
 8005624:	4013      	ands	r3, r2
 8005626:	4293      	cmp	r3, r2
 8005628:	d100      	bne.n	800562c <HAL_RCC_OscConfig+0x438>
 800562a:	e64e      	b.n	80052ca <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	4a27      	ldr	r2, [pc, #156]	; (80056cc <HAL_RCC_OscConfig+0x4d8>)
 8005630:	4013      	ands	r3, r2
 8005632:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005634:	2902      	cmp	r1, #2
 8005636:	d12b      	bne.n	8005690 <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 8005638:	f7ff f9b0 	bl	800499c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800563c:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800563e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005640:	04b6      	lsls	r6, r6, #18
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	4233      	tst	r3, r6
 8005646:	d11d      	bne.n	8005684 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005648:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800564a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800564c:	68ea      	ldr	r2, [r5, #12]
 800564e:	430b      	orrs	r3, r1
 8005650:	491f      	ldr	r1, [pc, #124]	; (80056d0 <HAL_RCC_OscConfig+0x4dc>)
 8005652:	400a      	ands	r2, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005658:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800565a:	4313      	orrs	r3, r2
 800565c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	682a      	ldr	r2, [r5, #0]
 8005662:	045b      	lsls	r3, r3, #17
 8005664:	4313      	orrs	r3, r2
 8005666:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005668:	f7ff f998 	bl	800499c <HAL_GetTick>
 800566c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800566e:	04a4      	lsls	r4, r4, #18
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	4223      	tst	r3, r4
 8005674:	d000      	beq.n	8005678 <HAL_RCC_OscConfig+0x484>
 8005676:	e610      	b.n	800529a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005678:	f7ff f990 	bl	800499c <HAL_GetTick>
 800567c:	1b80      	subs	r0, r0, r6
 800567e:	2802      	cmp	r0, #2
 8005680:	d9f6      	bls.n	8005670 <HAL_RCC_OscConfig+0x47c>
 8005682:	e638      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005684:	f7ff f98a 	bl	800499c <HAL_GetTick>
 8005688:	1bc0      	subs	r0, r0, r7
 800568a:	2802      	cmp	r0, #2
 800568c:	d9d9      	bls.n	8005642 <HAL_RCC_OscConfig+0x44e>
 800568e:	e632      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8005690:	f7ff f984 	bl	800499c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005694:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 8005696:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005698:	04a4      	lsls	r4, r4, #18
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	4223      	tst	r3, r4
 800569e:	d100      	bne.n	80056a2 <HAL_RCC_OscConfig+0x4ae>
 80056a0:	e5fb      	b.n	800529a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a2:	f7ff f97b 	bl	800499c <HAL_GetTick>
 80056a6:	1b80      	subs	r0, r0, r6
 80056a8:	2802      	cmp	r0, #2
 80056aa:	d9f6      	bls.n	800569a <HAL_RCC_OscConfig+0x4a6>
 80056ac:	e623      	b.n	80052f6 <HAL_RCC_OscConfig+0x102>
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	fffffeff 	.word	0xfffffeff
 80056b4:	fffffbff 	.word	0xfffffbff
 80056b8:	00001388 	.word	0x00001388
 80056bc:	efffffff 	.word	0xefffffff
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40010000 	.word	0x40010000
 80056c8:	ffffdfff 	.word	0xffffdfff
 80056cc:	feffffff 	.word	0xfeffffff
 80056d0:	ff02ffff 	.word	0xff02ffff

080056d4 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 80056d4:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80056d6:	4b18      	ldr	r3, [pc, #96]	; (8005738 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80056d8:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80056da:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80056dc:	400a      	ands	r2, r1
 80056de:	2a08      	cmp	r2, #8
 80056e0:	d026      	beq.n	8005730 <HAL_RCC_GetSysClockFreq+0x5c>
 80056e2:	2a0c      	cmp	r2, #12
 80056e4:	d006      	beq.n	80056f4 <HAL_RCC_GetSysClockFreq+0x20>
 80056e6:	2a04      	cmp	r2, #4
 80056e8:	d11a      	bne.n	8005720 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	06db      	lsls	r3, r3, #27
 80056ee:	d421      	bmi.n	8005734 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 80056f0:	4812      	ldr	r0, [pc, #72]	; (800573c <HAL_RCC_GetSysClockFreq+0x68>)
}
 80056f2:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80056f4:	028a      	lsls	r2, r1, #10
 80056f6:	4812      	ldr	r0, [pc, #72]	; (8005740 <HAL_RCC_GetSysClockFreq+0x6c>)
 80056f8:	0f12      	lsrs	r2, r2, #28
 80056fa:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 80056fc:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056fe:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8005700:	0f89      	lsrs	r1, r1, #30
 8005702:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005704:	03c0      	lsls	r0, r0, #15
 8005706:	d504      	bpl.n	8005712 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 8005708:	480e      	ldr	r0, [pc, #56]	; (8005744 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800570a:	4350      	muls	r0, r2
 800570c:	f7fa fd06 	bl	800011c <__udivsi3>
 8005710:	e7ef      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	06db      	lsls	r3, r3, #27
 8005716:	d501      	bpl.n	800571c <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8005718:	480b      	ldr	r0, [pc, #44]	; (8005748 <HAL_RCC_GetSysClockFreq+0x74>)
 800571a:	e7f6      	b.n	800570a <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 800571c:	4807      	ldr	r0, [pc, #28]	; (800573c <HAL_RCC_GetSysClockFreq+0x68>)
 800571e:	e7f4      	b.n	800570a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8005720:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8005722:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8005724:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 800572a:	3301      	adds	r3, #1
 800572c:	4098      	lsls	r0, r3
 800572e:	e7e0      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8005730:	4804      	ldr	r0, [pc, #16]	; (8005744 <HAL_RCC_GetSysClockFreq+0x70>)
 8005732:	e7de      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8005734:	4804      	ldr	r0, [pc, #16]	; (8005748 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8005736:	e7dc      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x1e>
 8005738:	40021000 	.word	0x40021000
 800573c:	00f42400 	.word	0x00f42400
 8005740:	08008405 	.word	0x08008405
 8005744:	007a1200 	.word	0x007a1200
 8005748:	003d0900 	.word	0x003d0900

0800574c <HAL_RCC_ClockConfig>:
{
 800574c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800574e:	2201      	movs	r2, #1
 8005750:	4c53      	ldr	r4, [pc, #332]	; (80058a0 <HAL_RCC_ClockConfig+0x154>)
{
 8005752:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005754:	6823      	ldr	r3, [r4, #0]
{
 8005756:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005758:	4013      	ands	r3, r2
 800575a:	428b      	cmp	r3, r1
 800575c:	d328      	bcc.n	80057b0 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575e:	6832      	ldr	r2, [r6, #0]
 8005760:	0793      	lsls	r3, r2, #30
 8005762:	d431      	bmi.n	80057c8 <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005764:	07d3      	lsls	r3, r2, #31
 8005766:	d437      	bmi.n	80057d8 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005768:	2301      	movs	r3, #1
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	9901      	ldr	r1, [sp, #4]
 800576e:	401a      	ands	r2, r3
 8005770:	4291      	cmp	r1, r2
 8005772:	d200      	bcs.n	8005776 <HAL_RCC_ClockConfig+0x2a>
 8005774:	e085      	b.n	8005882 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005776:	6832      	ldr	r2, [r6, #0]
 8005778:	4c4a      	ldr	r4, [pc, #296]	; (80058a4 <HAL_RCC_ClockConfig+0x158>)
 800577a:	0753      	lsls	r3, r2, #29
 800577c:	d500      	bpl.n	8005780 <HAL_RCC_ClockConfig+0x34>
 800577e:	e087      	b.n	8005890 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005780:	0713      	lsls	r3, r2, #28
 8005782:	d506      	bpl.n	8005792 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005784:	68e2      	ldr	r2, [r4, #12]
 8005786:	6933      	ldr	r3, [r6, #16]
 8005788:	4947      	ldr	r1, [pc, #284]	; (80058a8 <HAL_RCC_ClockConfig+0x15c>)
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	400a      	ands	r2, r1
 800578e:	4313      	orrs	r3, r2
 8005790:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005792:	f7ff ff9f 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8005796:	68e3      	ldr	r3, [r4, #12]
 8005798:	4a44      	ldr	r2, [pc, #272]	; (80058ac <HAL_RCC_ClockConfig+0x160>)
 800579a:	061b      	lsls	r3, r3, #24
 800579c:	0f1b      	lsrs	r3, r3, #28
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	40d8      	lsrs	r0, r3
 80057a2:	4b43      	ldr	r3, [pc, #268]	; (80058b0 <HAL_RCC_ClockConfig+0x164>)
 80057a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80057a6:	2003      	movs	r0, #3
 80057a8:	f7fd f97e 	bl	8002aa8 <HAL_InitTick>
  return HAL_OK;
 80057ac:	2000      	movs	r0, #0
 80057ae:	e00a      	b.n	80057c6 <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	9901      	ldr	r1, [sp, #4]
 80057b4:	4393      	bics	r3, r2
 80057b6:	430b      	orrs	r3, r1
 80057b8:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	4013      	ands	r3, r2
 80057be:	9a01      	ldr	r2, [sp, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d0cc      	beq.n	800575e <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80057c4:	2001      	movs	r0, #1
}
 80057c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057c8:	20f0      	movs	r0, #240	; 0xf0
 80057ca:	4936      	ldr	r1, [pc, #216]	; (80058a4 <HAL_RCC_ClockConfig+0x158>)
 80057cc:	68cb      	ldr	r3, [r1, #12]
 80057ce:	4383      	bics	r3, r0
 80057d0:	68b0      	ldr	r0, [r6, #8]
 80057d2:	4303      	orrs	r3, r0
 80057d4:	60cb      	str	r3, [r1, #12]
 80057d6:	e7c5      	b.n	8005764 <HAL_RCC_ClockConfig+0x18>
 80057d8:	4d32      	ldr	r5, [pc, #200]	; (80058a4 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057da:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057dc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057de:	2a02      	cmp	r2, #2
 80057e0:	d119      	bne.n	8005816 <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e2:	039b      	lsls	r3, r3, #14
 80057e4:	d5ee      	bpl.n	80057c4 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	2103      	movs	r1, #3
 80057e8:	68eb      	ldr	r3, [r5, #12]
 80057ea:	438b      	bics	r3, r1
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80057f0:	f7ff f8d4 	bl	800499c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80057f6:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d119      	bne.n	8005830 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057fc:	220c      	movs	r2, #12
 80057fe:	68eb      	ldr	r3, [r5, #12]
 8005800:	4013      	ands	r3, r2
 8005802:	2b08      	cmp	r3, #8
 8005804:	d0b0      	beq.n	8005768 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005806:	f7ff f8c9 	bl	800499c <HAL_GetTick>
 800580a:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <HAL_RCC_ClockConfig+0x168>)
 800580c:	1bc0      	subs	r0, r0, r7
 800580e:	4298      	cmp	r0, r3
 8005810:	d9f4      	bls.n	80057fc <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8005812:	2003      	movs	r0, #3
 8005814:	e7d7      	b.n	80057c6 <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005816:	2a03      	cmp	r2, #3
 8005818:	d102      	bne.n	8005820 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800581a:	019b      	lsls	r3, r3, #6
 800581c:	d4e3      	bmi.n	80057e6 <HAL_RCC_ClockConfig+0x9a>
 800581e:	e7d1      	b.n	80057c4 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005820:	2a01      	cmp	r2, #1
 8005822:	d102      	bne.n	800582a <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005824:	075b      	lsls	r3, r3, #29
 8005826:	d4de      	bmi.n	80057e6 <HAL_RCC_ClockConfig+0x9a>
 8005828:	e7cc      	b.n	80057c4 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800582a:	059b      	lsls	r3, r3, #22
 800582c:	d4db      	bmi.n	80057e6 <HAL_RCC_ClockConfig+0x9a>
 800582e:	e7c9      	b.n	80057c4 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005830:	2b03      	cmp	r3, #3
 8005832:	d10c      	bne.n	800584e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005834:	220c      	movs	r2, #12
 8005836:	68eb      	ldr	r3, [r5, #12]
 8005838:	4013      	ands	r3, r2
 800583a:	4293      	cmp	r3, r2
 800583c:	d100      	bne.n	8005840 <HAL_RCC_ClockConfig+0xf4>
 800583e:	e793      	b.n	8005768 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005840:	f7ff f8ac 	bl	800499c <HAL_GetTick>
 8005844:	4b1b      	ldr	r3, [pc, #108]	; (80058b4 <HAL_RCC_ClockConfig+0x168>)
 8005846:	1bc0      	subs	r0, r0, r7
 8005848:	4298      	cmp	r0, r3
 800584a:	d9f3      	bls.n	8005834 <HAL_RCC_ClockConfig+0xe8>
 800584c:	e7e1      	b.n	8005812 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800584e:	2b01      	cmp	r3, #1
 8005850:	d011      	beq.n	8005876 <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005852:	220c      	movs	r2, #12
 8005854:	68eb      	ldr	r3, [r5, #12]
 8005856:	4213      	tst	r3, r2
 8005858:	d100      	bne.n	800585c <HAL_RCC_ClockConfig+0x110>
 800585a:	e785      	b.n	8005768 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800585c:	f7ff f89e 	bl	800499c <HAL_GetTick>
 8005860:	4b14      	ldr	r3, [pc, #80]	; (80058b4 <HAL_RCC_ClockConfig+0x168>)
 8005862:	1bc0      	subs	r0, r0, r7
 8005864:	4298      	cmp	r0, r3
 8005866:	d9f4      	bls.n	8005852 <HAL_RCC_ClockConfig+0x106>
 8005868:	e7d3      	b.n	8005812 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800586a:	f7ff f897 	bl	800499c <HAL_GetTick>
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <HAL_RCC_ClockConfig+0x168>)
 8005870:	1bc0      	subs	r0, r0, r7
 8005872:	4298      	cmp	r0, r3
 8005874:	d8cd      	bhi.n	8005812 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005876:	220c      	movs	r2, #12
 8005878:	68eb      	ldr	r3, [r5, #12]
 800587a:	4013      	ands	r3, r2
 800587c:	2b04      	cmp	r3, #4
 800587e:	d1f4      	bne.n	800586a <HAL_RCC_ClockConfig+0x11e>
 8005880:	e772      	b.n	8005768 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005882:	6822      	ldr	r2, [r4, #0]
 8005884:	439a      	bics	r2, r3
 8005886:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	421a      	tst	r2, r3
 800588c:	d19a      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x78>
 800588e:	e772      	b.n	8005776 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005890:	68e3      	ldr	r3, [r4, #12]
 8005892:	4909      	ldr	r1, [pc, #36]	; (80058b8 <HAL_RCC_ClockConfig+0x16c>)
 8005894:	400b      	ands	r3, r1
 8005896:	68f1      	ldr	r1, [r6, #12]
 8005898:	430b      	orrs	r3, r1
 800589a:	60e3      	str	r3, [r4, #12]
 800589c:	e770      	b.n	8005780 <HAL_RCC_ClockConfig+0x34>
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	40022000 	.word	0x40022000
 80058a4:	40021000 	.word	0x40021000
 80058a8:	ffffc7ff 	.word	0xffffc7ff
 80058ac:	080083ed 	.word	0x080083ed
 80058b0:	20000004 	.word	0x20000004
 80058b4:	00001388 	.word	0x00001388
 80058b8:	fffff8ff 	.word	0xfffff8ff

080058bc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80058be:	4a05      	ldr	r2, [pc, #20]	; (80058d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	055b      	lsls	r3, r3, #21
 80058c4:	0f5b      	lsrs	r3, r3, #29
 80058c6:	5cd3      	ldrb	r3, [r2, r3]
 80058c8:	4a03      	ldr	r2, [pc, #12]	; (80058d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80058ca:	6810      	ldr	r0, [r2, #0]
 80058cc:	40d8      	lsrs	r0, r3
}    
 80058ce:	4770      	bx	lr
 80058d0:	40021000 	.word	0x40021000
 80058d4:	080083fd 	.word	0x080083fd
 80058d8:	20000004 	.word	0x20000004

080058dc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80058dc:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80058de:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	049b      	lsls	r3, r3, #18
 80058e4:	0f5b      	lsrs	r3, r3, #29
 80058e6:	5cd3      	ldrb	r3, [r2, r3]
 80058e8:	4a03      	ldr	r2, [pc, #12]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80058ea:	6810      	ldr	r0, [r2, #0]
 80058ec:	40d8      	lsrs	r0, r3
} 
 80058ee:	4770      	bx	lr
 80058f0:	40021000 	.word	0x40021000
 80058f4:	080083fd 	.word	0x080083fd
 80058f8:	20000004 	.word	0x20000004

080058fc <HAL_RCCEx_PeriphCLKConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 80058fc:	6803      	ldr	r3, [r0, #0]
{
 80058fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005900:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8005902:	069b      	lsls	r3, r3, #26
 8005904:	d53a      	bpl.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005906:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005908:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590a:	4c5f      	ldr	r4, [pc, #380]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800590c:	055b      	lsls	r3, r3, #21
 800590e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8005910:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005912:	421a      	tst	r2, r3
 8005914:	d104      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005916:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005918:	4313      	orrs	r3, r2
 800591a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800591c:	2301      	movs	r3, #1
 800591e:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005920:	2780      	movs	r7, #128	; 0x80
 8005922:	4e5a      	ldr	r6, [pc, #360]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005924:	007f      	lsls	r7, r7, #1
 8005926:	6833      	ldr	r3, [r6, #0]
 8005928:	423b      	tst	r3, r7
 800592a:	d069      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x104>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800592c:	22c0      	movs	r2, #192	; 0xc0
 800592e:	21c0      	movs	r1, #192	; 0xc0
 8005930:	6820      	ldr	r0, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005932:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005934:	0392      	lsls	r2, r2, #14
 8005936:	4010      	ands	r0, r2
 8005938:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800593a:	401a      	ands	r2, r3
 800593c:	4290      	cmp	r0, r2
 800593e:	d000      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005940:	e06f      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x126>
        return HAL_ERROR; 
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005942:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005944:	400a      	ands	r2, r1
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005946:	d000      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005948:	e076      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800594a:	6869      	ldr	r1, [r5, #4]
 800594c:	23c0      	movs	r3, #192	; 0xc0
 800594e:	000a      	movs	r2, r1
 8005950:	029b      	lsls	r3, r3, #10
 8005952:	401a      	ands	r2, r3
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	484d      	ldr	r0, [pc, #308]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800595c:	4003      	ands	r3, r0
 800595e:	20c0      	movs	r0, #192	; 0xc0
 8005960:	0380      	lsls	r0, r0, #14
 8005962:	4001      	ands	r1, r0
 8005964:	430b      	orrs	r3, r1
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800596a:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800596c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800596e:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8005970:	2b01      	cmp	r3, #1
 8005972:	d103      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005974:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005976:	4a47      	ldr	r2, [pc, #284]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005978:	4013      	ands	r3, r2
 800597a:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	07da      	lsls	r2, r3, #31
 8005980:	d506      	bpl.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005982:	2003      	movs	r0, #3
 8005984:	4940      	ldr	r1, [pc, #256]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005986:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8005988:	4382      	bics	r2, r0
 800598a:	68a8      	ldr	r0, [r5, #8]
 800598c:	4302      	orrs	r2, r0
 800598e:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005990:	079a      	lsls	r2, r3, #30
 8005992:	d506      	bpl.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005994:	200c      	movs	r0, #12
 8005996:	493c      	ldr	r1, [pc, #240]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005998:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800599a:	4382      	bics	r2, r0
 800599c:	68e8      	ldr	r0, [r5, #12]
 800599e:	4302      	orrs	r2, r0
 80059a0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059a2:	075a      	lsls	r2, r3, #29
 80059a4:	d506      	bpl.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059a6:	4938      	ldr	r1, [pc, #224]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059a8:	483b      	ldr	r0, [pc, #236]	; (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80059aa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80059ac:	4002      	ands	r2, r0
 80059ae:	6928      	ldr	r0, [r5, #16]
 80059b0:	4302      	orrs	r2, r0
 80059b2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059b4:	071a      	lsls	r2, r3, #28
 80059b6:	d506      	bpl.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059b8:	4933      	ldr	r1, [pc, #204]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059ba:	4838      	ldr	r0, [pc, #224]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80059bc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80059be:	4002      	ands	r2, r0
 80059c0:	6968      	ldr	r0, [r5, #20]
 80059c2:	4302      	orrs	r2, r0
 80059c4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059c6:	05da      	lsls	r2, r3, #23
 80059c8:	d506      	bpl.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059ca:	492f      	ldr	r1, [pc, #188]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059cc:	4834      	ldr	r0, [pc, #208]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80059ce:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80059d0:	4002      	ands	r2, r0
 80059d2:	69a8      	ldr	r0, [r5, #24]
 80059d4:	4302      	orrs	r2, r0
 80059d6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059d8:	065a      	lsls	r2, r3, #25
 80059da:	d506      	bpl.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0xee>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059dc:	492a      	ldr	r1, [pc, #168]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059de:	4831      	ldr	r0, [pc, #196]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80059e0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80059e2:	4002      	ands	r2, r0
 80059e4:	6a28      	ldr	r0, [r5, #32]
 80059e6:	4302      	orrs	r2, r0
 80059e8:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80059ea:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059ec:	061b      	lsls	r3, r3, #24
 80059ee:	d517      	bpl.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80059f0:	4a25      	ldr	r2, [pc, #148]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80059f2:	492d      	ldr	r1, [pc, #180]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059f4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80059f6:	400b      	ands	r3, r1
 80059f8:	69e9      	ldr	r1, [r5, #28]
 80059fa:	430b      	orrs	r3, r1
 80059fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059fe:	e00f      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x124>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a00:	6833      	ldr	r3, [r6, #0]
 8005a02:	433b      	orrs	r3, r7
 8005a04:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005a06:	f7fe ffc9 	bl	800499c <HAL_GetTick>
 8005a0a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a0c:	6833      	ldr	r3, [r6, #0]
 8005a0e:	423b      	tst	r3, r7
 8005a10:	d18c      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a12:	f7fe ffc3 	bl	800499c <HAL_GetTick>
 8005a16:	9b01      	ldr	r3, [sp, #4]
 8005a18:	1ac0      	subs	r0, r0, r3
 8005a1a:	2864      	cmp	r0, #100	; 0x64
 8005a1c:	d9f6      	bls.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x110>
          return HAL_TIMEOUT;
 8005a1e:	2003      	movs	r0, #3
}
 8005a20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a22:	001a      	movs	r2, r3
 8005a24:	400a      	ands	r2, r1
 8005a26:	428a      	cmp	r2, r1
 8005a28:	d000      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8005a2a:	e78a      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005a2c:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR; 
 8005a2e:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a30:	0392      	lsls	r2, r2, #14
 8005a32:	d400      	bmi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 8005a34:	e785      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005a36:	e7f3      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005a38:	400b      	ands	r3, r1
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d100      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8005a3e:	e784      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a40:	682b      	ldr	r3, [r5, #0]
 8005a42:	069b      	lsls	r3, r3, #26
 8005a44:	d400      	bmi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005a46:	e780      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a48:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005a4a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005a4e:	0312      	lsls	r2, r2, #12
 8005a50:	4302      	orrs	r2, r0
 8005a52:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a54:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005a56:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a58:	4814      	ldr	r0, [pc, #80]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005a5a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a5c:	4002      	ands	r2, r0
 8005a5e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8005a60:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005a62:	05cb      	lsls	r3, r1, #23
 8005a64:	d400      	bmi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a66:	e770      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4e>
        tickstart = HAL_GetTick();
 8005a68:	f7fe ff98 	bl	800499c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a6c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8005a6e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a70:	00bf      	lsls	r7, r7, #2
 8005a72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005a74:	423b      	tst	r3, r7
 8005a76:	d000      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8005a78:	e767      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a7a:	f7fe ff8f 	bl	800499c <HAL_GetTick>
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a80:	1b80      	subs	r0, r0, r6
 8005a82:	4298      	cmp	r0, r3
 8005a84:	d9f5      	bls.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8005a86:	e7ca      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	40007000 	.word	0x40007000
 8005a90:	ffcfffff 	.word	0xffcfffff
 8005a94:	efffffff 	.word	0xefffffff
 8005a98:	fffff3ff 	.word	0xfffff3ff
 8005a9c:	ffffcfff 	.word	0xffffcfff
 8005aa0:	fffcffff 	.word	0xfffcffff
 8005aa4:	fbffffff 	.word	0xfbffffff
 8005aa8:	fff3ffff 	.word	0xfff3ffff
 8005aac:	fff7ffff 	.word	0xfff7ffff
 8005ab0:	00001388 	.word	0x00001388

08005ab4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ab4:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8005ab6:	2808      	cmp	r0, #8
 8005ab8:	d100      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8005aba:	e0c3      	b.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005abc:	d810      	bhi.n	8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8005abe:	2802      	cmp	r0, #2
 8005ac0:	d100      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x10>
 8005ac2:	e095      	b.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005ac4:	2804      	cmp	r0, #4
 8005ac6:	d100      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8005ac8:	e0a2      	b.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8005aca:	2801      	cmp	r0, #1
 8005acc:	d10e      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
#endif /* USB */
#if defined(RCC_CCIPR_USART1SEL)
  case RCC_PERIPHCLK_USART1:
    {
      /* Get the current USART1 source */
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005ace:	2103      	movs	r1, #3
 8005ad0:	4a69      	ldr	r2, [pc, #420]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005ad2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005ad4:	400b      	ands	r3, r1

      /* Check if USART1 clock selection is PCLK2 */
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005ad6:	d000      	beq.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005ad8:	e079      	b.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
      {
        frequency = HAL_RCC_GetPCLK2Freq();
 8005ada:	f7ff feff 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 8005ade:	e032      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  switch (PeriphClk)
 8005ae0:	2820      	cmp	r0, #32
 8005ae2:	d019      	beq.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005ae4:	d804      	bhi.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005ae6:	2810      	cmp	r0, #16
 8005ae8:	d100      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005aea:	e0bb      	b.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
  uint32_t temp_reg = 0U, clkprediv = 0U, frequency = 0U;
 8005aec:	2000      	movs	r0, #0
 8005aee:	e02a      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  switch (PeriphClk)
 8005af0:	2840      	cmp	r0, #64	; 0x40
 8005af2:	d044      	beq.n	8005b7e <HAL_RCCEx_GetPeriphCLKFreq+0xca>
 8005af4:	2380      	movs	r3, #128	; 0x80
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4298      	cmp	r0, r3
 8005afa:	d1f7      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x38>

#if defined(RCC_CCIPR_I2C3SEL)
  case RCC_PERIPHCLK_I2C3:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005afc:	21c0      	movs	r1, #192	; 0xc0
 8005afe:	4a5e      	ldr	r2, [pc, #376]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005b00:	0289      	lsls	r1, r1, #10
 8005b02:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005b04:	400b      	ands	r3, r1

      /* Check if I2C3 clock selection is PCLK1 */
      if (srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8005b06:	d100      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x56>
 8005b08:	e077      	b.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C3 clock selection is HSI */
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005b0a:	2180      	movs	r1, #128	; 0x80
 8005b0c:	0289      	lsls	r1, r1, #10
 8005b0e:	428b      	cmp	r3, r1
 8005b10:	d05f      	beq.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      {
        frequency = HSI_VALUE;
      }
      /* Check if I2C3 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8005b12:	2280      	movs	r2, #128	; 0x80
 8005b14:	0252      	lsls	r2, r2, #9
 8005b16:	e0a1      	b.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b18:	25c0      	movs	r5, #192	; 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8005b1a:	2080      	movs	r0, #128	; 0x80
      temp_reg = RCC->CSR;
 8005b1c:	4956      	ldr	r1, [pc, #344]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b1e:	02ad      	lsls	r5, r5, #10
      temp_reg = RCC->CSR;
 8005b20:	6d0b      	ldr	r3, [r1, #80]	; 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b22:	6d0a      	ldr	r2, [r1, #80]	; 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8005b24:	0240      	lsls	r0, r0, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b26:	402a      	ands	r2, r5
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8005b28:	4282      	cmp	r2, r0
 8005b2a:	d103      	bne.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
 8005b2c:	0598      	lsls	r0, r3, #22
        frequency = LSE_VALUE;
 8005b2e:	0fc0      	lsrs	r0, r0, #31
 8005b30:	03c0      	lsls	r0, r0, #15
 8005b32:	e008      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8005b34:	2480      	movs	r4, #128	; 0x80
 8005b36:	02a4      	lsls	r4, r4, #10
 8005b38:	42a2      	cmp	r2, r4
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8005b3c:	2002      	movs	r0, #2
 8005b3e:	4003      	ands	r3, r0
            frequency = 0U;
 8005b40:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY)))
 8005b42:	d000      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        frequency = LSI_VALUE;
 8005b44:	484d      	ldr	r0, [pc, #308]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
    {
      break;
    }
  }
  return(frequency);
}
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
            frequency = 0U;
 8005b48:	2000      	movs	r0, #0
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIVX) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005b4a:	42aa      	cmp	r2, r5
 8005b4c:	d1fb      	bne.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8005b4e:	680b      	ldr	r3, [r1, #0]
 8005b50:	4223      	tst	r3, r4
 8005b52:	d0f8      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8005b54:	22c0      	movs	r2, #192	; 0xc0
 8005b56:	680b      	ldr	r3, [r1, #0]
        switch (clkprediv)
 8005b58:	2180      	movs	r1, #128	; 0x80
        clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8005b5a:	0392      	lsls	r2, r2, #14
 8005b5c:	4013      	ands	r3, r2
        switch (clkprediv)
 8005b5e:	0389      	lsls	r1, r1, #14
 8005b60:	428b      	cmp	r3, r1
 8005b62:	d008      	beq.n	8005b76 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d100      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005b68:	e084      	b.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	0352      	lsls	r2, r2, #13
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d103      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            frequency = HSE_VALUE / 4U;
 8005b72:	4843      	ldr	r0, [pc, #268]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
            break;
 8005b74:	e7e7      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSE_VALUE / 8U;
 8005b76:	4843      	ldr	r0, [pc, #268]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>)
 8005b78:	e7e5      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSE_VALUE / 2U;
 8005b7a:	4843      	ldr	r0, [pc, #268]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
            break;
 8005b7c:	e7e3      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005b7e:	2080      	movs	r0, #128	; 0x80
 8005b80:	4b3d      	ldr	r3, [pc, #244]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005b82:	04c0      	lsls	r0, r0, #19
 8005b84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b86:	4010      	ands	r0, r2
        if((srcclk == RCC_USBCLKSOURCE_PLL) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8005b88:	d11a      	bne.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	0192      	lsls	r2, r2, #6
 8005b8e:	d5da      	bpl.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8005b90:	68da      	ldr	r2, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8005b92:	483e      	ldr	r0, [pc, #248]	; (8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>)
            plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8005b94:	68d9      	ldr	r1, [r3, #12]
            pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8005b96:	0292      	lsls	r2, r2, #10
 8005b98:	0f12      	lsrs	r2, r2, #28
 8005b9a:	5c80      	ldrb	r0, [r0, r2]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8005b9c:	0209      	lsls	r1, r1, #8
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8005b9e:	68da      	ldr	r2, [r3, #12]
            plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;   
 8005ba0:	0f89      	lsrs	r1, r1, #30
 8005ba2:	3101      	adds	r1, #1
            if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)
 8005ba4:	03d2      	lsls	r2, r2, #15
 8005ba6:	d407      	bmi.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
                if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	06db      	lsls	r3, r3, #27
 8005bac:	d406      	bmi.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
                    pllvco =  HSI_VALUE;
 8005bae:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
            pllvco = (pllvco * pllmul);
 8005bb0:	4358      	muls	r0, r3
            frequency = (pllvco/ plldiv);
 8005bb2:	f7fa fab3 	bl	800011c <__udivsi3>
 8005bb6:	e7c6      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
                pllvco = HSE_VALUE;
 8005bb8:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>)
 8005bba:	e7f9      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
                    pllvco =  (HSI_VALUE >> 2U);
 8005bbc:	4b32      	ldr	r3, [pc, #200]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>)
 8005bbe:	e7f7      	b.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4013      	ands	r3, r2
            frequency = 0U;
 8005bc6:	1e18      	subs	r0, r3, #0
        else if((srcclk == RCC_USBCLKSOURCE_HSI48) && (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)))
 8005bc8:	d0bd      	beq.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = HSI48_VALUE;
 8005bca:	4833      	ldr	r0, [pc, #204]	; (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>)
 8005bcc:	e7bb      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d103      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005bd2:	6813      	ldr	r3, [r2, #0]
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	e026      	b.n	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d102      	bne.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = HAL_RCC_GetSysClockFreq();
 8005bde:	f7ff fd79 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8005be2:	e7b0      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
            frequency = 0U;
 8005be4:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d1ad      	bne.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8005bea:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8005bec:	0580      	lsls	r0, r0, #22
 8005bee:	e79e      	b.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005bf0:	210c      	movs	r1, #12
 8005bf2:	4a21      	ldr	r2, [pc, #132]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005bf4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005bf6:	400b      	ands	r3, r1
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005bf8:	d102      	bne.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005bfa:	f7ff fe5f 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8005bfe:	e7a2      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d0e6      	beq.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d0ea      	beq.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = 0U;
 8005c08:	2000      	movs	r0, #0
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	d19b      	bne.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8005c0e:	e7ec      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x136>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005c10:	21c0      	movs	r1, #192	; 0xc0
 8005c12:	4a19      	ldr	r2, [pc, #100]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005c14:	0109      	lsls	r1, r1, #4
 8005c16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005c18:	400b      	ands	r3, r1
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005c1a:	d0ee      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if ((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005c1c:	2480      	movs	r4, #128	; 0x80
 8005c1e:	0124      	lsls	r4, r4, #4
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d106      	bne.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8005c24:	6813      	ldr	r3, [r2, #0]
 8005c26:	4003      	ands	r3, r0
            frequency = 0U;
 8005c28:	1e18      	subs	r0, r3, #0
      else if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005c2a:	d100      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005c2c:	e78b      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        frequency = HSI_VALUE;
 8005c2e:	4818      	ldr	r0, [pc, #96]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>)
 8005c30:	e789      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005c32:	2080      	movs	r0, #128	; 0x80
 8005c34:	00c0      	lsls	r0, r0, #3
 8005c36:	4283      	cmp	r3, r0
 8005c38:	d0d1      	beq.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
            frequency = 0U;
 8005c3a:	2000      	movs	r0, #0
      else if ((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY)))
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	d000      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
 8005c40:	e781      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8005c42:	e7d2      	b.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x136>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005c44:	21c0      	movs	r1, #192	; 0xc0
 8005c46:	4a0c      	ldr	r2, [pc, #48]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005c48:	0189      	lsls	r1, r1, #6
 8005c4a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005c4c:	400b      	ands	r3, r1
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005c4e:	d0d4      	beq.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      else if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005c50:	2180      	movs	r1, #128	; 0x80
 8005c52:	0189      	lsls	r1, r1, #6
 8005c54:	428b      	cmp	r3, r1
 8005c56:	d0bc      	beq.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	0152      	lsls	r2, r2, #5
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d000      	beq.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8005c60:	e744      	b.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005c62:	e7bc      	b.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
      if (READ_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))==RCC_APB1ENR_I2C2EN)
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8005c66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	03db      	lsls	r3, r3, #15
 8005c6c:	4018      	ands	r0, r3
 8005c6e:	d100      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005c70:	e769      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8005c72:	e7c2      	b.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE / 16U;
 8005c74:	4809      	ldr	r0, [pc, #36]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>)
 8005c76:	e766      	b.n	8005b46 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	00009088 	.word	0x00009088
 8005c80:	001e8480 	.word	0x001e8480
 8005c84:	000f4240 	.word	0x000f4240
 8005c88:	003d0900 	.word	0x003d0900
 8005c8c:	08008405 	.word	0x08008405
 8005c90:	00f42400 	.word	0x00f42400
 8005c94:	007a1200 	.word	0x007a1200
 8005c98:	02dc6c00 	.word	0x02dc6c00
 8005c9c:	0007a120 	.word	0x0007a120

08005ca0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ca2:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ca4:	1c45      	adds	r5, r0, #1
 8005ca6:	7feb      	ldrb	r3, [r5, #31]
{
 8005ca8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005caa:	0038      	movs	r0, r7
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d024      	beq.n	8005cfa <HAL_RTC_DeactivateAlarm+0x5a>
 8005cb0:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb2:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8005cb4:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cb6:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cb8:	19e6      	adds	r6, r4, r7
 8005cba:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cbc:	625a      	str	r2, [r3, #36]	; 0x24
 8005cbe:	3a77      	subs	r2, #119	; 0x77
 8005cc0:	625a      	str	r2, [r3, #36]	; 0x24

  if(Alarm == RTC_ALARM_A)
 8005cc2:	32ad      	adds	r2, #173	; 0xad
 8005cc4:	4291      	cmp	r1, r2
 8005cc6:	d128      	bne.n	8005d1a <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	4921      	ldr	r1, [pc, #132]	; (8005d50 <HAL_RTC_DeactivateAlarm+0xb0>)
 8005ccc:	400a      	ands	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	4920      	ldr	r1, [pc, #128]	; (8005d54 <HAL_RTC_DeactivateAlarm+0xb4>)
 8005cd4:	400a      	ands	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8005cd8:	f7fe fe60 	bl	800499c <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005cdc:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 8005cde:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	68df      	ldr	r7, [r3, #12]
 8005ce6:	9b01      	ldr	r3, [sp, #4]
 8005ce8:	401f      	ands	r7, r3
 8005cea:	d007      	beq.n	8005cfc <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cec:	22ff      	movs	r2, #255	; 0xff
 8005cee:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cf0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cf2:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8005cf8:	77e8      	strb	r0, [r5, #31]

  return HAL_OK; 
}
 8005cfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if( (HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005cfc:	f7fe fe4e 	bl	800499c <HAL_GetTick>
 8005d00:	9b00      	ldr	r3, [sp, #0]
 8005d02:	1ac0      	subs	r0, r0, r3
 8005d04:	23fa      	movs	r3, #250	; 0xfa
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4298      	cmp	r0, r3
 8005d0a:	d9ea      	bls.n	8005ce2 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d0c:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d0e:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d14:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8005d16:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 8005d18:	e7ef      	b.n	8005cfa <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	490e      	ldr	r1, [pc, #56]	; (8005d58 <HAL_RTC_DeactivateAlarm+0xb8>)
 8005d1e:	400a      	ands	r2, r1
 8005d20:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	490d      	ldr	r1, [pc, #52]	; (8005d5c <HAL_RTC_DeactivateAlarm+0xbc>)
 8005d26:	400a      	ands	r2, r1
 8005d28:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005d2a:	f7fe fe37 	bl	800499c <HAL_GetTick>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005d2e:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 8005d30:	9000      	str	r0, [sp, #0]
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	68df      	ldr	r7, [r3, #12]
 8005d36:	9b01      	ldr	r3, [sp, #4]
 8005d38:	401f      	ands	r7, r3
 8005d3a:	d1d7      	bne.n	8005cec <HAL_RTC_DeactivateAlarm+0x4c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d3c:	f7fe fe2e 	bl	800499c <HAL_GetTick>
 8005d40:	9b00      	ldr	r3, [sp, #0]
 8005d42:	1ac0      	subs	r0, r0, r3
 8005d44:	23fa      	movs	r3, #250	; 0xfa
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4298      	cmp	r0, r3
 8005d4a:	d9f2      	bls.n	8005d32 <HAL_RTC_DeactivateAlarm+0x92>
 8005d4c:	e7de      	b.n	8005d0c <HAL_RTC_DeactivateAlarm+0x6c>
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	fffffeff 	.word	0xfffffeff
 8005d54:	ffffefff 	.word	0xffffefff
 8005d58:	fffffdff 	.word	0xfffffdff
 8005d5c:	ffffdfff 	.word	0xffffdfff

08005d60 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d60:	21a0      	movs	r1, #160	; 0xa0
 8005d62:	6802      	ldr	r2, [r0, #0]
{
 8005d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d66:	68d3      	ldr	r3, [r2, #12]
{
 8005d68:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d6a:	438b      	bics	r3, r1
 8005d6c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005d6e:	f7fe fe15 	bl	800499c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d72:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8005d74:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d76:	2520      	movs	r5, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d78:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	422b      	tst	r3, r5
 8005d80:	d001      	beq.n	8005d86 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8005d82:	2000      	movs	r0, #0
}
 8005d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d86:	f7fe fe09 	bl	800499c <HAL_GetTick>
 8005d8a:	1b80      	subs	r0, r0, r6
 8005d8c:	42b8      	cmp	r0, r7
 8005d8e:	d9f4      	bls.n	8005d7a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8005d90:	2003      	movs	r0, #3
 8005d92:	e7f7      	b.n	8005d84 <HAL_RTC_WaitForSynchro+0x24>

08005d94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d96:	2440      	movs	r4, #64	; 0x40
 8005d98:	6803      	ldr	r3, [r0, #0]
{
 8005d9a:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	4222      	tst	r2, r4
 8005da0:	d001      	beq.n	8005da6 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005da2:	2000      	movs	r0, #0
}
 8005da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005da6:	2201      	movs	r2, #1
 8005da8:	4252      	negs	r2, r2
 8005daa:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005dac:	f7fe fdf6 	bl	800499c <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005db0:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8005db2:	0006      	movs	r6, r0
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005db4:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005db6:	682b      	ldr	r3, [r5, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	4223      	tst	r3, r4
 8005dbc:	d1f1      	bne.n	8005da2 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005dbe:	f7fe fded 	bl	800499c <HAL_GetTick>
 8005dc2:	1b80      	subs	r0, r0, r6
 8005dc4:	42b8      	cmp	r0, r7
 8005dc6:	d9f6      	bls.n	8005db6 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8005dc8:	2003      	movs	r0, #3
 8005dca:	e7eb      	b.n	8005da4 <RTC_EnterInitMode+0x10>

08005dcc <HAL_RTC_Init>:
{
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	0004      	movs	r4, r0
     return HAL_ERROR;
 8005dd0:	2001      	movs	r0, #1
  if(hrtc == NULL)
 8005dd2:	2c00      	cmp	r4, #0
 8005dd4:	d01b      	beq.n	8005e0e <HAL_RTC_Init+0x42>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005dd6:	1ca5      	adds	r5, r4, #2
 8005dd8:	7feb      	ldrb	r3, [r5, #31]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <HAL_RTC_Init+0x1e>
    hrtc->Lock = HAL_UNLOCKED;
 8005de0:	1822      	adds	r2, r4, r0
 8005de2:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 8005de4:	0020      	movs	r0, r4
 8005de6:	f7fc fe81 	bl	8002aec <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dea:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dec:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dee:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005df0:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005df2:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24
 8005df6:	3a77      	subs	r2, #119	; 0x77
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005dfa:	f7ff ffcb 	bl	8005d94 <RTC_EnterInitMode>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d005      	beq.n	8005e10 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e04:	22ff      	movs	r2, #255	; 0xff
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e08:	2304      	movs	r3, #4
    return HAL_ERROR;
 8005e0a:	2001      	movs	r0, #1
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e0c:	77eb      	strb	r3, [r5, #31]
}
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e10:	689a      	ldr	r2, [r3, #8]
 8005e12:	4912      	ldr	r1, [pc, #72]	; (8005e5c <HAL_RTC_Init+0x90>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e14:	6926      	ldr	r6, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e16:	400a      	ands	r2, r1
 8005e18:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e1a:	6862      	ldr	r2, [r4, #4]
 8005e1c:	6899      	ldr	r1, [r3, #8]
 8005e1e:	4332      	orrs	r2, r6
 8005e20:	69a6      	ldr	r6, [r4, #24]
 8005e22:	4332      	orrs	r2, r6
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e28:	68e2      	ldr	r2, [r4, #12]
 8005e2a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005e2c:	68a2      	ldr	r2, [r4, #8]
 8005e2e:	6919      	ldr	r1, [r3, #16]
 8005e30:	0412      	lsls	r2, r2, #16
 8005e32:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005e34:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005e36:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	438a      	bics	r2, r1
 8005e3c:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e40:	397d      	subs	r1, #125	; 0x7d
 8005e42:	438a      	bics	r2, r1
 8005e44:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005e46:	69e2      	ldr	r2, [r4, #28]
 8005e48:	6964      	ldr	r4, [r4, #20]
 8005e4a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005e4c:	4322      	orrs	r2, r4
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e52:	22ff      	movs	r2, #255	; 0xff
 8005e54:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005e56:	2301      	movs	r3, #1
 8005e58:	77eb      	strb	r3, [r5, #31]
    return HAL_OK;
 8005e5a:	e7d8      	b.n	8005e0e <HAL_RTC_Init+0x42>
 8005e5c:	ff8fffbf 	.word	0xff8fffbf

08005e60 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005e60:	2300      	movs	r3, #0

  while(Value >= 10U)
 8005e62:	2809      	cmp	r0, #9
 8005e64:	d803      	bhi.n	8005e6e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	4318      	orrs	r0, r3
 8005e6a:	b2c0      	uxtb	r0, r0
}
 8005e6c:	4770      	bx	lr
    Value -= 10U;
 8005e6e:	380a      	subs	r0, #10
    bcdhigh++;
 8005e70:	3301      	adds	r3, #1
    Value -= 10U;
 8005e72:	b2c0      	uxtb	r0, r0
 8005e74:	e7f5      	b.n	8005e62 <RTC_ByteToBcd2+0x2>
	...

08005e78 <HAL_RTC_SetTime>:
{
 8005e78:	2302      	movs	r3, #2
 8005e7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005e7c:	1c47      	adds	r7, r0, #1
{
 8005e7e:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8005e80:	7ff9      	ldrb	r1, [r7, #31]
{
 8005e82:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8005e84:	001e      	movs	r6, r3
 8005e86:	2901      	cmp	r1, #1
 8005e88:	d036      	beq.n	8005ef8 <HAL_RTC_SetTime+0x80>
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e8e:	18c1      	adds	r1, r0, r3
 8005e90:	77cb      	strb	r3, [r1, #31]
 8005e92:	9100      	str	r1, [sp, #0]
 8005e94:	2140      	movs	r1, #64	; 0x40
 8005e96:	6803      	ldr	r3, [r0, #0]
 8005e98:	7866      	ldrb	r6, [r4, #1]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	7820      	ldrb	r0, [r4, #0]
 8005e9e:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	d12b      	bne.n	8005efc <HAL_RTC_SetTime+0x84>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d100      	bne.n	8005eaa <HAL_RTC_SetTime+0x32>
      sTime->TimeFormat = 0x00U;
 8005ea8:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005eaa:	f7ff ffd9 	bl	8005e60 <RTC_ByteToBcd2>
 8005eae:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005eb0:	0030      	movs	r0, r6
 8005eb2:	f7ff ffd5 	bl	8005e60 <RTC_ByteToBcd2>
 8005eb6:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005eb8:	78a0      	ldrb	r0, [r4, #2]
 8005eba:	f7ff ffd1 	bl	8005e60 <RTC_ByteToBcd2>
 8005ebe:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005ec0:	78e0      	ldrb	r0, [r4, #3]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ec2:	0236      	lsls	r6, r6, #8
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005ec4:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ec6:	4318      	orrs	r0, r3
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	4318      	orrs	r0, r3
 8005ece:	4330      	orrs	r0, r6
 8005ed0:	9001      	str	r0, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ed2:	22ca      	movs	r2, #202	; 0xca
 8005ed4:	682b      	ldr	r3, [r5, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ed6:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24
 8005eda:	3a77      	subs	r2, #119	; 0x77
 8005edc:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ede:	f7ff ff59 	bl	8005d94 <RTC_EnterInitMode>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	1e06      	subs	r6, r0, #0
 8005ee6:	d016      	beq.n	8005f16 <HAL_RTC_SetTime+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee8:	22ff      	movs	r2, #255	; 0xff
 8005eea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eec:	2304      	movs	r3, #4
 8005eee:	9a00      	ldr	r2, [sp, #0]
 8005ef0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8005ef6:	2601      	movs	r6, #1
}
 8005ef8:	0030      	movs	r0, r6
 8005efa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d100      	bne.n	8005f02 <HAL_RTC_SetTime+0x8a>
      sTime->TimeFormat = 0x00U;
 8005f00:	70e3      	strb	r3, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f02:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f04:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f06:	4306      	orrs	r6, r0
              ((uint32_t)sTime->Seconds) | \
 8005f08:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005f0a:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005f0c:	78e0      	ldrb	r0, [r4, #3]
 8005f0e:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005f10:	4306      	orrs	r6, r0
 8005f12:	9601      	str	r6, [sp, #4]
 8005f14:	e7dd      	b.n	8005ed2 <HAL_RTC_SetTime+0x5a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f16:	4815      	ldr	r0, [pc, #84]	; (8005f6c <HAL_RTC_SetTime+0xf4>)
 8005f18:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005f1a:	4915      	ldr	r1, [pc, #84]	; (8005f70 <HAL_RTC_SetTime+0xf8>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f1c:	4002      	ands	r2, r0
 8005f1e:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005f20:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f22:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8005f24:	400a      	ands	r2, r1
 8005f26:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f28:	68e2      	ldr	r2, [r4, #12]
 8005f2a:	6899      	ldr	r1, [r3, #8]
 8005f2c:	4302      	orrs	r2, r0
 8005f2e:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f30:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f32:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	438a      	bics	r2, r1
 8005f38:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	069b      	lsls	r3, r3, #26
 8005f3e:	d40c      	bmi.n	8005f5a <HAL_RTC_SetTime+0xe2>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f40:	0028      	movs	r0, r5
 8005f42:	f7ff ff0d 	bl	8005d60 <HAL_RTC_WaitForSynchro>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d007      	beq.n	8005f5a <HAL_RTC_SetTime+0xe2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f4a:	22ff      	movs	r2, #255	; 0xff
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f50:	2304      	movs	r3, #4
 8005f52:	9a00      	ldr	r2, [sp, #0]
 8005f54:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8005f56:	77fe      	strb	r6, [r7, #31]
 8005f58:	e7cd      	b.n	8005ef6 <HAL_RTC_SetTime+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f5a:	22ff      	movs	r2, #255	; 0xff
 8005f5c:	682b      	ldr	r3, [r5, #0]
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8005f60:	2301      	movs	r3, #1
 8005f62:	9a00      	ldr	r2, [sp, #0]
 8005f64:	77d3      	strb	r3, [r2, #31]
   __HAL_UNLOCK(hrtc); 
 8005f66:	2300      	movs	r3, #0
 8005f68:	77fb      	strb	r3, [r7, #31]
   return HAL_OK;
 8005f6a:	e7c5      	b.n	8005ef8 <HAL_RTC_SetTime+0x80>
 8005f6c:	007f7f7f 	.word	0x007f7f7f
 8005f70:	fffbffff 	.word	0xfffbffff

08005f74 <HAL_RTC_SetDate>:
{
 8005f74:	2302      	movs	r3, #2
 8005f76:	b5f0      	push	{r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8005f78:	1c47      	adds	r7, r0, #1
{
 8005f7a:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 8005f7c:	7ff9      	ldrb	r1, [r7, #31]
{
 8005f7e:	b085      	sub	sp, #20
 8005f80:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 8005f82:	001e      	movs	r6, r3
 8005f84:	2901      	cmp	r1, #1
 8005f86:	d035      	beq.n	8005ff4 <HAL_RTC_SetDate+0x80>
 8005f88:	2101      	movs	r1, #1
 8005f8a:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f8c:	18c1      	adds	r1, r0, r3
 8005f8e:	9101      	str	r1, [sp, #4]
 8005f90:	77cb      	strb	r3, [r1, #31]
 8005f92:	786b      	ldrb	r3, [r5, #1]
 8005f94:	78e8      	ldrb	r0, [r5, #3]
 8005f96:	78ae      	ldrb	r6, [r5, #2]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	d14e      	bne.n	800603a <HAL_RTC_SetDate+0xc6>
 8005f9c:	3210      	adds	r2, #16
 8005f9e:	4213      	tst	r3, r2
 8005fa0:	d002      	beq.n	8005fa8 <HAL_RTC_SetDate+0x34>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005fa2:	4393      	bics	r3, r2
 8005fa4:	330a      	adds	r3, #10
 8005fa6:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fa8:	f7ff ff5a 	bl	8005e60 <RTC_ByteToBcd2>
 8005fac:	9002      	str	r0, [sp, #8]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005fae:	7868      	ldrb	r0, [r5, #1]
 8005fb0:	f7ff ff56 	bl	8005e60 <RTC_ByteToBcd2>
 8005fb4:	9003      	str	r0, [sp, #12]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005fb6:	0030      	movs	r0, r6
 8005fb8:	f7ff ff52 	bl	8005e60 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fbc:	9b02      	ldr	r3, [sp, #8]
                 ((uint32_t)sDate->WeekDay << 13U));
 8005fbe:	782d      	ldrb	r5, [r5, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fc0:	041e      	lsls	r6, r3, #16
                 ((uint32_t)sDate->WeekDay << 13U));
 8005fc2:	036d      	lsls	r5, r5, #13
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005fc4:	9b03      	ldr	r3, [sp, #12]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005fc6:	4305      	orrs	r5, r0
 8005fc8:	4335      	orrs	r5, r6
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005fca:	021e      	lsls	r6, r3, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fcc:	22ca      	movs	r2, #202	; 0xca
 8005fce:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fd0:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8005fd4:	3a77      	subs	r2, #119	; 0x77
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fd8:	f7ff fedc 	bl	8005d94 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005fdc:	4335      	orrs	r5, r6
 8005fde:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fe0:	1e06      	subs	r6, r0, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RTC_SetDate+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005fe8:	2304      	movs	r3, #4
 8005fea:	9a01      	ldr	r2, [sp, #4]
 8005fec:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8005ff2:	2601      	movs	r6, #1
}
 8005ff4:	0030      	movs	r0, r6
 8005ff6:	b005      	add	sp, #20
 8005ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ffa:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005ffc:	4812      	ldr	r0, [pc, #72]	; (8006048 <HAL_RTC_SetDate+0xd4>)
 8005ffe:	4005      	ands	r5, r0
 8006000:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	438a      	bics	r2, r1
 8006006:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	069b      	lsls	r3, r3, #26
 800600c:	d40c      	bmi.n	8006028 <HAL_RTC_SetDate+0xb4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800600e:	0020      	movs	r0, r4
 8006010:	f7ff fea6 	bl	8005d60 <HAL_RTC_WaitForSynchro>
 8006014:	2800      	cmp	r0, #0
 8006016:	d007      	beq.n	8006028 <HAL_RTC_SetDate+0xb4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8006018:	22ff      	movs	r2, #255	; 0xff
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800601e:	2304      	movs	r3, #4
 8006020:	9a01      	ldr	r2, [sp, #4]
 8006022:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8006024:	77fe      	strb	r6, [r7, #31]
 8006026:	e7e4      	b.n	8005ff2 <HAL_RTC_SetDate+0x7e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006028:	22ff      	movs	r2, #255	; 0xff
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 800602e:	2301      	movs	r3, #1
 8006030:	9a01      	ldr	r2, [sp, #4]
 8006032:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006034:	2300      	movs	r3, #0
 8006036:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8006038:	e7dc      	b.n	8005ff4 <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800603a:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800603c:	021b      	lsls	r3, r3, #8
                  (((uint32_t)sDate->WeekDay) << 13U));
 800603e:	782d      	ldrb	r5, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006040:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8006042:	431e      	orrs	r6, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006044:	036d      	lsls	r5, r5, #13
 8006046:	e7c1      	b.n	8005fcc <HAL_RTC_SetDate+0x58>
 8006048:	00ffff3f 	.word	0x00ffff3f

0800604c <HAL_RTC_SetAlarm_IT>:
{
 800604c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	9300      	str	r3, [sp, #0]
{
 8006052:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8006054:	7fd9      	ldrb	r1, [r3, #31]
 8006056:	2302      	movs	r3, #2
{
 8006058:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800605a:	0018      	movs	r0, r3
 800605c:	2901      	cmp	r1, #1
 800605e:	d100      	bne.n	8006062 <HAL_RTC_SetAlarm_IT+0x16>
 8006060:	e08d      	b.n	800617e <HAL_RTC_SetAlarm_IT+0x132>
 8006062:	2101      	movs	r1, #1
 8006064:	1860      	adds	r0, r4, r1
 8006066:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006068:	18e1      	adds	r1, r4, r3
 800606a:	77cb      	strb	r3, [r1, #31]
 800606c:	2140      	movs	r1, #64	; 0x40
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	7828      	ldrb	r0, [r5, #0]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	786e      	ldrb	r6, [r5, #1]
 8006076:	78af      	ldrb	r7, [r5, #2]
 8006078:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 800607a:	2a00      	cmp	r2, #0
 800607c:	d15d      	bne.n	800613a <HAL_RTC_SetAlarm_IT+0xee>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800607e:	2b00      	cmp	r3, #0
 8006080:	d100      	bne.n	8006084 <HAL_RTC_SetAlarm_IT+0x38>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006082:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006084:	f7ff feec 	bl	8005e60 <RTC_ByteToBcd2>
 8006088:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800608a:	0030      	movs	r0, r6
 800608c:	f7ff fee8 	bl	8005e60 <RTC_ByteToBcd2>
 8006090:	0006      	movs	r6, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006092:	0038      	movs	r0, r7
 8006094:	f7ff fee4 	bl	8005e60 <RTC_ByteToBcd2>
 8006098:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800609a:	1c6b      	adds	r3, r5, #1
 800609c:	7fd8      	ldrb	r0, [r3, #31]
 800609e:	f7ff fedf 	bl	8005e60 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80060a2:	696a      	ldr	r2, [r5, #20]
 80060a4:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80060a6:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80060a8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80060aa:	78ea      	ldrb	r2, [r5, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80060ac:	0600      	lsls	r0, r0, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80060ae:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80060b0:	4313      	orrs	r3, r2
 80060b2:	431f      	orrs	r7, r3
 80060b4:	9b01      	ldr	r3, [sp, #4]
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	431f      	orrs	r7, r3
 80060ba:	4337      	orrs	r7, r6
 80060bc:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80060be:	69aa      	ldr	r2, [r5, #24]
 80060c0:	686b      	ldr	r3, [r5, #4]
  if(sAlarm->Alarm == RTC_ALARM_A)
 80060c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80060c4:	4313      	orrs	r3, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060c6:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80060c8:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	625a      	str	r2, [r3, #36]	; 0x24
 80060ce:	3a77      	subs	r2, #119	; 0x77
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 80060d2:	32ad      	adds	r2, #173	; 0xad
 80060d4:	4291      	cmp	r1, r2
 80060d6:	d153      	bne.n	8006180 <HAL_RTC_SetAlarm_IT+0x134>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	493c      	ldr	r1, [pc, #240]	; (80061cc <HAL_RTC_SetAlarm_IT+0x180>)
 80060dc:	400a      	ands	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80060e0:	68d9      	ldr	r1, [r3, #12]
 80060e2:	4a3b      	ldr	r2, [pc, #236]	; (80061d0 <HAL_RTC_SetAlarm_IT+0x184>)
 80060e4:	b2c9      	uxtb	r1, r1
 80060e6:	430a      	orrs	r2, r1
 80060e8:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80060ea:	f7fe fc57 	bl	800499c <HAL_GetTick>
 80060ee:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80060f0:	2201      	movs	r2, #1
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	68dd      	ldr	r5, [r3, #12]
 80060f6:	4015      	ands	r5, r2
 80060f8:	d032      	beq.n	8006160 <HAL_RTC_SetAlarm_IT+0x114>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80060fa:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80060fc:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006100:	2280      	movs	r2, #128	; 0x80
 8006102:	6899      	ldr	r1, [r3, #8]
 8006104:	0052      	lsls	r2, r2, #1
 8006106:	430a      	orrs	r2, r1
 8006108:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800610a:	2280      	movs	r2, #128	; 0x80
 800610c:	6899      	ldr	r1, [r3, #8]
 800610e:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006110:	430a      	orrs	r2, r1
 8006112:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006114:	2280      	movs	r2, #128	; 0x80
 8006116:	4b2f      	ldr	r3, [pc, #188]	; (80061d4 <HAL_RTC_SetAlarm_IT+0x188>)
 8006118:	0292      	lsls	r2, r2, #10
 800611a:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800611c:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800611e:	4311      	orrs	r1, r2
 8006120:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006122:	6899      	ldr	r1, [r3, #8]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006128:	22ff      	movs	r2, #255	; 0xff
 800612a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_READY; 
 800612c:	3402      	adds	r4, #2
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800612e:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 8006130:	2301      	movs	r3, #1
 8006132:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 8006134:	9b00      	ldr	r3, [sp, #0]
 8006136:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8006138:	e021      	b.n	800617e <HAL_RTC_SetAlarm_IT+0x132>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800613a:	2b00      	cmp	r3, #0
 800613c:	d100      	bne.n	8006140 <HAL_RTC_SetAlarm_IT+0xf4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800613e:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006140:	69eb      	ldr	r3, [r5, #28]
 8006142:	696a      	ldr	r2, [r5, #20]
 8006144:	0400      	lsls	r0, r0, #16
 8006146:	4313      	orrs	r3, r2
 8006148:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800614a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800614c:	4307      	orrs	r7, r0
 800614e:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006150:	78ee      	ldrb	r6, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006152:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006154:	0436      	lsls	r6, r6, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006156:	4337      	orrs	r7, r6
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006158:	7fde      	ldrb	r6, [r3, #31]
 800615a:	0636      	lsls	r6, r6, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800615c:	4337      	orrs	r7, r6
 800615e:	e7ae      	b.n	80060be <HAL_RTC_SetAlarm_IT+0x72>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006160:	f7fe fc1c 	bl	800499c <HAL_GetTick>
 8006164:	23fa      	movs	r3, #250	; 0xfa
 8006166:	1b80      	subs	r0, r0, r6
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4298      	cmp	r0, r3
 800616c:	d9c0      	bls.n	80060f0 <HAL_RTC_SetAlarm_IT+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800616e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006170:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006172:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006174:	3402      	adds	r4, #2
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006176:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 8006178:	9b00      	ldr	r3, [sp, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800617a:	77e0      	strb	r0, [r4, #31]
        __HAL_UNLOCK(hrtc);
 800617c:	77dd      	strb	r5, [r3, #31]
}
 800617e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	4915      	ldr	r1, [pc, #84]	; (80061d8 <HAL_RTC_SetAlarm_IT+0x18c>)
 8006184:	400a      	ands	r2, r1
 8006186:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006188:	68d9      	ldr	r1, [r3, #12]
 800618a:	4a14      	ldr	r2, [pc, #80]	; (80061dc <HAL_RTC_SetAlarm_IT+0x190>)
 800618c:	b2c9      	uxtb	r1, r1
 800618e:	430a      	orrs	r2, r1
 8006190:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006192:	f7fe fc03 	bl	800499c <HAL_GetTick>
 8006196:	0006      	movs	r6, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006198:	2202      	movs	r2, #2
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	68dd      	ldr	r5, [r3, #12]
 800619e:	4015      	ands	r5, r2
 80061a0:	d00b      	beq.n	80061ba <HAL_RTC_SetAlarm_IT+0x16e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80061a2:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80061a4:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80061a6:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80061a8:	2280      	movs	r2, #128	; 0x80
 80061aa:	6899      	ldr	r1, [r3, #8]
 80061ac:	0092      	lsls	r2, r2, #2
 80061ae:	430a      	orrs	r2, r1
 80061b0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	6899      	ldr	r1, [r3, #8]
 80061b6:	0192      	lsls	r2, r2, #6
 80061b8:	e7aa      	b.n	8006110 <HAL_RTC_SetAlarm_IT+0xc4>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80061ba:	f7fe fbef 	bl	800499c <HAL_GetTick>
 80061be:	23fa      	movs	r3, #250	; 0xfa
 80061c0:	1b80      	subs	r0, r0, r6
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4298      	cmp	r0, r3
 80061c6:	d9e7      	bls.n	8006198 <HAL_RTC_SetAlarm_IT+0x14c>
 80061c8:	e7d1      	b.n	800616e <HAL_RTC_SetAlarm_IT+0x122>
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	fffffeff 	.word	0xfffffeff
 80061d0:	fffffe7f 	.word	0xfffffe7f
 80061d4:	40010400 	.word	0x40010400
 80061d8:	fffffdff 	.word	0xfffffdff
 80061dc:	fffffd7f 	.word	0xfffffd7f

080061e0 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80061e0:	230a      	movs	r3, #10
 80061e2:	0902      	lsrs	r2, r0, #4
 80061e4:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 80061e6:	220f      	movs	r2, #15
 80061e8:	4010      	ands	r0, r2
 80061ea:	1818      	adds	r0, r3, r0
 80061ec:	b2c0      	uxtb	r0, r0
}
 80061ee:	4770      	bx	lr

080061f0 <HAL_RTC_GetTime>:
{
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 80061f4:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80061f6:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80061f8:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80061fa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80061fc:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80061fe:	690b      	ldr	r3, [r1, #16]
 8006200:	045b      	lsls	r3, r3, #17
 8006202:	0c5b      	lsrs	r3, r3, #17
 8006204:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006206:	680b      	ldr	r3, [r1, #0]
 8006208:	490d      	ldr	r1, [pc, #52]	; (8006240 <HAL_RTC_GetTime+0x50>)
 800620a:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800620c:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800620e:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8006210:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006212:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006214:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006216:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006218:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800621a:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800621c:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800621e:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006220:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8006222:	2a00      	cmp	r2, #0
 8006224:	d10a      	bne.n	800623c <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006226:	f7ff ffdb 	bl	80061e0 <RTC_Bcd2ToByte>
 800622a:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800622c:	0030      	movs	r0, r6
 800622e:	f7ff ffd7 	bl	80061e0 <RTC_Bcd2ToByte>
 8006232:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006234:	0028      	movs	r0, r5
 8006236:	f7ff ffd3 	bl	80061e0 <RTC_Bcd2ToByte>
 800623a:	70a0      	strb	r0, [r4, #2]
}
 800623c:	2000      	movs	r0, #0
 800623e:	bd70      	pop	{r4, r5, r6, pc}
 8006240:	007f7f7f 	.word	0x007f7f7f

08006244 <HAL_RTC_GetDate>:
{
 8006244:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006246:	253f      	movs	r5, #63	; 0x3f
{
 8006248:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800624a:	6803      	ldr	r3, [r0, #0]
 800624c:	490d      	ldr	r1, [pc, #52]	; (8006284 <HAL_RTC_GetDate+0x40>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006252:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006254:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006256:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8006258:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800625a:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800625c:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800625e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006260:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006262:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8006264:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8006266:	2a00      	cmp	r2, #0
 8006268:	d10a      	bne.n	8006280 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800626a:	f7ff ffb9 	bl	80061e0 <RTC_Bcd2ToByte>
 800626e:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006270:	0030      	movs	r0, r6
 8006272:	f7ff ffb5 	bl	80061e0 <RTC_Bcd2ToByte>
 8006276:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006278:	0028      	movs	r0, r5
 800627a:	f7ff ffb1 	bl	80061e0 <RTC_Bcd2ToByte>
 800627e:	70a0      	strb	r0, [r4, #2]
}
 8006280:	2000      	movs	r0, #0
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	00ffff3f 	.word	0x00ffff3f

08006288 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006288:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800628a:	1c41      	adds	r1, r0, #1
 800628c:	7fca      	ldrb	r2, [r1, #31]
{
 800628e:	0003      	movs	r3, r0
 8006290:	2002      	movs	r0, #2
  __HAL_LOCK(hrtc);
 8006292:	2a01      	cmp	r2, #1
 8006294:	d010      	beq.n	80062b8 <HAL_RTCEx_EnableBypassShadow+0x30>

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006296:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006298:	181c      	adds	r4, r3, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800629a:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800629c:	77e0      	strb	r0, [r4, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800629e:	625a      	str	r2, [r3, #36]	; 0x24
 80062a0:	3a77      	subs	r2, #119	; 0x77
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80062a4:	6898      	ldr	r0, [r3, #8]
 80062a6:	3a33      	subs	r2, #51	; 0x33
 80062a8:	4302      	orrs	r2, r0
 80062aa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ac:	22ff      	movs	r2, #255	; 0xff

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062ae:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80062b2:	2301      	movs	r3, #1
 80062b4:	77e3      	strb	r3, [r4, #31]
  __HAL_UNLOCK(hrtc);
 80062b6:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 80062b8:	bd10      	pop	{r4, pc}
	...

080062bc <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80062bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062be:	001d      	movs	r5, r3
 80062c0:	0004      	movs	r4, r0
 80062c2:	000e      	movs	r6, r1
 80062c4:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80062c6:	f7fe fb69 	bl	800499c <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 80062ca:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80062cc:	0007      	movs	r7, r0
  if(Status == RESET)
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d035      	beq.n	800633e <SPI_WaitOnFlagUntilTimeout+0x82>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	6893      	ldr	r3, [r2, #8]
 80062d6:	4033      	ands	r3, r6
 80062d8:	429e      	cmp	r6, r3
 80062da:	d135      	bne.n	8006348 <SPI_WaitOnFlagUntilTimeout+0x8c>
    {
      if(Timeout != HAL_MAX_DELAY)
 80062dc:	1c6b      	adds	r3, r5, #1
 80062de:	d0f9      	beq.n	80062d4 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80062e0:	2d00      	cmp	r5, #0
 80062e2:	d009      	beq.n	80062f8 <SPI_WaitOnFlagUntilTimeout+0x3c>
 80062e4:	f7fe fb5a 	bl	800499c <HAL_GetTick>
 80062e8:	1bc0      	subs	r0, r0, r7
 80062ea:	4285      	cmp	r5, r0
 80062ec:	d2f1      	bcs.n	80062d2 <SPI_WaitOnFlagUntilTimeout+0x16>
 80062ee:	e003      	b.n	80062f8 <SPI_WaitOnFlagUntilTimeout+0x3c>
      if(Timeout != HAL_MAX_DELAY)
 80062f0:	1c6b      	adds	r3, r5, #1
 80062f2:	d025      	beq.n	8006340 <SPI_WaitOnFlagUntilTimeout+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80062f4:	2d00      	cmp	r5, #0
 80062f6:	d11d      	bne.n	8006334 <SPI_WaitOnFlagUntilTimeout+0x78>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062f8:	21e0      	movs	r1, #224	; 0xe0
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	438a      	bics	r2, r1
 8006300:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	39a0      	subs	r1, #160	; 0xa0
 8006306:	438a      	bics	r2, r1

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006308:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 800630a:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800630c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800630e:	0189      	lsls	r1, r1, #6
 8006310:	428a      	cmp	r2, r1
 8006312:	d106      	bne.n	8006322 <SPI_WaitOnFlagUntilTimeout+0x66>
          {
            SPI_RESET_CRC(hspi);
 8006314:	6819      	ldr	r1, [r3, #0]
 8006316:	480d      	ldr	r0, [pc, #52]	; (800634c <SPI_WaitOnFlagUntilTimeout+0x90>)
 8006318:	4001      	ands	r1, r0
 800631a:	6019      	str	r1, [r3, #0]
 800631c:	6819      	ldr	r1, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8006322:	0023      	movs	r3, r4
 8006324:	2201      	movs	r2, #1
 8006326:	3351      	adds	r3, #81	; 0x51
 8006328:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800632a:	2300      	movs	r3, #0
 800632c:	3450      	adds	r4, #80	; 0x50
 800632e:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 8006330:	2003      	movs	r0, #3
 8006332:	e00a      	b.n	800634a <SPI_WaitOnFlagUntilTimeout+0x8e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006334:	f7fe fb32 	bl	800499c <HAL_GetTick>
 8006338:	1bc0      	subs	r0, r0, r7
 800633a:	4285      	cmp	r5, r0
 800633c:	d3dc      	bcc.n	80062f8 <SPI_WaitOnFlagUntilTimeout+0x3c>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	6893      	ldr	r3, [r2, #8]
 8006342:	4033      	ands	r3, r6
 8006344:	429e      	cmp	r6, r3
 8006346:	d1d3      	bne.n	80062f0 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8006348:	2000      	movs	r0, #0
}
 800634a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800634c:	ffffdfff 	.word	0xffffdfff

08006350 <HAL_SPI_MspInit>:
 8006350:	4770      	bx	lr
	...

08006354 <HAL_SPI_Init>:
{
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006358:	2001      	movs	r0, #1
  if(hspi == NULL)
 800635a:	2c00      	cmp	r4, #0
 800635c:	d037      	beq.n	80063ce <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 800635e:	0025      	movs	r5, r4
 8006360:	3551      	adds	r5, #81	; 0x51
 8006362:	782b      	ldrb	r3, [r5, #0]
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 800636a:	0022      	movs	r2, r4
 800636c:	3250      	adds	r2, #80	; 0x50
 800636e:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8006370:	0020      	movs	r0, r4
 8006372:	f7ff ffed 	bl	8006350 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006376:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8006378:	2240      	movs	r2, #64	; 0x40
 800637a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800637c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800637e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006380:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8006382:	4393      	bics	r3, r2
 8006384:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	69a2      	ldr	r2, [r4, #24]
 800638a:	4303      	orrs	r3, r0
 800638c:	68e0      	ldr	r0, [r4, #12]
 800638e:	4303      	orrs	r3, r0
 8006390:	6920      	ldr	r0, [r4, #16]
 8006392:	4303      	orrs	r3, r0
 8006394:	6960      	ldr	r0, [r4, #20]
 8006396:	4303      	orrs	r3, r0
 8006398:	69e0      	ldr	r0, [r4, #28]
 800639a:	4303      	orrs	r3, r0
 800639c:	6a20      	ldr	r0, [r4, #32]
 800639e:	4303      	orrs	r3, r0
 80063a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80063a2:	4303      	orrs	r3, r0
 80063a4:	2080      	movs	r0, #128	; 0x80
 80063a6:	0080      	lsls	r0, r0, #2
 80063a8:	4010      	ands	r0, r2
 80063aa:	4303      	orrs	r3, r0
 80063ac:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063ae:	2304      	movs	r3, #4
 80063b0:	0c12      	lsrs	r2, r2, #16
 80063b2:	401a      	ands	r2, r3
 80063b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063b6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063b8:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80063ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80063bc:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80063be:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063c0:	69cb      	ldr	r3, [r1, #28]
 80063c2:	4a03      	ldr	r2, [pc, #12]	; (80063d0 <HAL_SPI_Init+0x7c>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80063c8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ca:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80063cc:	702b      	strb	r3, [r5, #0]
}
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	fffff7ff 	.word	0xfffff7ff

080063d4 <HAL_SPI_TransmitReceive>:
{
 80063d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d6:	b085      	sub	sp, #20
 80063d8:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 80063da:	a802      	add	r0, sp, #8
 80063dc:	3006      	adds	r0, #6
 80063de:	9001      	str	r0, [sp, #4]
 80063e0:	2000      	movs	r0, #0
 80063e2:	9d01      	ldr	r5, [sp, #4]
 80063e4:	8028      	strh	r0, [r5, #0]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80063e6:	0025      	movs	r5, r4
 80063e8:	3551      	adds	r5, #81	; 0x51
 80063ea:	7828      	ldrb	r0, [r5, #0]
 80063ec:	2801      	cmp	r0, #1
 80063ee:	d004      	beq.n	80063fa <HAL_SPI_TransmitReceive+0x26>
 80063f0:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 80063f2:	2002      	movs	r0, #2
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80063f4:	2e22      	cmp	r6, #34	; 0x22
 80063f6:	d000      	beq.n	80063fa <HAL_SPI_TransmitReceive+0x26>
 80063f8:	e083      	b.n	8006502 <HAL_SPI_TransmitReceive+0x12e>
      return  HAL_ERROR;
 80063fa:	2001      	movs	r0, #1
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 80063fc:	2900      	cmp	r1, #0
 80063fe:	d100      	bne.n	8006402 <HAL_SPI_TransmitReceive+0x2e>
 8006400:	e07f      	b.n	8006502 <HAL_SPI_TransmitReceive+0x12e>
 8006402:	2a00      	cmp	r2, #0
 8006404:	d100      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x34>
 8006406:	e07c      	b.n	8006502 <HAL_SPI_TransmitReceive+0x12e>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d07a      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_LOCK(hspi);
 800640c:	0026      	movs	r6, r4
 800640e:	3650      	adds	r6, #80	; 0x50
 8006410:	7830      	ldrb	r0, [r6, #0]
 8006412:	4684      	mov	ip, r0
 8006414:	4667      	mov	r7, ip
    return HAL_BUSY;
 8006416:	2002      	movs	r0, #2
    __HAL_LOCK(hspi);
 8006418:	2f01      	cmp	r7, #1
 800641a:	d072      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x12e>
 800641c:	3801      	subs	r0, #1
 800641e:	7030      	strb	r0, [r6, #0]
    if(hspi->State == HAL_SPI_STATE_READY)
 8006420:	7828      	ldrb	r0, [r5, #0]
 8006422:	2801      	cmp	r0, #1
 8006424:	d101      	bne.n	800642a <HAL_SPI_TransmitReceive+0x56>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006426:	3031      	adds	r0, #49	; 0x31
 8006428:	7028      	strb	r0, [r5, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800642a:	2000      	movs	r0, #0
    hspi->RxXferSize  = Size;
 800642c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800642e:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->TxXferSize  = Size; 
 8006430:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->RxXferCount = Size;  
 8006432:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->TxXferCount = Size;
 8006434:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006436:	2380      	movs	r3, #128	; 0x80
    hspi->RxISR = 0U;
 8006438:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 800643a:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800643c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->pRxBuffPtr  = pRxData;
 800643e:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->pTxBuffPtr  = pTxData;
 8006440:	6321      	str	r1, [r4, #48]	; 0x30
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006442:	019b      	lsls	r3, r3, #6
 8006444:	4298      	cmp	r0, r3
 8006446:	d107      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x84>
      SPI_RESET_CRC(hspi);
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	4f9d      	ldr	r7, [pc, #628]	; (80066c0 <HAL_SPI_TransmitReceive+0x2ec>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	403a      	ands	r2, r7
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4302      	orrs	r2, r0
 8006456:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	4694      	mov	ip, r2
 800645e:	2240      	movs	r2, #64	; 0x40
 8006460:	4667      	mov	r7, ip
 8006462:	4217      	tst	r7, r2
 8006464:	d102      	bne.n	800646c <HAL_SPI_TransmitReceive+0x98>
      __HAL_SPI_ENABLE(hspi);
 8006466:	681f      	ldr	r7, [r3, #0]
 8006468:	433a      	orrs	r2, r7
 800646a:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800646c:	2280      	movs	r2, #128	; 0x80
 800646e:	0112      	lsls	r2, r2, #4
 8006470:	4694      	mov	ip, r2
 8006472:	68e7      	ldr	r7, [r4, #12]
 8006474:	6862      	ldr	r2, [r4, #4]
 8006476:	4567      	cmp	r7, ip
 8006478:	d000      	beq.n	800647c <HAL_SPI_TransmitReceive+0xa8>
 800647a:	e07e      	b.n	800657a <HAL_SPI_TransmitReceive+0x1a6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 800647c:	2a00      	cmp	r2, #0
 800647e:	d006      	beq.n	800648e <HAL_SPI_TransmitReceive+0xba>
 8006480:	2782      	movs	r7, #130	; 0x82
 8006482:	007f      	lsls	r7, r7, #1
 8006484:	42ba      	cmp	r2, r7
 8006486:	d10a      	bne.n	800649e <HAL_SPI_TransmitReceive+0xca>
 8006488:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800648a:	2a01      	cmp	r2, #1
 800648c:	d107      	bne.n	800649e <HAL_SPI_TransmitReceive+0xca>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800648e:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 8006490:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8006492:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8006494:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2U;
 8006496:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006498:	3a01      	subs	r2, #1
 800649a:	b292      	uxth	r2, r2
 800649c:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 800649e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	d162      	bne.n	800656a <HAL_SPI_TransmitReceive+0x196>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064a4:	2280      	movs	r2, #128	; 0x80
 80064a6:	0192      	lsls	r2, r2, #6
 80064a8:	4290      	cmp	r0, r2
 80064aa:	d104      	bne.n	80064b6 <HAL_SPI_TransmitReceive+0xe2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80064ac:	2280      	movs	r2, #128	; 0x80
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	0152      	lsls	r2, r2, #5
 80064b2:	430a      	orrs	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80064b6:	2200      	movs	r2, #0
 80064b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80064ba:	2101      	movs	r1, #1
 80064bc:	0020      	movs	r0, r4
 80064be:	f7ff fefd 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d11c      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064ca:	68d2      	ldr	r2, [r2, #12]
 80064cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 80064ce:	3302      	adds	r3, #2
 80064d0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 80064d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80064de:	019b      	lsls	r3, r3, #6
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d000      	beq.n	80064e6 <HAL_SPI_TransmitReceive+0x112>
 80064e4:	e0c4      	b.n	8006670 <HAL_SPI_TransmitReceive+0x29c>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80064e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e8:	2200      	movs	r2, #0
 80064ea:	2101      	movs	r1, #1
 80064ec:	0020      	movs	r0, r4
 80064ee:	f7ff fee5 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d100      	bne.n	80064f8 <HAL_SPI_TransmitReceive+0x124>
 80064f6:	e0b4      	b.n	8006662 <HAL_SPI_TransmitReceive+0x28e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80064f8:	2302      	movs	r3, #2
 80064fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fc:	4313      	orrs	r3, r2
 80064fe:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006500:	2003      	movs	r0, #3
}
 8006502:	b005      	add	sp, #20
 8006504:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8006506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006508:	2200      	movs	r2, #0
 800650a:	2102      	movs	r1, #2
 800650c:	0020      	movs	r0, r4
 800650e:	f7ff fed5 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 8006512:	2800      	cmp	r0, #0
 8006514:	d1f4      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8006516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr+=2U;
 800651c:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800651e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2U;
 8006520:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8006522:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006524:	3b01      	subs	r3, #1
 8006526:	b29b      	uxth	r3, r3
 8006528:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800652a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x172>
 8006530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006532:	0019      	movs	r1, r3
 8006534:	2380      	movs	r3, #128	; 0x80
 8006536:	019b      	lsls	r3, r3, #6
 8006538:	4299      	cmp	r1, r3
 800653a:	d104      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x172>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800653c:	2180      	movs	r1, #128	; 0x80
 800653e:	6813      	ldr	r3, [r2, #0]
 8006540:	0149      	lsls	r1, r1, #5
 8006542:	430b      	orrs	r3, r1
 8006544:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8006546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006548:	2200      	movs	r2, #0
 800654a:	2101      	movs	r1, #1
 800654c:	0020      	movs	r0, r4
 800654e:	f7ff feb5 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 8006552:	2800      	cmp	r0, #0
 8006554:	d1d4      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800655a:	68d2      	ldr	r2, [r2, #12]
 800655c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 800655e:	3302      	adds	r3, #2
 8006560:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8006562:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006564:	3b01      	subs	r3, #1
 8006566:	b29b      	uxth	r3, r3
 8006568:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 800656a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1ca      	bne.n	8006506 <HAL_SPI_TransmitReceive+0x132>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8006570:	6862      	ldr	r2, [r4, #4]
 8006572:	2a00      	cmp	r2, #0
 8006574:	d1b1      	bne.n	80064da <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8006576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006578:	e79f      	b.n	80064ba <HAL_SPI_TransmitReceive+0xe6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 800657a:	2a00      	cmp	r2, #0
 800657c:	d006      	beq.n	800658c <HAL_SPI_TransmitReceive+0x1b8>
 800657e:	2782      	movs	r7, #130	; 0x82
 8006580:	007f      	lsls	r7, r7, #1
 8006582:	42ba      	cmp	r2, r7
 8006584:	d10a      	bne.n	800659c <HAL_SPI_TransmitReceive+0x1c8>
 8006586:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006588:	2a01      	cmp	r2, #1
 800658a:	d107      	bne.n	800659c <HAL_SPI_TransmitReceive+0x1c8>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800658c:	1c4a      	adds	r2, r1, #1
 800658e:	6322      	str	r2, [r4, #48]	; 0x30
 8006590:	780a      	ldrb	r2, [r1, #0]
 8006592:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8006594:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006596:	3a01      	subs	r2, #1
 8006598:	b292      	uxth	r2, r2
 800659a:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 800659c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800659e:	2a00      	cmp	r2, #0
 80065a0:	d149      	bne.n	8006636 <HAL_SPI_TransmitReceive+0x262>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065a2:	2280      	movs	r2, #128	; 0x80
 80065a4:	0192      	lsls	r2, r2, #6
 80065a6:	4290      	cmp	r0, r2
 80065a8:	d104      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80065aa:	2280      	movs	r2, #128	; 0x80
 80065ac:	6819      	ldr	r1, [r3, #0]
 80065ae:	0152      	lsls	r2, r2, #5
 80065b0:	430a      	orrs	r2, r1
 80065b2:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80065b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b6:	2200      	movs	r2, #0
 80065b8:	2101      	movs	r1, #1
 80065ba:	0020      	movs	r0, r4
 80065bc:	f7ff fe7e 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d19d      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x12c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	7013      	strb	r3, [r2, #0]
 80065cc:	e781      	b.n	80064d2 <HAL_SPI_TransmitReceive+0xfe>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80065ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d0:	2200      	movs	r2, #0
 80065d2:	2102      	movs	r1, #2
 80065d4:	0020      	movs	r0, r4
 80065d6:	f7ff fe71 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d000      	beq.n	80065e0 <HAL_SPI_TransmitReceive+0x20c>
 80065de:	e78f      	b.n	8006500 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80065e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80065e2:	6822      	ldr	r2, [r4, #0]
 80065e4:	1c59      	adds	r1, r3, #1
 80065e6:	6321      	str	r1, [r4, #48]	; 0x30
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 80065ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80065f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x23c>
 80065fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065fc:	0019      	movs	r1, r3
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	019b      	lsls	r3, r3, #6
 8006602:	4299      	cmp	r1, r3
 8006604:	d104      	bne.n	8006610 <HAL_SPI_TransmitReceive+0x23c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006606:	2180      	movs	r1, #128	; 0x80
 8006608:	6813      	ldr	r3, [r2, #0]
 800660a:	0149      	lsls	r1, r1, #5
 800660c:	430b      	orrs	r3, r1
 800660e:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8006610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006612:	2200      	movs	r2, #0
 8006614:	2101      	movs	r1, #1
 8006616:	0020      	movs	r0, r4
 8006618:	f7ff fe50 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 800661c:	2800      	cmp	r0, #0
 800661e:	d000      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x24e>
 8006620:	e76e      	b.n	8006500 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8006622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	63a2      	str	r2, [r4, #56]	; 0x38
 8006628:	6822      	ldr	r2, [r4, #0]
 800662a:	68d2      	ldr	r2, [r2, #12]
 800662c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800662e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006630:	3b01      	subs	r3, #1
 8006632:	b29b      	uxth	r3, r3
 8006634:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8006636:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1c8      	bne.n	80065ce <HAL_SPI_TransmitReceive+0x1fa>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800663c:	6862      	ldr	r2, [r4, #4]
 800663e:	2a00      	cmp	r2, #0
 8006640:	d000      	beq.n	8006644 <HAL_SPI_TransmitReceive+0x270>
 8006642:	e74a      	b.n	80064da <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8006644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006646:	2101      	movs	r1, #1
 8006648:	0020      	movs	r0, r4
 800664a:	f7ff fe37 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 800664e:	2800      	cmp	r0, #0
 8006650:	d000      	beq.n	8006654 <HAL_SPI_TransmitReceive+0x280>
 8006652:	e755      	b.n	8006500 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8006654:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	63a2      	str	r2, [r4, #56]	; 0x38
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	68d2      	ldr	r2, [r2, #12]
 800665e:	701a      	strb	r2, [r3, #0]
 8006660:	e737      	b.n	80064d2 <HAL_SPI_TransmitReceive+0xfe>
      tmpreg = hspi->Instance->DR;
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	9a01      	ldr	r2, [sp, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	b29b      	uxth	r3, r3
 800666a:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 800666c:	0013      	movs	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8006670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006672:	2201      	movs	r2, #1
 8006674:	2180      	movs	r1, #128	; 0x80
 8006676:	0020      	movs	r0, r4
 8006678:	f7ff fe20 	bl	80062bc <SPI_WaitOnFlagUntilTimeout>
 800667c:	2800      	cmp	r0, #0
 800667e:	d002      	beq.n	8006686 <HAL_SPI_TransmitReceive+0x2b2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006680:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006682:	2320      	movs	r3, #32
 8006684:	e73a      	b.n	80064fc <HAL_SPI_TransmitReceive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 8006686:	2701      	movs	r7, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8006688:	2380      	movs	r3, #128	; 0x80
 800668a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 800668c:	702f      	strb	r7, [r5, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800668e:	019b      	lsls	r3, r3, #6
 8006690:	429a      	cmp	r2, r3
 8006692:	d111      	bne.n	80066b8 <HAL_SPI_TransmitReceive+0x2e4>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	6899      	ldr	r1, [r3, #8]
 8006698:	06c9      	lsls	r1, r1, #27
 800669a:	d50d      	bpl.n	80066b8 <HAL_SPI_TransmitReceive+0x2e4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800669c:	2102      	movs	r1, #2
 800669e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80066a0:	4329      	orrs	r1, r5
 80066a2:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 80066a4:	6819      	ldr	r1, [r3, #0]
 80066a6:	4c06      	ldr	r4, [pc, #24]	; (80066c0 <HAL_SPI_TransmitReceive+0x2ec>)
 80066a8:	4021      	ands	r1, r4
 80066aa:	6019      	str	r1, [r3, #0]
 80066ac:	6819      	ldr	r1, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 80066b2:	7030      	strb	r0, [r6, #0]
      return HAL_ERROR; 
 80066b4:	0038      	movs	r0, r7
 80066b6:	e724      	b.n	8006502 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_UNLOCK(hspi);
 80066b8:	2300      	movs	r3, #0
 80066ba:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 80066bc:	e721      	b.n	8006502 <HAL_SPI_TransmitReceive+0x12e>
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	ffffdfff 	.word	0xffffdfff

080066c4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c4:	6803      	ldr	r3, [r0, #0]
 80066c6:	4906      	ldr	r1, [pc, #24]	; (80066e0 <UART_EndRxTransfer+0x1c>)
 80066c8:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ca:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066cc:	400a      	ands	r2, r1
 80066ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	3123      	adds	r1, #35	; 0x23
 80066d4:	31ff      	adds	r1, #255	; 0xff
 80066d6:	438a      	bics	r2, r1
 80066d8:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 80066da:	2320      	movs	r3, #32
 80066dc:	7003      	strb	r3, [r0, #0]
}
 80066de:	4770      	bx	lr
 80066e0:	fffffedf 	.word	0xfffffedf

080066e4 <HAL_UART_Transmit_DMA>:
{
 80066e4:	0013      	movs	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80066e6:	0002      	movs	r2, r0
{
 80066e8:	b570      	push	{r4, r5, r6, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 80066ea:	3269      	adds	r2, #105	; 0x69
 80066ec:	7814      	ldrb	r4, [r2, #0]
{
 80066ee:	0005      	movs	r5, r0
    return HAL_BUSY;
 80066f0:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 80066f2:	2c20      	cmp	r4, #32
 80066f4:	d134      	bne.n	8006760 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 80066f6:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d031      	beq.n	8006760 <HAL_UART_Transmit_DMA+0x7c>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d02f      	beq.n	8006760 <HAL_UART_Transmit_DMA+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006700:	2480      	movs	r4, #128	; 0x80
 8006702:	68ae      	ldr	r6, [r5, #8]
 8006704:	0164      	lsls	r4, r4, #5
 8006706:	42a6      	cmp	r6, r4
 8006708:	d104      	bne.n	8006714 <HAL_UART_Transmit_DMA+0x30>
 800670a:	692c      	ldr	r4, [r5, #16]
 800670c:	2c00      	cmp	r4, #0
 800670e:	d101      	bne.n	8006714 <HAL_UART_Transmit_DMA+0x30>
      if((((uint32_t)pData)&1) != 0)
 8006710:	4201      	tst	r1, r0
 8006712:	d125      	bne.n	8006760 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 8006714:	002e      	movs	r6, r5
 8006716:	3668      	adds	r6, #104	; 0x68
 8006718:	7834      	ldrb	r4, [r6, #0]
    return HAL_BUSY;
 800671a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800671c:	2c01      	cmp	r4, #1
 800671e:	d01f      	beq.n	8006760 <HAL_UART_Transmit_DMA+0x7c>
 8006720:	3801      	subs	r0, #1
 8006722:	7030      	strb	r0, [r6, #0]
    huart->TxXferSize = Size;
 8006724:	0028      	movs	r0, r5
 8006726:	3050      	adds	r0, #80	; 0x50
    huart->pTxBuffPtr = pData;
 8006728:	64e9      	str	r1, [r5, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672a:	2400      	movs	r4, #0
    huart->TxXferSize = Size;
 800672c:	8003      	strh	r3, [r0, #0]
    huart->TxXferCount = Size;
 800672e:	8043      	strh	r3, [r0, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006730:	2021      	movs	r0, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006732:	66ec      	str	r4, [r5, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006734:	7010      	strb	r0, [r2, #0]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006736:	6e28      	ldr	r0, [r5, #96]	; 0x60
 8006738:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <HAL_UART_Transmit_DMA+0x80>)
    huart->hdmatx->XferAbortCallback = NULL;
 800673a:	6384      	str	r4, [r0, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800673c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800673e:	4a0a      	ldr	r2, [pc, #40]	; (8006768 <HAL_UART_Transmit_DMA+0x84>)
 8006740:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006742:	4a0a      	ldr	r2, [pc, #40]	; (800676c <HAL_UART_Transmit_DMA+0x88>)
 8006744:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8006746:	682a      	ldr	r2, [r5, #0]
 8006748:	3228      	adds	r2, #40	; 0x28
 800674a:	f7fe faeb 	bl	8004d24 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800674e:	2240      	movs	r2, #64	; 0x40
    return HAL_OK;
 8006750:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006752:	682b      	ldr	r3, [r5, #0]
 8006754:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006756:	6899      	ldr	r1, [r3, #8]
 8006758:	1892      	adds	r2, r2, r2
 800675a:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 800675c:	7034      	strb	r4, [r6, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800675e:	609a      	str	r2, [r3, #8]
}
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	08006771 	.word	0x08006771
 8006768:	080067a3 	.word	0x080067a3
 800676c:	0800682f 	.word	0x0800682f

08006770 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006770:	2120      	movs	r1, #32
 8006772:	6803      	ldr	r3, [r0, #0]
{
 8006774:	b510      	push	{r4, lr}
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006776:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006778:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800677a:	400b      	ands	r3, r1
 800677c:	d10c      	bne.n	8006798 <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 800677e:	0011      	movs	r1, r2
 8006780:	3152      	adds	r1, #82	; 0x52
 8006782:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006784:	2180      	movs	r1, #128	; 0x80
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	438a      	bics	r2, r1
 800678c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800678e:	2240      	movs	r2, #64	; 0x40
 8006790:	6819      	ldr	r1, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	601a      	str	r2, [r3, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8006796:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8006798:	0010      	movs	r0, r2
 800679a:	f7fc fb8d 	bl	8002eb8 <HAL_UART_TxCpltCallback>
}
 800679e:	e7fa      	b.n	8006796 <UART_DMATransmitCplt+0x26>

080067a0 <HAL_UART_TxHalfCpltCallback>:
 80067a0:	4770      	bx	lr

080067a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067a2:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);

  HAL_UART_TxHalfCpltCallback(huart);
 80067a4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80067a6:	f7ff fffb 	bl	80067a0 <HAL_UART_TxHalfCpltCallback>
}
 80067aa:	bd10      	pop	{r4, pc}

080067ac <HAL_UART_RxCpltCallback>:
 80067ac:	4770      	bx	lr
	...

080067b0 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067b0:	0002      	movs	r2, r0
{
 80067b2:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067b4:	326a      	adds	r2, #106	; 0x6a
 80067b6:	7811      	ldrb	r1, [r2, #0]
 80067b8:	6803      	ldr	r3, [r0, #0]
 80067ba:	2922      	cmp	r1, #34	; 0x22
 80067bc:	d12d      	bne.n	800681a <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 80067be:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c0:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 80067c2:	315c      	adds	r1, #92	; 0x5c
 80067c4:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c8:	0164      	lsls	r4, r4, #5
 80067ca:	4029      	ands	r1, r5
 80067cc:	6885      	ldr	r5, [r0, #8]
 80067ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80067d0:	42a5      	cmp	r5, r4
 80067d2:	d11e      	bne.n	8006812 <UART_Receive_IT+0x62>
 80067d4:	6904      	ldr	r4, [r0, #16]
 80067d6:	2c00      	cmp	r4, #0
 80067d8:	d11b      	bne.n	8006812 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 80067da:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2;
 80067dc:	3302      	adds	r3, #2
 80067de:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 80067e0:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 80067e2:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 80067e4:	315a      	adds	r1, #90	; 0x5a
 80067e6:	880b      	ldrh	r3, [r1, #0]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	800b      	strh	r3, [r1, #0]
 80067ee:	42a3      	cmp	r3, r4
 80067f0:	d10d      	bne.n	800680e <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067f2:	6803      	ldr	r3, [r0, #0]
 80067f4:	4d0c      	ldr	r5, [pc, #48]	; (8006828 <UART_Receive_IT+0x78>)
 80067f6:	6819      	ldr	r1, [r3, #0]
 80067f8:	4029      	ands	r1, r5
 80067fa:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067fc:	6899      	ldr	r1, [r3, #8]
 80067fe:	3523      	adds	r5, #35	; 0x23
 8006800:	35ff      	adds	r5, #255	; 0xff
 8006802:	43a9      	bics	r1, r5
 8006804:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8006806:	2320      	movs	r3, #32
 8006808:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 800680a:	f7ff ffcf 	bl	80067ac <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 800680e:	0020      	movs	r0, r4
 8006810:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006812:	1c5c      	adds	r4, r3, #1
 8006814:	6544      	str	r4, [r0, #84]	; 0x54
 8006816:	7019      	strb	r1, [r3, #0]
 8006818:	e7e2      	b.n	80067e0 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800681a:	2208      	movs	r2, #8
 800681c:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 800681e:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006820:	430a      	orrs	r2, r1
 8006822:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8006824:	e7f3      	b.n	800680e <UART_Receive_IT+0x5e>
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	fffffedf 	.word	0xfffffedf

0800682c <HAL_UART_ErrorCallback>:
 800682c:	4770      	bx	lr

0800682e <UART_DMAError>:
{
 800682e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006830:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006832:	0021      	movs	r1, r4
 8006834:	3169      	adds	r1, #105	; 0x69
 8006836:	780b      	ldrb	r3, [r1, #0]
 8006838:	2b21      	cmp	r3, #33	; 0x21
 800683a:	d10d      	bne.n	8006858 <UART_DMAError+0x2a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	0612      	lsls	r2, r2, #24
 8006842:	d509      	bpl.n	8006858 <UART_DMAError+0x2a>
    huart->TxXferCount = 0;
 8006844:	0022      	movs	r2, r4
 8006846:	2000      	movs	r0, #0
 8006848:	3252      	adds	r2, #82	; 0x52
 800684a:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	30c0      	adds	r0, #192	; 0xc0
 8006850:	4382      	bics	r2, r0
 8006852:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006854:	2320      	movs	r3, #32
 8006856:	700b      	strb	r3, [r1, #0]
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006858:	0023      	movs	r3, r4
 800685a:	336a      	adds	r3, #106	; 0x6a
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b22      	cmp	r3, #34	; 0x22
 8006860:	d10a      	bne.n	8006878 <UART_DMAError+0x4a>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	065b      	lsls	r3, r3, #25
 8006868:	d506      	bpl.n	8006878 <UART_DMAError+0x4a>
    huart->RxXferCount = 0;
 800686a:	0023      	movs	r3, r4
 800686c:	2200      	movs	r2, #0
 800686e:	335a      	adds	r3, #90	; 0x5a
 8006870:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8006872:	0020      	movs	r0, r4
 8006874:	f7ff ff26 	bl	80066c4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006878:	2310      	movs	r3, #16
 800687a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 800687c:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800687e:	4313      	orrs	r3, r2
 8006880:	66e3      	str	r3, [r4, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8006882:	f7ff ffd3 	bl	800682c <HAL_UART_ErrorCallback>
}
 8006886:	bd10      	pop	{r4, pc}

08006888 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006888:	210f      	movs	r1, #15
{
 800688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800688c:	6803      	ldr	r3, [r0, #0]
{
 800688e:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006890:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006892:	6818      	ldr	r0, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006894:	4011      	ands	r1, r2
  if (errorflags == RESET)
 8006896:	d108      	bne.n	80068aa <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006898:	2520      	movs	r5, #32
 800689a:	422a      	tst	r2, r5
 800689c:	d005      	beq.n	80068aa <HAL_UART_IRQHandler+0x22>
 800689e:	4228      	tst	r0, r5
 80068a0:	d003      	beq.n	80068aa <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 80068a2:	0020      	movs	r0, r4
 80068a4:	f7ff ff84 	bl	80067b0 <UART_Receive_IT>
}
 80068a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 80068aa:	689e      	ldr	r6, [r3, #8]
  if(   (errorflags != RESET)
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d061      	beq.n	8006974 <HAL_UART_IRQHandler+0xec>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80068b0:	2101      	movs	r1, #1
 80068b2:	0035      	movs	r5, r6
 80068b4:	400d      	ands	r5, r1
 80068b6:	d103      	bne.n	80068c0 <HAL_UART_IRQHandler+0x38>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80068b8:	2790      	movs	r7, #144	; 0x90
 80068ba:	007f      	lsls	r7, r7, #1
 80068bc:	4238      	tst	r0, r7
 80068be:	d059      	beq.n	8006974 <HAL_UART_IRQHandler+0xec>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068c0:	420a      	tst	r2, r1
 80068c2:	d005      	beq.n	80068d0 <HAL_UART_IRQHandler+0x48>
 80068c4:	05c6      	lsls	r6, r0, #23
 80068c6:	d503      	bpl.n	80068d0 <HAL_UART_IRQHandler+0x48>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80068c8:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068ca:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80068cc:	4331      	orrs	r1, r6
 80068ce:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068d0:	2102      	movs	r1, #2
 80068d2:	420a      	tst	r2, r1
 80068d4:	d006      	beq.n	80068e4 <HAL_UART_IRQHandler+0x5c>
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	d004      	beq.n	80068e4 <HAL_UART_IRQHandler+0x5c>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80068da:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068dc:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80068de:	1849      	adds	r1, r1, r1
 80068e0:	4331      	orrs	r1, r6
 80068e2:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e4:	2104      	movs	r1, #4
 80068e6:	420a      	tst	r2, r1
 80068e8:	d006      	beq.n	80068f8 <HAL_UART_IRQHandler+0x70>
 80068ea:	2d00      	cmp	r5, #0
 80068ec:	d004      	beq.n	80068f8 <HAL_UART_IRQHandler+0x70>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80068ee:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068f0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 80068f2:	3902      	subs	r1, #2
 80068f4:	4331      	orrs	r1, r6
 80068f6:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80068f8:	0711      	lsls	r1, r2, #28
 80068fa:	d508      	bpl.n	800690e <HAL_UART_IRQHandler+0x86>
 80068fc:	0681      	lsls	r1, r0, #26
 80068fe:	d401      	bmi.n	8006904 <HAL_UART_IRQHandler+0x7c>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006900:	2d00      	cmp	r5, #0
 8006902:	d004      	beq.n	800690e <HAL_UART_IRQHandler+0x86>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8006904:	2108      	movs	r1, #8
 8006906:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006908:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800690a:	4319      	orrs	r1, r3
 800690c:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800690e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0c9      	beq.n	80068a8 <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006914:	2320      	movs	r3, #32
 8006916:	421a      	tst	r2, r3
 8006918:	d004      	beq.n	8006924 <HAL_UART_IRQHandler+0x9c>
 800691a:	4218      	tst	r0, r3
 800691c:	d002      	beq.n	8006924 <HAL_UART_IRQHandler+0x9c>
        UART_Receive_IT(huart);
 800691e:	0020      	movs	r0, r4
 8006920:	f7ff ff46 	bl	80067b0 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006924:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8006926:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006928:	071b      	lsls	r3, r3, #28
 800692a:	d404      	bmi.n	8006936 <HAL_UART_IRQHandler+0xae>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800692c:	6823      	ldr	r3, [r4, #0]
 800692e:	689d      	ldr	r5, [r3, #8]
 8006930:	2340      	movs	r3, #64	; 0x40
 8006932:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006934:	d01a      	beq.n	800696c <HAL_UART_IRQHandler+0xe4>
        UART_EndRxTransfer(huart);
 8006936:	f7ff fec5 	bl	80066c4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693a:	2140      	movs	r1, #64	; 0x40
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	420a      	tst	r2, r1
 8006942:	d00f      	beq.n	8006964 <HAL_UART_IRQHandler+0xdc>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006944:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006946:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006948:	438a      	bics	r2, r1
 800694a:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800694c:	2800      	cmp	r0, #0
 800694e:	d009      	beq.n	8006964 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006950:	4b32      	ldr	r3, [pc, #200]	; (8006a1c <HAL_UART_IRQHandler+0x194>)
 8006952:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006954:	f7fe fa12 	bl	8004d7c <HAL_DMA_Abort_IT>
 8006958:	2800      	cmp	r0, #0
 800695a:	d0a5      	beq.n	80068a8 <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800695c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800695e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006960:	4798      	blx	r3
 8006962:	e7a1      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8006964:	0020      	movs	r0, r4
 8006966:	f7ff ff61 	bl	800682c <HAL_UART_ErrorCallback>
 800696a:	e79d      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 800696c:	f7ff ff5e 	bl	800682c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006970:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006972:	e799      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8006974:	2180      	movs	r1, #128	; 0x80
 8006976:	0349      	lsls	r1, r1, #13
 8006978:	420a      	tst	r2, r1
 800697a:	d00b      	beq.n	8006994 <HAL_UART_IRQHandler+0x10c>
 800697c:	0275      	lsls	r5, r6, #9
 800697e:	d509      	bpl.n	8006994 <HAL_UART_IRQHandler+0x10c>
    huart->gState  = HAL_UART_STATE_READY;
 8006980:	0022      	movs	r2, r4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8006982:	6219      	str	r1, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8006984:	2320      	movs	r3, #32
 8006986:	3269      	adds	r2, #105	; 0x69
 8006988:	7013      	strb	r3, [r2, #0]
    HAL_UARTEx_WakeupCallback(huart);
 800698a:	0020      	movs	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800698c:	7053      	strb	r3, [r2, #1]
    HAL_UARTEx_WakeupCallback(huart);
 800698e:	f000 fa85 	bl	8006e9c <HAL_UARTEx_WakeupCallback>
    return;
 8006992:	e789      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006994:	2180      	movs	r1, #128	; 0x80
 8006996:	420a      	tst	r2, r1
 8006998:	d02d      	beq.n	80069f6 <HAL_UART_IRQHandler+0x16e>
 800699a:	4208      	tst	r0, r1
 800699c:	d02b      	beq.n	80069f6 <HAL_UART_IRQHandler+0x16e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800699e:	0022      	movs	r2, r4
 80069a0:	3269      	adds	r2, #105	; 0x69
 80069a2:	7812      	ldrb	r2, [r2, #0]
 80069a4:	2a21      	cmp	r2, #33	; 0x21
 80069a6:	d000      	beq.n	80069aa <HAL_UART_IRQHandler+0x122>
 80069a8:	e77e      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
    if(huart->TxXferCount == 0U)
 80069aa:	0020      	movs	r0, r4
 80069ac:	3052      	adds	r0, #82	; 0x52
 80069ae:	8802      	ldrh	r2, [r0, #0]
 80069b0:	2a00      	cmp	r2, #0
 80069b2:	d107      	bne.n	80069c4 <HAL_UART_IRQHandler+0x13c>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	438a      	bics	r2, r1
 80069b8:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069ba:	2240      	movs	r2, #64	; 0x40
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e771      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	68a5      	ldr	r5, [r4, #8]
 80069c8:	0149      	lsls	r1, r1, #5
 80069ca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80069cc:	428d      	cmp	r5, r1
 80069ce:	d10d      	bne.n	80069ec <HAL_UART_IRQHandler+0x164>
 80069d0:	6921      	ldr	r1, [r4, #16]
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d10a      	bne.n	80069ec <HAL_UART_IRQHandler+0x164>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80069d6:	8811      	ldrh	r1, [r2, #0]
        huart->pTxBuffPtr += 2U;
 80069d8:	3202      	adds	r2, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80069da:	05c9      	lsls	r1, r1, #23
 80069dc:	0dc9      	lsrs	r1, r1, #23
 80069de:	6299      	str	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80069e0:	64e2      	str	r2, [r4, #76]	; 0x4c
      huart->TxXferCount--;
 80069e2:	8803      	ldrh	r3, [r0, #0]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	8003      	strh	r3, [r0, #0]
 80069ea:	e75d      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80069ec:	1c51      	adds	r1, r2, #1
 80069ee:	64e1      	str	r1, [r4, #76]	; 0x4c
 80069f0:	7812      	ldrb	r2, [r2, #0]
 80069f2:	629a      	str	r2, [r3, #40]	; 0x28
 80069f4:	e7f5      	b.n	80069e2 <HAL_UART_IRQHandler+0x15a>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069f6:	2140      	movs	r1, #64	; 0x40
 80069f8:	420a      	tst	r2, r1
 80069fa:	d100      	bne.n	80069fe <HAL_UART_IRQHandler+0x176>
 80069fc:	e754      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
 80069fe:	4208      	tst	r0, r1
 8006a00:	d100      	bne.n	8006a04 <HAL_UART_IRQHandler+0x17c>
 8006a02:	e751      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a04:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8006a06:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a08:	438a      	bics	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006a0c:	0023      	movs	r3, r4
 8006a0e:	2220      	movs	r2, #32
 8006a10:	3369      	adds	r3, #105	; 0x69
 8006a12:	701a      	strb	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8006a14:	f7fc fa50 	bl	8002eb8 <HAL_UART_TxCpltCallback>
 8006a18:	e746      	b.n	80068a8 <HAL_UART_IRQHandler+0x20>
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	08006a21 	.word	0x08006a21

08006a20 <UART_DMAAbortOnError>:
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006a20:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0;
 8006a22:	2300      	movs	r3, #0
 8006a24:	0002      	movs	r2, r0
{
 8006a26:	b510      	push	{r4, lr}
  huart->RxXferCount = 0;
 8006a28:	325a      	adds	r2, #90	; 0x5a
 8006a2a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0;
 8006a2c:	3a08      	subs	r2, #8
 8006a2e:	8013      	strh	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8006a30:	f7ff fefc 	bl	800682c <HAL_UART_ErrorCallback>
}
 8006a34:	bd10      	pop	{r4, pc}
	...

08006a38 <UART_SetConfig>:
{
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	0005      	movs	r5, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a3c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a3e:	6882      	ldr	r2, [r0, #8]
 8006a40:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006a42:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a44:	4302      	orrs	r2, r0
 8006a46:	6968      	ldr	r0, [r5, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a48:	4e82      	ldr	r6, [pc, #520]	; (8006c54 <UART_SetConfig+0x21c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a4a:	4302      	orrs	r2, r0
 8006a4c:	69e8      	ldr	r0, [r5, #28]
 8006a4e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8006a50:	4881      	ldr	r0, [pc, #516]	; (8006c58 <UART_SetConfig+0x220>)
 8006a52:	4001      	ands	r1, r0
 8006a54:	430a      	orrs	r2, r1
 8006a56:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	4980      	ldr	r1, [pc, #512]	; (8006c5c <UART_SetConfig+0x224>)
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	68e9      	ldr	r1, [r5, #12]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a64:	69a9      	ldr	r1, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a66:	42b3      	cmp	r3, r6
 8006a68:	d001      	beq.n	8006a6e <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8006a6a:	6a2a      	ldr	r2, [r5, #32]
 8006a6c:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	487b      	ldr	r0, [pc, #492]	; (8006c60 <UART_SetConfig+0x228>)
 8006a72:	4002      	ands	r2, r0
 8006a74:	430a      	orrs	r2, r1
 8006a76:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a78:	4a7a      	ldr	r2, [pc, #488]	; (8006c64 <UART_SetConfig+0x22c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d117      	bne.n	8006aae <UART_SetConfig+0x76>
 8006a7e:	2203      	movs	r2, #3
 8006a80:	4b79      	ldr	r3, [pc, #484]	; (8006c68 <UART_SetConfig+0x230>)
 8006a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a84:	4013      	ands	r3, r2
 8006a86:	4a79      	ldr	r2, [pc, #484]	; (8006c6c <UART_SetConfig+0x234>)
 8006a88:	5cd4      	ldrb	r4, [r2, r3]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8006a8a:	2002      	movs	r0, #2
 8006a8c:	f7ff f812 	bl	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a90:	682f      	ldr	r7, [r5, #0]
  uint32_t frequency = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_USART2);
 8006a92:	0003      	movs	r3, r0
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a94:	42b7      	cmp	r7, r6
 8006a96:	d166      	bne.n	8006b66 <UART_SetConfig+0x12e>
    switch (clocksource)
 8006a98:	2c08      	cmp	r4, #8
 8006a9a:	d900      	bls.n	8006a9e <UART_SetConfig+0x66>
 8006a9c:	e0d7      	b.n	8006c4e <UART_SetConfig+0x216>
 8006a9e:	0020      	movs	r0, r4
 8006aa0:	f7f9 fb32 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006aa4:	d539d531 	.word	0xd539d531
 8006aa8:	d5d5d559 	.word	0xd5d5d559
 8006aac:	5c          	.byte	0x5c
 8006aad:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aae:	4a70      	ldr	r2, [pc, #448]	; (8006c70 <UART_SetConfig+0x238>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d105      	bne.n	8006ac0 <UART_SetConfig+0x88>
 8006ab4:	220c      	movs	r2, #12
 8006ab6:	4b6c      	ldr	r3, [pc, #432]	; (8006c68 <UART_SetConfig+0x230>)
 8006ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aba:	4013      	ands	r3, r2
 8006abc:	4a6d      	ldr	r2, [pc, #436]	; (8006c74 <UART_SetConfig+0x23c>)
 8006abe:	e7e3      	b.n	8006a88 <UART_SetConfig+0x50>
 8006ac0:	4a6d      	ldr	r2, [pc, #436]	; (8006c78 <UART_SetConfig+0x240>)
 8006ac2:	2400      	movs	r4, #0
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d0e0      	beq.n	8006a8a <UART_SetConfig+0x52>
 8006ac8:	4a6c      	ldr	r2, [pc, #432]	; (8006c7c <UART_SetConfig+0x244>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d0dd      	beq.n	8006a8a <UART_SetConfig+0x52>
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8006ace:	3410      	adds	r4, #16
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ad0:	42b3      	cmp	r3, r6
 8006ad2:	d1da      	bne.n	8006a8a <UART_SetConfig+0x52>
 8006ad4:	22c0      	movs	r2, #192	; 0xc0
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	4b63      	ldr	r3, [pc, #396]	; (8006c68 <UART_SetConfig+0x230>)
 8006ada:	0112      	lsls	r2, r2, #4
 8006adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ade:	00c9      	lsls	r1, r1, #3
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	3c0c      	subs	r4, #12
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	d0d0      	beq.n	8006a8a <UART_SetConfig+0x52>
 8006ae8:	d804      	bhi.n	8006af4 <UART_SetConfig+0xbc>
 8006aea:	2400      	movs	r4, #0
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d0cc      	beq.n	8006a8a <UART_SetConfig+0x52>
 8006af0:	2410      	movs	r4, #16
 8006af2:	e7ca      	b.n	8006a8a <UART_SetConfig+0x52>
 8006af4:	2180      	movs	r1, #128	; 0x80
 8006af6:	2402      	movs	r4, #2
 8006af8:	0109      	lsls	r1, r1, #4
 8006afa:	428b      	cmp	r3, r1
 8006afc:	d0c5      	beq.n	8006a8a <UART_SetConfig+0x52>
 8006afe:	3406      	adds	r4, #6
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d0c2      	beq.n	8006a8a <UART_SetConfig+0x52>
 8006b04:	e7f4      	b.n	8006af0 <UART_SetConfig+0xb8>
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8006b06:	f7fe fed9 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006b0a:	2400      	movs	r4, #0
      tmpreg = HAL_RCC_GetSysClockFreq();
 8006b0c:	0003      	movs	r3, r0
    if (tmpreg != 0)
 8006b0e:	42a0      	cmp	r0, r4
 8006b10:	d106      	bne.n	8006b20 <UART_SetConfig+0xe8>
}
 8006b12:	0020      	movs	r0, r4
 8006b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b16:	4b54      	ldr	r3, [pc, #336]	; (8006c68 <UART_SetConfig+0x230>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	06db      	lsls	r3, r3, #27
 8006b1c:	d421      	bmi.n	8006b62 <UART_SetConfig+0x12a>
        tmpreg = (uint32_t) HSI_VALUE;
 8006b1e:	4b58      	ldr	r3, [pc, #352]	; (8006c80 <UART_SetConfig+0x248>)
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006b20:	2103      	movs	r1, #3
 8006b22:	686a      	ldr	r2, [r5, #4]
        ret = HAL_ERROR;
 8006b24:	2401      	movs	r4, #1
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006b26:	4351      	muls	r1, r2
 8006b28:	4299      	cmp	r1, r3
 8006b2a:	d8f2      	bhi.n	8006b12 <UART_SetConfig+0xda>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 8006b2c:	0311      	lsls	r1, r2, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8006b2e:	4299      	cmp	r1, r3
 8006b30:	d3ef      	bcc.n	8006b12 <UART_SetConfig+0xda>
        tmpreg = (uint32_t)(UART_DIV_LPUART(tmpreg, huart->Init.BaudRate));
 8006b32:	2700      	movs	r7, #0
 8006b34:	0856      	lsrs	r6, r2, #1
 8006b36:	0e19      	lsrs	r1, r3, #24
 8006b38:	0218      	lsls	r0, r3, #8
 8006b3a:	1980      	adds	r0, r0, r6
 8006b3c:	4179      	adcs	r1, r7
 8006b3e:	003b      	movs	r3, r7
 8006b40:	f7f9 fca0 	bl	8000484 <__aeabi_uldivmod>
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8006b44:	4b4f      	ldr	r3, [pc, #316]	; (8006c84 <UART_SetConfig+0x24c>)
 8006b46:	18c2      	adds	r2, r0, r3
 8006b48:	4b4f      	ldr	r3, [pc, #316]	; (8006c88 <UART_SetConfig+0x250>)
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d8e1      	bhi.n	8006b12 <UART_SetConfig+0xda>
           huart->Instance->BRR = tmpreg;
 8006b4e:	682b      	ldr	r3, [r5, #0]
 8006b50:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b52:	2400      	movs	r4, #0
      break;
 8006b54:	e7dd      	b.n	8006b12 <UART_SetConfig+0xda>
      tmpreg = HAL_RCC_GetSysClockFreq();
 8006b56:	f7fe fdbd 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8006b5a:	e7d6      	b.n	8006b0a <UART_SetConfig+0xd2>
      tmpreg = (uint32_t) LSE_VALUE;
 8006b5c:	2380      	movs	r3, #128	; 0x80
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	e7de      	b.n	8006b20 <UART_SetConfig+0xe8>
        tmpreg = (uint32_t) (HSI_VALUE >> 2U);
 8006b62:	4b4a      	ldr	r3, [pc, #296]	; (8006c8c <UART_SetConfig+0x254>)
 8006b64:	e7dc      	b.n	8006b20 <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b66:	2280      	movs	r2, #128	; 0x80
 8006b68:	69e9      	ldr	r1, [r5, #28]
 8006b6a:	0212      	lsls	r2, r2, #8
 8006b6c:	4291      	cmp	r1, r2
 8006b6e:	d13f      	bne.n	8006bf0 <UART_SetConfig+0x1b8>
    switch (clocksource)
 8006b70:	2c08      	cmp	r4, #8
 8006b72:	d83a      	bhi.n	8006bea <UART_SetConfig+0x1b2>
 8006b74:	0020      	movs	r0, r4
 8006b76:	f7f9 fac7 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006b7a:	0f05      	.short	0x0f05
 8006b7c:	38303817 	.word	0x38303817
 8006b80:	3838      	.short	0x3838
 8006b82:	33          	.byte	0x33
 8006b83:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(frequency, huart->Init.BaudRate));
 8006b84:	686a      	ldr	r2, [r5, #4]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	0011      	movs	r1, r2
 8006b8a:	0850      	lsrs	r0, r2, #1
 8006b8c:	1818      	adds	r0, r3, r0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b8e:	f7f9 fac5 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b92:	2400      	movs	r4, #0
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b94:	b280      	uxth	r0, r0
      break;
 8006b96:	e016      	b.n	8006bc6 <UART_SetConfig+0x18e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006b98:	f7fe fea0 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006b9c:	686b      	ldr	r3, [r5, #4]
 8006b9e:	0040      	lsls	r0, r0, #1
 8006ba0:	085b      	lsrs	r3, r3, #1
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006ba2:	18c0      	adds	r0, r0, r3
 8006ba4:	6869      	ldr	r1, [r5, #4]
 8006ba6:	e7f2      	b.n	8006b8e <UART_SetConfig+0x156>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ba8:	4b2f      	ldr	r3, [pc, #188]	; (8006c68 <UART_SetConfig+0x230>)
 8006baa:	6869      	ldr	r1, [r5, #4]
 8006bac:	681c      	ldr	r4, [r3, #0]
 8006bae:	2310      	movs	r3, #16
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006bb0:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bb2:	401c      	ands	r4, r3
 8006bb4:	d002      	beq.n	8006bbc <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006bb6:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <UART_SetConfig+0x258>)
 8006bb8:	18c0      	adds	r0, r0, r3
 8006bba:	e7e8      	b.n	8006b8e <UART_SetConfig+0x156>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8006bbc:	4b35      	ldr	r3, [pc, #212]	; (8006c94 <UART_SetConfig+0x25c>)
 8006bbe:	18c0      	adds	r0, r0, r3
 8006bc0:	f7f9 faac 	bl	800011c <__udivsi3>
 8006bc4:	b280      	uxth	r0, r0
    brrtemp = usartdiv & 0xFFF0U;
 8006bc6:	230f      	movs	r3, #15
 8006bc8:	0002      	movs	r2, r0
 8006bca:	439a      	bics	r2, r3
 8006bcc:	0013      	movs	r3, r2
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8006bce:	0700      	lsls	r0, r0, #28
    huart->Instance->BRR = brrtemp;
 8006bd0:	682a      	ldr	r2, [r5, #0]
    brrtemp |= (uint16_t)((uint16_t)(usartdiv & (uint16_t)0x000FU) >> (uint16_t)1U);
 8006bd2:	0f40      	lsrs	r0, r0, #29
    huart->Instance->BRR = brrtemp;
 8006bd4:	4318      	orrs	r0, r3
 8006bd6:	60d0      	str	r0, [r2, #12]
 8006bd8:	e79b      	b.n	8006b12 <UART_SetConfig+0xda>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006bda:	f7fe fd7b 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8006bde:	e7dd      	b.n	8006b9c <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006be0:	686b      	ldr	r3, [r5, #4]
 8006be2:	0858      	lsrs	r0, r3, #1
 8006be4:	2380      	movs	r3, #128	; 0x80
 8006be6:	025b      	lsls	r3, r3, #9
 8006be8:	e7db      	b.n	8006ba2 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8006bea:	2401      	movs	r4, #1
  uint16_t usartdiv                   = 0x0000U;
 8006bec:	2000      	movs	r0, #0
 8006bee:	e7ea      	b.n	8006bc6 <UART_SetConfig+0x18e>
    switch (clocksource)
 8006bf0:	2c08      	cmp	r4, #8
 8006bf2:	d82c      	bhi.n	8006c4e <UART_SetConfig+0x216>
 8006bf4:	0020      	movs	r0, r4
 8006bf6:	f7f9 fa87 	bl	8000108 <__gnu_thumb1_case_uqi>
 8006bfa:	0f05      	.short	0x0f05
 8006bfc:	2a222a12 	.word	0x2a222a12
 8006c00:	2a2a      	.short	0x2a2a
 8006c02:	25          	.byte	0x25
 8006c03:	00          	.byte	0x00
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006c04:	f7fe fe5a 	bl	80058bc <HAL_RCC_GetPCLK1Freq>
 8006c08:	6869      	ldr	r1, [r5, #4]
 8006c0a:	084b      	lsrs	r3, r1, #1
 8006c0c:	1818      	adds	r0, r3, r0
 8006c0e:	f7f9 fa85 	bl	800011c <__udivsi3>
 8006c12:	b280      	uxth	r0, r0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	e79c      	b.n	8006b52 <UART_SetConfig+0x11a>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006c18:	f7fe fe60 	bl	80058dc <HAL_RCC_GetPCLK2Freq>
 8006c1c:	e7f4      	b.n	8006c08 <UART_SetConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c1e:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <UART_SetConfig+0x230>)
 8006c20:	6869      	ldr	r1, [r5, #4]
 8006c22:	681c      	ldr	r4, [r3, #0]
 8006c24:	2310      	movs	r3, #16
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006c26:	0848      	lsrs	r0, r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c28:	401c      	ands	r4, r3
 8006c2a:	d001      	beq.n	8006c30 <UART_SetConfig+0x1f8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006c2c:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <UART_SetConfig+0x254>)
 8006c2e:	e7ed      	b.n	8006c0c <UART_SetConfig+0x1d4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006c30:	4b13      	ldr	r3, [pc, #76]	; (8006c80 <UART_SetConfig+0x248>)
 8006c32:	18c0      	adds	r0, r0, r3
 8006c34:	f7f9 fa72 	bl	800011c <__udivsi3>
 8006c38:	b280      	uxth	r0, r0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	e769      	b.n	8006b12 <UART_SetConfig+0xda>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006c3e:	f7fe fd49 	bl	80056d4 <HAL_RCC_GetSysClockFreq>
 8006c42:	e7e1      	b.n	8006c08 <UART_SetConfig+0x1d0>
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	6869      	ldr	r1, [r5, #4]
 8006c48:	021b      	lsls	r3, r3, #8
 8006c4a:	0848      	lsrs	r0, r1, #1
 8006c4c:	e7de      	b.n	8006c0c <UART_SetConfig+0x1d4>
        ret = HAL_ERROR;
 8006c4e:	2401      	movs	r4, #1
 8006c50:	e75f      	b.n	8006b12 <UART_SetConfig+0xda>
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	40004800 	.word	0x40004800
 8006c58:	efff69f3 	.word	0xefff69f3
 8006c5c:	ffffcfff 	.word	0xffffcfff
 8006c60:	fffff4ff 	.word	0xfffff4ff
 8006c64:	40013800 	.word	0x40013800
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	08008588 	.word	0x08008588
 8006c70:	40004400 	.word	0x40004400
 8006c74:	0800858c 	.word	0x0800858c
 8006c78:	40004c00 	.word	0x40004c00
 8006c7c:	40005000 	.word	0x40005000
 8006c80:	00f42400 	.word	0x00f42400
 8006c84:	fffffd00 	.word	0xfffffd00
 8006c88:	000ffcff 	.word	0x000ffcff
 8006c8c:	003d0900 	.word	0x003d0900
 8006c90:	007a1200 	.word	0x007a1200
 8006c94:	01e84800 	.word	0x01e84800

08006c98 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c98:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8006c9a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c9c:	07da      	lsls	r2, r3, #31
 8006c9e:	d506      	bpl.n	8006cae <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ca0:	6801      	ldr	r1, [r0, #0]
 8006ca2:	4c28      	ldr	r4, [pc, #160]	; (8006d44 <UART_AdvFeatureConfig+0xac>)
 8006ca4:	684a      	ldr	r2, [r1, #4]
 8006ca6:	4022      	ands	r2, r4
 8006ca8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006caa:	4322      	orrs	r2, r4
 8006cac:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cae:	079a      	lsls	r2, r3, #30
 8006cb0:	d506      	bpl.n	8006cc0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cb2:	6801      	ldr	r1, [r0, #0]
 8006cb4:	4c24      	ldr	r4, [pc, #144]	; (8006d48 <UART_AdvFeatureConfig+0xb0>)
 8006cb6:	684a      	ldr	r2, [r1, #4]
 8006cb8:	4022      	ands	r2, r4
 8006cba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006cbc:	4322      	orrs	r2, r4
 8006cbe:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cc0:	075a      	lsls	r2, r3, #29
 8006cc2:	d506      	bpl.n	8006cd2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc4:	6801      	ldr	r1, [r0, #0]
 8006cc6:	4c21      	ldr	r4, [pc, #132]	; (8006d4c <UART_AdvFeatureConfig+0xb4>)
 8006cc8:	684a      	ldr	r2, [r1, #4]
 8006cca:	4022      	ands	r2, r4
 8006ccc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006cce:	4322      	orrs	r2, r4
 8006cd0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cd2:	071a      	lsls	r2, r3, #28
 8006cd4:	d506      	bpl.n	8006ce4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cd6:	6801      	ldr	r1, [r0, #0]
 8006cd8:	4c1d      	ldr	r4, [pc, #116]	; (8006d50 <UART_AdvFeatureConfig+0xb8>)
 8006cda:	684a      	ldr	r2, [r1, #4]
 8006cdc:	4022      	ands	r2, r4
 8006cde:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006ce0:	4322      	orrs	r2, r4
 8006ce2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ce4:	06da      	lsls	r2, r3, #27
 8006ce6:	d506      	bpl.n	8006cf6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ce8:	6801      	ldr	r1, [r0, #0]
 8006cea:	4c1a      	ldr	r4, [pc, #104]	; (8006d54 <UART_AdvFeatureConfig+0xbc>)
 8006cec:	688a      	ldr	r2, [r1, #8]
 8006cee:	4022      	ands	r2, r4
 8006cf0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006cf2:	4322      	orrs	r2, r4
 8006cf4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cf6:	069a      	lsls	r2, r3, #26
 8006cf8:	d506      	bpl.n	8006d08 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cfa:	6801      	ldr	r1, [r0, #0]
 8006cfc:	4c16      	ldr	r4, [pc, #88]	; (8006d58 <UART_AdvFeatureConfig+0xc0>)
 8006cfe:	688a      	ldr	r2, [r1, #8]
 8006d00:	4022      	ands	r2, r4
 8006d02:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006d04:	4322      	orrs	r2, r4
 8006d06:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d08:	065a      	lsls	r2, r3, #25
 8006d0a:	d510      	bpl.n	8006d2e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d0c:	6801      	ldr	r1, [r0, #0]
 8006d0e:	4d13      	ldr	r5, [pc, #76]	; (8006d5c <UART_AdvFeatureConfig+0xc4>)
 8006d10:	684a      	ldr	r2, [r1, #4]
 8006d12:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006d14:	402a      	ands	r2, r5
 8006d16:	4322      	orrs	r2, r4
 8006d18:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d1a:	2280      	movs	r2, #128	; 0x80
 8006d1c:	0352      	lsls	r2, r2, #13
 8006d1e:	4294      	cmp	r4, r2
 8006d20:	d105      	bne.n	8006d2e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d22:	684a      	ldr	r2, [r1, #4]
 8006d24:	4c0e      	ldr	r4, [pc, #56]	; (8006d60 <UART_AdvFeatureConfig+0xc8>)
 8006d26:	4022      	ands	r2, r4
 8006d28:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006d2a:	4322      	orrs	r2, r4
 8006d2c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d2e:	061b      	lsls	r3, r3, #24
 8006d30:	d506      	bpl.n	8006d40 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d32:	6802      	ldr	r2, [r0, #0]
 8006d34:	490b      	ldr	r1, [pc, #44]	; (8006d64 <UART_AdvFeatureConfig+0xcc>)
 8006d36:	6853      	ldr	r3, [r2, #4]
 8006d38:	400b      	ands	r3, r1
 8006d3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6053      	str	r3, [r2, #4]
}
 8006d40:	bd30      	pop	{r4, r5, pc}
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	fffdffff 	.word	0xfffdffff
 8006d48:	fffeffff 	.word	0xfffeffff
 8006d4c:	fffbffff 	.word	0xfffbffff
 8006d50:	ffff7fff 	.word	0xffff7fff
 8006d54:	ffffefff 	.word	0xffffefff
 8006d58:	ffffdfff 	.word	0xffffdfff
 8006d5c:	ffefffff 	.word	0xffefffff
 8006d60:	ff9fffff 	.word	0xff9fffff
 8006d64:	fff7ffff 	.word	0xfff7ffff

08006d68 <UART_WaitOnFlagUntilTimeout>:
{
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	0004      	movs	r4, r0
 8006d6c:	000e      	movs	r6, r1
 8006d6e:	0015      	movs	r5, r2
 8006d70:	001f      	movs	r7, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d72:	6822      	ldr	r2, [r4, #0]
 8006d74:	69d3      	ldr	r3, [r2, #28]
 8006d76:	4033      	ands	r3, r6
 8006d78:	1b9b      	subs	r3, r3, r6
 8006d7a:	4259      	negs	r1, r3
 8006d7c:	414b      	adcs	r3, r1
 8006d7e:	42ab      	cmp	r3, r5
 8006d80:	d001      	beq.n	8006d86 <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8006d82:	2000      	movs	r0, #0
 8006d84:	e018      	b.n	8006db8 <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8006d86:	9b06      	ldr	r3, [sp, #24]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	d0f3      	beq.n	8006d74 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006d8c:	9b06      	ldr	r3, [sp, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d113      	bne.n	8006dba <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	490c      	ldr	r1, [pc, #48]	; (8006dc8 <UART_WaitOnFlagUntilTimeout+0x60>)
 8006d96:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8006d98:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d9a:	400a      	ands	r2, r1
 8006d9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	31a3      	adds	r1, #163	; 0xa3
 8006da2:	31ff      	adds	r1, #255	; 0xff
 8006da4:	438a      	bics	r2, r1
 8006da6:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8006da8:	0022      	movs	r2, r4
 8006daa:	2320      	movs	r3, #32
 8006dac:	3269      	adds	r2, #105	; 0x69
 8006dae:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8006db0:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8006db2:	2300      	movs	r3, #0
 8006db4:	3468      	adds	r4, #104	; 0x68
 8006db6:	7023      	strb	r3, [r4, #0]
}
 8006db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006dba:	f7fd fdef 	bl	800499c <HAL_GetTick>
 8006dbe:	9b06      	ldr	r3, [sp, #24]
 8006dc0:	1bc0      	subs	r0, r0, r7
 8006dc2:	4283      	cmp	r3, r0
 8006dc4:	d2d5      	bcs.n	8006d72 <UART_WaitOnFlagUntilTimeout+0xa>
 8006dc6:	e7e4      	b.n	8006d92 <UART_WaitOnFlagUntilTimeout+0x2a>
 8006dc8:	fffffe5f 	.word	0xfffffe5f

08006dcc <UART_CheckIdleState>:
{
 8006dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dce:	2600      	movs	r6, #0
{
 8006dd0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dd2:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8006dd4:	f7fd fde2 	bl	800499c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dd8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006dda:	0005      	movs	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	071b      	lsls	r3, r3, #28
 8006de0:	d417      	bmi.n	8006e12 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	075b      	lsls	r3, r3, #29
 8006de8:	d50a      	bpl.n	8006e00 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <UART_CheckIdleState+0x60>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	03c9      	lsls	r1, r1, #15
 8006df4:	002b      	movs	r3, r5
 8006df6:	0020      	movs	r0, r4
 8006df8:	f7ff ffb6 	bl	8006d68 <UART_WaitOnFlagUntilTimeout>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d113      	bne.n	8006e28 <UART_CheckIdleState+0x5c>
  huart->gState  = HAL_UART_STATE_READY;
 8006e00:	0022      	movs	r2, r4
 8006e02:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006e04:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8006e06:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 8006e08:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8006e0a:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8006e0c:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8006e0e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8006e10:	e00b      	b.n	8006e2a <UART_CheckIdleState+0x5e>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e12:	2180      	movs	r1, #128	; 0x80
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <UART_CheckIdleState+0x60>)
 8006e16:	0032      	movs	r2, r6
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	0389      	lsls	r1, r1, #14
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	0020      	movs	r0, r4
 8006e20:	f7ff ffa2 	bl	8006d68 <UART_WaitOnFlagUntilTimeout>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d0dc      	beq.n	8006de2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8006e28:	2003      	movs	r0, #3
}
 8006e2a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006e2c:	01ffffff 	.word	0x01ffffff

08006e30 <HAL_UART_Init>:
{
 8006e30:	b570      	push	{r4, r5, r6, lr}
 8006e32:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8006e34:	d101      	bne.n	8006e3a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006e36:	2001      	movs	r0, #1
}
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8006e3a:	0005      	movs	r5, r0
 8006e3c:	3569      	adds	r5, #105	; 0x69
 8006e3e:	782b      	ldrb	r3, [r5, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8006e46:	0002      	movs	r2, r0
 8006e48:	3268      	adds	r2, #104	; 0x68
 8006e4a:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006e4c:	f7fc f87c 	bl	8002f48 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006e50:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006e52:	2101      	movs	r1, #1
 8006e54:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006e56:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8006e58:	6813      	ldr	r3, [r2, #0]
 8006e5a:	438b      	bics	r3, r1
 8006e5c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_UART_Init+0x3a>
    UART_AdvFeatureConfig(huart);
 8006e64:	0020      	movs	r0, r4
 8006e66:	f7ff ff17 	bl	8006c98 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e6a:	0020      	movs	r0, r4
 8006e6c:	f7ff fde4 	bl	8006a38 <UART_SetConfig>
 8006e70:	2801      	cmp	r0, #1
 8006e72:	d0e0      	beq.n	8006e36 <HAL_UART_Init+0x6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	4908      	ldr	r1, [pc, #32]	; (8006e98 <HAL_UART_Init+0x68>)
 8006e78:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006e7a:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e7c:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e7e:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	438a      	bics	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006e88:	2201      	movs	r2, #1
 8006e8a:	6819      	ldr	r1, [r3, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006e90:	f7ff ff9c 	bl	8006dcc <UART_CheckIdleState>
 8006e94:	e7d0      	b.n	8006e38 <HAL_UART_Init+0x8>
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	ffffb7ff 	.word	0xffffb7ff

08006e9c <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006e9c:	4770      	bx	lr

08006e9e <SVC_Handler>:

void vPortSVCHandler( void )
{
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006e9e:	4770      	bx	lr

08006ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ea0:	f3ef 8009 	mrs	r0, PSP
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	; (8006ee0 <pxCurrentTCBConst>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	3820      	subs	r0, #32
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006eae:	4644      	mov	r4, r8
 8006eb0:	464d      	mov	r5, r9
 8006eb2:	4656      	mov	r6, sl
 8006eb4:	465f      	mov	r7, fp
 8006eb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006eb8:	b508      	push	{r3, lr}
 8006eba:	b672      	cpsid	i
 8006ebc:	f000 f812 	bl	8006ee4 <vTaskSwitchContext>
 8006ec0:	b662      	cpsie	i
 8006ec2:	bc0c      	pop	{r2, r3}
 8006ec4:	6811      	ldr	r1, [r2, #0]
 8006ec6:	6808      	ldr	r0, [r1, #0]
 8006ec8:	3010      	adds	r0, #16
 8006eca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006ecc:	46a0      	mov	r8, r4
 8006ece:	46a9      	mov	r9, r5
 8006ed0:	46b2      	mov	sl, r6
 8006ed2:	46bb      	mov	fp, r7
 8006ed4:	f380 8809 	msr	PSP, r0
 8006ed8:	3820      	subs	r0, #32
 8006eda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006edc:	4718      	bx	r3
 8006ede:	46c0      	nop			; (mov r8, r8)

08006ee0 <pxCurrentTCBConst>:
 8006ee0:	20000418 	.word	0x20000418

08006ee4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ee4:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <vTaskSwitchContext+0x58>)
{
 8006ee6:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <vTaskSwitchContext+0x5c>)
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	d002      	beq.n	8006ef6 <vTaskSwitchContext+0x12>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ef4:	bd30      	pop	{r4, r5, pc}
 8006ef6:	2414      	movs	r4, #20
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ef8:	4812      	ldr	r0, [pc, #72]	; (8006f44 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 8006efa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006efc:	6802      	ldr	r2, [r0, #0]
 8006efe:	4912      	ldr	r1, [pc, #72]	; (8006f48 <vTaskSwitchContext+0x64>)
 8006f00:	0023      	movs	r3, r4
 8006f02:	4353      	muls	r3, r2
 8006f04:	585d      	ldr	r5, [r3, r1]
 8006f06:	2d00      	cmp	r5, #0
 8006f08:	d012      	beq.n	8006f30 <vTaskSwitchContext+0x4c>
 8006f0a:	18cc      	adds	r4, r1, r3
 8006f0c:	6865      	ldr	r5, [r4, #4]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	686d      	ldr	r5, [r5, #4]
 8006f12:	18cb      	adds	r3, r1, r3
 8006f14:	6065      	str	r5, [r4, #4]
 8006f16:	429d      	cmp	r5, r3
 8006f18:	d101      	bne.n	8006f1e <vTaskSwitchContext+0x3a>
 8006f1a:	686b      	ldr	r3, [r5, #4]
 8006f1c:	6063      	str	r3, [r4, #4]
 8006f1e:	2314      	movs	r3, #20
 8006f20:	4353      	muls	r3, r2
 8006f22:	18c9      	adds	r1, r1, r3
 8006f24:	684b      	ldr	r3, [r1, #4]
 8006f26:	68d9      	ldr	r1, [r3, #12]
 8006f28:	4b08      	ldr	r3, [pc, #32]	; (8006f4c <vTaskSwitchContext+0x68>)
 8006f2a:	6019      	str	r1, [r3, #0]
 8006f2c:	6002      	str	r2, [r0, #0]
}
 8006f2e:	e7e1      	b.n	8006ef4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	d101      	bne.n	8006f38 <vTaskSwitchContext+0x54>
 8006f34:	b672      	cpsid	i
 8006f36:	e7fe      	b.n	8006f36 <vTaskSwitchContext+0x52>
 8006f38:	3a01      	subs	r2, #1
 8006f3a:	e7e1      	b.n	8006f00 <vTaskSwitchContext+0x1c>
 8006f3c:	200004a8 	.word	0x200004a8
 8006f40:	200004b0 	.word	0x200004b0
 8006f44:	200004ac 	.word	0x200004ac
 8006f48:	2000041c 	.word	0x2000041c
 8006f4c:	20000418 	.word	0x20000418

08006f50 <LPM_SetStopMode>:

  return;
}

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 8006f50:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f52:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006f56:	b672      	cpsid	i
  BACKUP_PRIMASK();
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	d008      	beq.n	8006f6e <LPM_SetStopMode+0x1e>
 8006f5c:	2901      	cmp	r1, #1
 8006f5e:	d103      	bne.n	8006f68 <LPM_SetStopMode+0x18>
  {
    case LPM_Disable:
    {
      StopModeDisable |= (uint32_t)id;
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <LPM_SetStopMode+0x28>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4310      	orrs	r0, r2
 8006f66:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f68:	f384 8810 	msr	PRIMASK, r4
      break;
  }
  RESTORE_PRIMASK( );

  return;
}
 8006f6c:	bd10      	pop	{r4, pc}
      StopModeDisable &= ~(uint32_t)id;
 8006f6e:	4a02      	ldr	r2, [pc, #8]	; (8006f78 <LPM_SetStopMode+0x28>)
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	4383      	bics	r3, r0
 8006f74:	6013      	str	r3, [r2, #0]
      break;
 8006f76:	e7f7      	b.n	8006f68 <LPM_SetStopMode+0x18>
 8006f78:	200004b8 	.word	0x200004b8

08006f7c <LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006f7c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8006f80:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
  {
    mode_selected = LPM_SleepMode;
 8006f82:	2000      	movs	r0, #0
  if(StopModeDisable )
 8006f84:	4a05      	ldr	r2, [pc, #20]	; (8006f9c <LPM_GetMode+0x20>)
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	4282      	cmp	r2, r0
 8006f8a:	d104      	bne.n	8006f96 <LPM_GetMode+0x1a>
  }
  else
  {
    if(OffModeDisable)
 8006f8c:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <LPM_GetMode+0x24>)
 8006f8e:	6810      	ldr	r0, [r2, #0]
    {
      mode_selected = LPM_StopMode;
    }
    else
    {
      mode_selected = LPM_OffMode;
 8006f90:	4242      	negs	r2, r0
 8006f92:	4150      	adcs	r0, r2
 8006f94:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f96:	f383 8810 	msr	PRIMASK, r3
  }

  RESTORE_PRIMASK( );

  return mode_selected;
}
 8006f9a:	4770      	bx	lr
 8006f9c:	200004b8 	.word	0x200004b8
 8006fa0:	200004b4 	.word	0x200004b4

08006fa4 <CircularQueue_Init>:
/* Private functions ---------------------------------------------------------*/
/* Public functions ----------------------------------------------------------*/


int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8006fa4:	b510      	push	{r4, lr}
  q->qBuff = queueBuffer;
 8006fa6:	6001      	str	r1, [r0, #0]
  q->first = 0;
 8006fa8:	2100      	movs	r1, #0
{
 8006faa:	ac02      	add	r4, sp, #8
 8006fac:	7824      	ldrb	r4, [r4, #0]
  q->first = 0;
 8006fae:	60c1      	str	r1, [r0, #12]
  q->last = 0; //queueSize-1;
 8006fb0:	6101      	str	r1, [r0, #16]
  q->byteCount = 0;
 8006fb2:	6141      	str	r1, [r0, #20]
  q->elementCount = 0;
 8006fb4:	6181      	str	r1, [r0, #24]
  q->queueMaxSize = queueSize;
 8006fb6:	6042      	str	r2, [r0, #4]
  q->elementSize = elementSize;
 8006fb8:	8103      	strh	r3, [r0, #8]
  q->optionFlags = optionFlags;
 8006fba:	7704      	strb	r4, [r0, #28]
   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
  }
  return 0;
 8006fbc:	0008      	movs	r0, r1
   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8006fbe:	07a2      	lsls	r2, r4, #30
 8006fc0:	d502      	bpl.n	8006fc8 <CircularQueue_Init+0x24>
 8006fc2:	1e58      	subs	r0, r3, #1
 8006fc4:	4183      	sbcs	r3, r0
 8006fc6:	4258      	negs	r0, r3
}
 8006fc8:	bd10      	pop	{r4, pc}

08006fca <CircularQueue_Add>:

uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8006fca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fcc:	b087      	sub	sp, #28
 8006fce:	9305      	str	r3, [sp, #20]
 8006fd0:	9103      	str	r1, [sp, #12]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8006fd2:	8907      	ldrh	r7, [r0, #8]
{
 8006fd4:	0004      	movs	r4, r0
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8006fd6:	4278      	negs	r0, r7
 8006fd8:	4178      	adcs	r0, r7
 8006fda:	0043      	lsls	r3, r0, #1
 8006fdc:	9301      	str	r3, [sp, #4]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8006fde:	6963      	ldr	r3, [r4, #20]
 8006fe0:	9302      	str	r3, [sp, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d035      	beq.n	8007052 <CircularQueue_Add+0x88>
 8006fe6:	9700      	str	r7, [sp, #0]
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	d10e      	bne.n	800700a <CircularQueue_Add+0x40>
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	6820      	ldr	r0, [r4, #0]
 8006ff0:	6865      	ldr	r5, [r4, #4]
 8006ff2:	5cc1      	ldrb	r1, [r0, r3]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	42ab      	cmp	r3, r5
 8006ff8:	d300      	bcc.n	8006ffc <CircularQueue_Add+0x32>
 8006ffa:	1b5b      	subs	r3, r3, r5
 8006ffc:	5cc3      	ldrb	r3, [r0, r3]
 8006ffe:	3102      	adds	r1, #2
 8007000:	021b      	lsls	r3, r3, #8
 8007002:	1859      	adds	r1, r3, r1
 8007004:	b28b      	uxth	r3, r1
 8007006:	9300      	str	r3, [sp, #0]
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8007008:	0017      	movs	r7, r2
  {
    elementSize = q->elementSize;
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	68e2      	ldr	r2, [r4, #12]
 800700e:	2000      	movs	r0, #0
 8007010:	4293      	cmp	r3, r2
 8007012:	d303      	bcc.n	800701c <CircularQueue_Add+0x52>
 8007014:	6862      	ldr	r2, [r4, #4]
 8007016:	1ad0      	subs	r0, r2, r3
 8007018:	9b00      	ldr	r3, [sp, #0]
 800701a:	1ac0      	subs	r0, r0, r3
   //free_size = (q->last >= q->first) ?  eob_free_size + q->first :(q->last + curElementSize) - q->first;

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800701c:	9b01      	ldr	r3, [sp, #4]
 800701e:	9d05      	ldr	r5, [sp, #20]
 8007020:	18f9      	adds	r1, r7, r3
 8007022:	434d      	muls	r5, r1
 8007024:	2600      	movs	r6, #0
 8007026:	42a8      	cmp	r0, r5
 8007028:	d80e      	bhi.n	8007048 <CircularQueue_Add+0x7e>
 800702a:	f7f9 f8fd 	bl	8000228 <__aeabi_uidivmod>
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800702e:	9b01      	ldr	r3, [sp, #4]
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8007030:	b2c9      	uxtb	r1, r1
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8007032:	428b      	cmp	r3, r1
 8007034:	d208      	bcs.n	8007048 <CircularQueue_Add+0x7e>
 8007036:	7f22      	ldrb	r2, [r4, #28]
 8007038:	07d3      	lsls	r3, r2, #31
 800703a:	17db      	asrs	r3, r3, #31
 800703c:	4019      	ands	r1, r3
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800703e:	466b      	mov	r3, sp
 8007040:	889e      	ldrh	r6, [r3, #4]
 8007042:	0793      	lsls	r3, r2, #30
 8007044:	d400      	bmi.n	8007048 <CircularQueue_Add+0x7e>
 8007046:	e0c7      	b.n	80071d8 <CircularQueue_Add+0x20e>
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8007048:	2f00      	cmp	r7, #0
 800704a:	d108      	bne.n	800705e <CircularQueue_Add+0x94>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
  }
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
 800704c:	2000      	movs	r0, #0
  }
  return ptr;
}
 800704e:	b007      	add	sp, #28
 8007050:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8007052:	9b02      	ldr	r3, [sp, #8]
 8007054:	9300      	str	r3, [sp, #0]
  if (q->elementSize > 0)               
 8007056:	2f00      	cmp	r7, #0
 8007058:	d1d7      	bne.n	800700a <CircularQueue_Add+0x40>
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800705a:	9700      	str	r7, [sp, #0]
 800705c:	e7d4      	b.n	8007008 <CircularQueue_Add+0x3e>
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800705e:	9b02      	ldr	r3, [sp, #8]
 8007060:	195d      	adds	r5, r3, r5
 8007062:	6863      	ldr	r3, [r4, #4]
 8007064:	19ae      	adds	r6, r5, r6
 8007066:	429e      	cmp	r6, r3
 8007068:	d8f0      	bhi.n	800704c <CircularQueue_Add+0x82>
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800706a:	2600      	movs	r6, #0
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800706c:	0a3b      	lsrs	r3, r7, #8
 800706e:	9304      	str	r3, [sp, #16]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	9603      	str	r6, [sp, #12]
 8007074:	9302      	str	r3, [sp, #8]
    for (i=0; i < nbElements; i++) 
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	9905      	ldr	r1, [sp, #20]
 800707a:	6920      	ldr	r0, [r4, #16]
 800707c:	6862      	ldr	r2, [r4, #4]
 800707e:	428b      	cmp	r3, r1
 8007080:	d107      	bne.n	8007092 <CircularQueue_Add+0xc8>
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8007082:	9901      	ldr	r1, [sp, #4]
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	1808      	adds	r0, r1, r0
 8007088:	4290      	cmp	r0, r2
 800708a:	d300      	bcc.n	800708e <CircularQueue_Add+0xc4>
 800708c:	1a80      	subs	r0, r0, r2
 800708e:	1818      	adds	r0, r3, r0
  return ptr;
 8007090:	e7dd      	b.n	800704e <CircularQueue_Add+0x84>
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8007092:	9b00      	ldr	r3, [sp, #0]
 8007094:	1818      	adds	r0, r3, r0
 8007096:	4290      	cmp	r0, r2
 8007098:	d300      	bcc.n	800709c <CircularQueue_Add+0xd2>
 800709a:	1a80      	subs	r0, r0, r2
      if (q->elementSize == 0) 
 800709c:	8923      	ldrh	r3, [r4, #8]
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800709e:	6120      	str	r0, [r4, #16]
      if (q->elementSize == 0) 
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d112      	bne.n	80070ca <CircularQueue_Add+0x100>
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80070a4:	6822      	ldr	r2, [r4, #0]
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	5417      	strb	r7, [r2, r0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80070aa:	6862      	ldr	r2, [r4, #4]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d300      	bcc.n	80070b2 <CircularQueue_Add+0xe8>
 80070b0:	1a9b      	subs	r3, r3, r2
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80070b2:	4669      	mov	r1, sp
 80070b4:	6822      	ldr	r2, [r4, #0]
 80070b6:	7c09      	ldrb	r1, [r1, #16]
 80070b8:	1c58      	adds	r0, r3, #1
 80070ba:	54d1      	strb	r1, [r2, r3]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80070bc:	6863      	ldr	r3, [r4, #4]
 80070be:	4298      	cmp	r0, r3
 80070c0:	d300      	bcc.n	80070c4 <CircularQueue_Add+0xfa>
 80070c2:	1ac0      	subs	r0, r0, r3
        q->byteCount += 2;
 80070c4:	6963      	ldr	r3, [r4, #20]
 80070c6:	3302      	adds	r3, #2
 80070c8:	6163      	str	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80070ca:	6863      	ldr	r3, [r4, #4]
 80070cc:	1a1d      	subs	r5, r3, r0
 80070ce:	42bd      	cmp	r5, r7
 80070d0:	d900      	bls.n	80070d4 <CircularQueue_Add+0x10a>
 80070d2:	003d      	movs	r5, r7
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80070d4:	42af      	cmp	r7, r5
 80070d6:	d003      	beq.n	80070e0 <CircularQueue_Add+0x116>
 80070d8:	d928      	bls.n	800712c <CircularQueue_Add+0x162>
 80070da:	7f23      	ldrb	r3, [r4, #28]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d125      	bne.n	800712c <CircularQueue_Add+0x162>
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	002a      	movs	r2, r5
 80070e4:	1818      	adds	r0, r3, r0
 80070e6:	9902      	ldr	r1, [sp, #8]
 80070e8:	f000 faea 	bl	80076c0 <memcpy>
        curBuffPosition = 0; 
 80070ec:	2000      	movs	r0, #0
        q->byteCount += NbBytesToCopy;
 80070ee:	6963      	ldr	r3, [r4, #20]
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80070f0:	002e      	movs	r6, r5
        q->byteCount += NbBytesToCopy;
 80070f2:	195b      	adds	r3, r3, r5
 80070f4:	6163      	str	r3, [r4, #20]
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80070f6:	9b01      	ldr	r3, [sp, #4]
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80070f8:	1b7d      	subs	r5, r7, r5
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	9300      	str	r3, [sp, #0]
      if (NbBytesToCopy)      
 8007100:	2d00      	cmp	r5, #0
 8007102:	d009      	beq.n	8007118 <CircularQueue_Add+0x14e>
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	002a      	movs	r2, r5
 8007108:	1818      	adds	r0, r3, r0
 800710a:	9b02      	ldr	r3, [sp, #8]
 800710c:	18f1      	adds	r1, r6, r3
 800710e:	f000 fad7 	bl	80076c0 <memcpy>
        q->byteCount += NbBytesToCopy;
 8007112:	6963      	ldr	r3, [r4, #20]
 8007114:	195d      	adds	r5, r3, r5
 8007116:	6165      	str	r5, [r4, #20]
      q->elementCount++;
 8007118:	69a3      	ldr	r3, [r4, #24]
 800711a:	3301      	adds	r3, #1
 800711c:	61a3      	str	r3, [r4, #24]
    for (i=0; i < nbElements; i++) 
 800711e:	9b03      	ldr	r3, [sp, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	9303      	str	r3, [sp, #12]
 8007124:	9b02      	ldr	r3, [sp, #8]
 8007126:	19db      	adds	r3, r3, r7
 8007128:	9302      	str	r3, [sp, #8]
 800712a:	e7a4      	b.n	8007076 <CircularQueue_Add+0xac>
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800712c:	2d00      	cmp	r5, #0
 800712e:	d0f3      	beq.n	8007118 <CircularQueue_Add+0x14e>
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8007130:	2201      	movs	r2, #1
 8007132:	7f23      	ldrb	r3, [r4, #28]
 8007134:	4213      	tst	r3, r2
 8007136:	d023      	beq.n	8007180 <CircularQueue_Add+0x1b6>
          if (q->elementSize == 0)
 8007138:	8923      	ldrh	r3, [r4, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d108      	bne.n	8007150 <CircularQueue_Add+0x186>
             q->qBuff[curBuffPosition-2] = 0xFF;
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	32fe      	adds	r2, #254	; 0xfe
 8007142:	181b      	adds	r3, r3, r0
 8007144:	3b02      	subs	r3, #2
 8007146:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	1818      	adds	r0, r3, r0
 800714c:	3801      	subs	r0, #1
 800714e:	7002      	strb	r2, [r0, #0]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8007150:	6963      	ldr	r3, [r4, #20]
          if (q->elementSize == 0)
 8007152:	8926      	ldrh	r6, [r4, #8]
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8007154:	195d      	adds	r5, r3, r5
 8007156:	6165      	str	r5, [r4, #20]
          if (q->elementSize == 0)
 8007158:	2e00      	cmp	r6, #0
 800715a:	d139      	bne.n	80071d0 <CircularQueue_Add+0x206>
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800715c:	466a      	mov	r2, sp
            q->byteCount += 2;   
 800715e:	003d      	movs	r5, r7
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007160:	6823      	ldr	r3, [r4, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007162:	7c12      	ldrb	r2, [r2, #16]
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007164:	701f      	strb	r7, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	705a      	strb	r2, [r3, #1]
            q->byteCount += 2;   
 800716a:	6963      	ldr	r3, [r4, #20]
 800716c:	3302      	adds	r3, #2
 800716e:	6163      	str	r3, [r4, #20]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007170:	2002      	movs	r0, #2
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	195b      	adds	r3, r3, r5
 8007176:	b29b      	uxth	r3, r3
 8007178:	9300      	str	r3, [sp, #0]
        q->last = 0;        
 800717a:	2300      	movs	r3, #0
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	e7bf      	b.n	8007100 <CircularQueue_Add+0x136>
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8007180:	2202      	movs	r2, #2
 8007182:	4213      	tst	r3, r2
 8007184:	d0f5      	beq.n	8007172 <CircularQueue_Add+0x1a8>
          if (q->elementSize == 0)
 8007186:	8923      	ldrh	r3, [r4, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d000      	beq.n	800718e <CircularQueue_Add+0x1c4>
 800718c:	e75e      	b.n	800704c <CircularQueue_Add+0x82>
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800718e:	6823      	ldr	r3, [r4, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007190:	0a2a      	lsrs	r2, r5, #8
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8007192:	181b      	adds	r3, r3, r0
 8007194:	3b02      	subs	r3, #2
 8007196:	701d      	strb	r5, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007198:	6823      	ldr	r3, [r4, #0]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800719a:	9902      	ldr	r1, [sp, #8]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800719c:	181b      	adds	r3, r3, r0
 800719e:	3b01      	subs	r3, #1
 80071a0:	701a      	strb	r2, [r3, #0]
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	002a      	movs	r2, r5
 80071a6:	1818      	adds	r0, r3, r0
 80071a8:	f000 fa8a 	bl	80076c0 <memcpy>
             q->elementCount++;
 80071ac:	69a2      	ldr	r2, [r4, #24]
             q->byteCount += NbBytesToCopy; 
 80071ae:	6963      	ldr	r3, [r4, #20]
             q->elementCount++;
 80071b0:	3201      	adds	r2, #1
             q->byteCount += NbBytesToCopy; 
 80071b2:	195b      	adds	r3, r3, r5
             q->elementCount++;
 80071b4:	61a2      	str	r2, [r4, #24]
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80071b6:	6822      	ldr	r2, [r4, #0]
             q->byteCount += NbBytesToCopy; 
 80071b8:	6163      	str	r3, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80071ba:	1b7b      	subs	r3, r7, r5
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80071bc:	7013      	strb	r3, [r2, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80071be:	6821      	ldr	r1, [r4, #0]
 80071c0:	0a1a      	lsrs	r2, r3, #8
 80071c2:	704a      	strb	r2, [r1, #1]
             q->byteCount += 2;              
 80071c4:	6962      	ldr	r2, [r4, #20]
 80071c6:	002e      	movs	r6, r5
 80071c8:	3202      	adds	r2, #2
 80071ca:	6162      	str	r2, [r4, #20]
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80071cc:	001d      	movs	r5, r3
 80071ce:	e7cf      	b.n	8007170 <CircularQueue_Add+0x1a6>
          NbCopiedBytes = 0;
 80071d0:	2600      	movs	r6, #0
 80071d2:	003d      	movs	r5, r7
          curBuffPosition = 0; 
 80071d4:	0030      	movs	r0, r6
 80071d6:	e7cc      	b.n	8007172 <CircularQueue_Add+0x1a8>
 80071d8:	b28e      	uxth	r6, r1
 80071da:	e735      	b.n	8007048 <CircularQueue_Add+0x7e>

080071dc <CircularQueue_Remove>:

uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80071dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071de:	0003      	movs	r3, r0
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* ptr= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80071e0:	8900      	ldrh	r0, [r0, #8]
  *elementSize = 0;
  //uint32_t FirstElemetPos = 0;
  if (q->byteCount > 0) 
 80071e2:	695e      	ldr	r6, [r3, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80071e4:	4242      	negs	r2, r0
 80071e6:	4142      	adcs	r2, r0
  *elementSize = 0;
 80071e8:	2000      	movs	r0, #0
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80071ea:	0052      	lsls	r2, r2, #1
  *elementSize = 0;
 80071ec:	8008      	strh	r0, [r1, #0]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80071ee:	9201      	str	r2, [sp, #4]
  uint8_t* ptr= NULL;
 80071f0:	1e30      	subs	r0, r6, #0
  if (q->byteCount > 0) 
 80071f2:	d04f      	beq.n	8007294 <CircularQueue_Remove+0xb8>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80071f4:	891d      	ldrh	r5, [r3, #8]
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	68df      	ldr	r7, [r3, #12]
 80071fa:	2d00      	cmp	r5, #0
 80071fc:	d109      	bne.n	8007212 <CircularQueue_Remove+0x36>
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	1c7c      	adds	r4, r7, #1
 8007202:	5dc5      	ldrb	r5, [r0, r7]
 8007204:	4294      	cmp	r4, r2
 8007206:	d300      	bcc.n	800720a <CircularQueue_Remove+0x2e>
 8007208:	1aa4      	subs	r4, r4, r2
 800720a:	5d04      	ldrb	r4, [r0, r4]
 800720c:	0224      	lsls	r4, r4, #8
 800720e:	192d      	adds	r5, r5, r4
 8007210:	b2ad      	uxth	r5, r5

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8007212:	2203      	movs	r2, #3
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007214:	800d      	strh	r5, [r1, #0]
     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8007216:	7f1c      	ldrb	r4, [r3, #28]
 8007218:	4022      	ands	r2, r4
 800721a:	685c      	ldr	r4, [r3, #4]
 800721c:	2a01      	cmp	r2, #1
 800721e:	d121      	bne.n	8007264 <CircularQueue_Remove+0x88>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8007220:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <CircularQueue_Remove+0xbc>)
 8007222:	4295      	cmp	r5, r2
 8007224:	d102      	bne.n	800722c <CircularQueue_Remove+0x50>
 8007226:	891d      	ldrh	r5, [r3, #8]
 8007228:	2d00      	cmp	r5, #0
 800722a:	d009      	beq.n	8007240 <CircularQueue_Remove+0x64>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800722c:	68dd      	ldr	r5, [r3, #12]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	4295      	cmp	r5, r2
 8007232:	d917      	bls.n	8007264 <CircularQueue_Remove+0x88>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007234:	891a      	ldrh	r2, [r3, #8]
 8007236:	2a00      	cmp	r2, #0
 8007238:	d014      	beq.n	8007264 <CircularQueue_Remove+0x88>
 800723a:	1b65      	subs	r5, r4, r5
 800723c:	4295      	cmp	r5, r2
 800723e:	d211      	bcs.n	8007264 <CircularQueue_Remove+0x88>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
          /* Adjust first element pos */
          q->first = 0;
 8007240:	2500      	movs	r5, #0
          q->byteCount -= (q->queueMaxSize - q->first);
 8007242:	19f6      	adds	r6, r6, r7
          q->first = 0;
 8007244:	60dd      	str	r5, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007246:	891d      	ldrh	r5, [r3, #8]
          q->byteCount -= (q->queueMaxSize - q->first);
 8007248:	1b36      	subs	r6, r6, r4
 800724a:	615e      	str	r6, [r3, #20]
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800724c:	2d00      	cmp	r5, #0
 800724e:	d108      	bne.n	8007262 <CircularQueue_Remove+0x86>
 8007250:	2601      	movs	r6, #1
 8007252:	7805      	ldrb	r5, [r0, #0]
 8007254:	42b4      	cmp	r4, r6
 8007256:	d800      	bhi.n	800725a <CircularQueue_Remove+0x7e>
 8007258:	1b36      	subs	r6, r6, r4
 800725a:	5d86      	ldrb	r6, [r0, r6]
 800725c:	0236      	lsls	r6, r6, #8
 800725e:	19ad      	adds	r5, r5, r6
 8007260:	b2ad      	uxth	r5, r5
 8007262:	800d      	strh	r5, [r1, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8007264:	68de      	ldr	r6, [r3, #12]
 8007266:	9a01      	ldr	r2, [sp, #4]
 8007268:	18b5      	adds	r5, r6, r2
 800726a:	42a5      	cmp	r5, r4
 800726c:	d300      	bcc.n	8007270 <CircularQueue_Remove+0x94>
 800726e:	1b2d      	subs	r5, r5, r4

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8007270:	8809      	ldrh	r1, [r1, #0]
 8007272:	9a01      	ldr	r2, [sp, #4]
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8007274:	1940      	adds	r0, r0, r5
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8007276:	188d      	adds	r5, r1, r2
 8007278:	695a      	ldr	r2, [r3, #20]
 800727a:	1b55      	subs	r5, r2, r5
 800727c:	615d      	str	r5, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800727e:	d006      	beq.n	800728e <CircularQueue_Remove+0xb2>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8007280:	9a01      	ldr	r2, [sp, #4]
 8007282:	1989      	adds	r1, r1, r6
 8007284:	188a      	adds	r2, r1, r2
 8007286:	4294      	cmp	r4, r2
 8007288:	d800      	bhi.n	800728c <CircularQueue_Remove+0xb0>
 800728a:	1b12      	subs	r2, r2, r4
 800728c:	60da      	str	r2, [r3, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800728e:	699a      	ldr	r2, [r3, #24]
 8007290:	3a01      	subs	r2, #1
 8007292:	619a      	str	r2, [r3, #24]
  }
  return ptr;
}
 8007294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	0000ffff 	.word	0x0000ffff

0800729c <CircularQueue_Sense>:

uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800729c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800729e:	0003      	movs	r3, r0
  uint8_t  elemSizeStorageRoom = 0;
  uint8_t* x= NULL;
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80072a0:	8900      	ldrh	r0, [r0, #8]
 80072a2:	4242      	negs	r2, r0
 80072a4:	4142      	adcs	r2, r0
  *elementSize = 0;
 80072a6:	2000      	movs	r0, #0
 80072a8:	8008      	strh	r0, [r1, #0]
  uint8_t* x= NULL;
 80072aa:	6958      	ldr	r0, [r3, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80072ac:	0052      	lsls	r2, r2, #1
  uint32_t FirstElemetPos = 0;
    
  if (q->byteCount > 0) 
 80072ae:	2800      	cmp	r0, #0
 80072b0:	d037      	beq.n	8007322 <CircularQueue_Sense+0x86>
  {
    FirstElemetPos = q->first;
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80072b2:	891c      	ldrh	r4, [r3, #8]
    FirstElemetPos = q->first;
 80072b4:	68de      	ldr	r6, [r3, #12]
 80072b6:	6818      	ldr	r0, [r3, #0]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80072b8:	2c00      	cmp	r4, #0
 80072ba:	d109      	bne.n	80072d0 <CircularQueue_Sense+0x34>
 80072bc:	685f      	ldr	r7, [r3, #4]
 80072be:	1c75      	adds	r5, r6, #1
 80072c0:	5d84      	ldrb	r4, [r0, r6]
 80072c2:	42bd      	cmp	r5, r7
 80072c4:	d300      	bcc.n	80072c8 <CircularQueue_Sense+0x2c>
 80072c6:	1bed      	subs	r5, r5, r7
 80072c8:	5d45      	ldrb	r5, [r0, r5]
 80072ca:	022d      	lsls	r5, r5, #8
 80072cc:	1964      	adds	r4, r4, r5
 80072ce:	b2a4      	uxth	r4, r4
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80072d0:	2503      	movs	r5, #3
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80072d2:	800c      	strh	r4, [r1, #0]
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80072d4:	7f1f      	ldrb	r7, [r3, #28]
 80072d6:	402f      	ands	r7, r5
 80072d8:	685d      	ldr	r5, [r3, #4]
 80072da:	2f01      	cmp	r7, #1
 80072dc:	d11c      	bne.n	8007318 <CircularQueue_Sense+0x7c>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 80072de:	4f11      	ldr	r7, [pc, #68]	; (8007324 <CircularQueue_Sense+0x88>)
 80072e0:	42bc      	cmp	r4, r7
 80072e2:	d102      	bne.n	80072ea <CircularQueue_Sense+0x4e>
 80072e4:	891c      	ldrh	r4, [r3, #8]
 80072e6:	2c00      	cmp	r4, #0
 80072e8:	d008      	beq.n	80072fc <CircularQueue_Sense+0x60>
 80072ea:	691c      	ldr	r4, [r3, #16]
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	d913      	bls.n	8007318 <CircularQueue_Sense+0x7c>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80072f0:	891c      	ldrh	r4, [r3, #8]
 80072f2:	2c00      	cmp	r4, #0
 80072f4:	d010      	beq.n	8007318 <CircularQueue_Sense+0x7c>
 80072f6:	1baf      	subs	r7, r5, r6
 80072f8:	42a7      	cmp	r7, r4
 80072fa:	d20d      	bcs.n	8007318 <CircularQueue_Sense+0x7c>
      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80072fc:	891b      	ldrh	r3, [r3, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d108      	bne.n	8007314 <CircularQueue_Sense+0x78>
 8007302:	2401      	movs	r4, #1
 8007304:	7803      	ldrb	r3, [r0, #0]
 8007306:	42a5      	cmp	r5, r4
 8007308:	d800      	bhi.n	800730c <CircularQueue_Sense+0x70>
 800730a:	1b64      	subs	r4, r4, r5
 800730c:	5d04      	ldrb	r4, [r0, r4]
 800730e:	0224      	lsls	r4, r4, #8
 8007310:	191b      	adds	r3, r3, r4
 8007312:	b29b      	uxth	r3, r3
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8007314:	2600      	movs	r6, #0
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007316:	800b      	strh	r3, [r1, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8007318:	1992      	adds	r2, r2, r6
 800731a:	42aa      	cmp	r2, r5
 800731c:	d300      	bcc.n	8007320 <CircularQueue_Sense+0x84>
 800731e:	1b52      	subs	r2, r2, r5
 8007320:	1880      	adds	r0, r0, r2
  }
  return x;
}
 8007322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007324:	0000ffff 	.word	0x0000ffff

08007328 <TimerSetTimeout>:
    cur = cur->Next;
  }
  return false;
}
static void TimerSetTimeout( TimerEvent_t *obj )
{
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	0004      	movs	r4, r0
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 800732c:	f7fb f880 	bl	8002430 <HW_RTC_GetMinimumTimeout>
  obj->IsRunning = true; 
 8007330:	2301      	movs	r3, #1
 8007332:	7223      	strb	r3, [r4, #8]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 8007334:	0005      	movs	r5, r0

  //in case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 8007336:	6826      	ldr	r6, [r4, #0]
 8007338:	f7fb f88e 	bl	8002458 <HW_RTC_GetTimerElapsedTime>
 800733c:	1828      	adds	r0, r5, r0
 800733e:	4286      	cmp	r6, r0
 8007340:	d203      	bcs.n	800734a <TimerSetTimeout+0x22>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 8007342:	f7fb f889 	bl	8002458 <HW_RTC_GetTimerElapsedTime>
 8007346:	182d      	adds	r5, r5, r0
 8007348:	6025      	str	r5, [r4, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 800734a:	6820      	ldr	r0, [r4, #0]
 800734c:	f7fb f8b0 	bl	80024b0 <HW_RTC_SetAlarm>
}
 8007350:	bd70      	pop	{r4, r5, r6, pc}
	...

08007354 <TimerInsertNewHeadTimer>:
  obj->Next = NULL;
}

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
  TimerEvent_t* cur = TimerListHead;
 8007354:	4a05      	ldr	r2, [pc, #20]	; (800736c <TimerInsertNewHeadTimer+0x18>)
{
 8007356:	b510      	push	{r4, lr}
  TimerEvent_t* cur = TimerListHead;
 8007358:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsRunning = false;
 800735e:	2100      	movs	r1, #0
 8007360:	7219      	strb	r1, [r3, #8]
  }

  obj->Next = cur;
 8007362:	6103      	str	r3, [r0, #16]
  TimerListHead = obj;
 8007364:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8007366:	f7ff ffdf 	bl	8007328 <TimerSetTimeout>
}
 800736a:	bd10      	pop	{r4, pc}
 800736c:	200004bc 	.word	0x200004bc

08007370 <TimerInit>:
  obj->Timestamp = 0;
 8007370:	2300      	movs	r3, #0
  obj->Callback = callback;
 8007372:	60c1      	str	r1, [r0, #12]
  obj->Timestamp = 0;
 8007374:	6003      	str	r3, [r0, #0]
  obj->ReloadValue = 0;
 8007376:	6043      	str	r3, [r0, #4]
  obj->IsRunning = false;
 8007378:	7203      	strb	r3, [r0, #8]
  obj->Next = NULL;
 800737a:	6103      	str	r3, [r0, #16]
}
 800737c:	4770      	bx	lr
	...

08007380 <TimerStart>:
{
 8007380:	b570      	push	{r4, r5, r6, lr}
 8007382:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007384:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007388:	b672      	cpsid	i
  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800738a:	2800      	cmp	r0, #0
 800738c:	d00e      	beq.n	80073ac <TimerStart+0x2c>
  TimerEvent_t* cur = TimerListHead;
 800738e:	4e17      	ldr	r6, [pc, #92]	; (80073ec <TimerStart+0x6c>)
 8007390:	6832      	ldr	r2, [r6, #0]
 8007392:	0013      	movs	r3, r2
  while( cur != NULL )
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10c      	bne.n	80073b2 <TimerStart+0x32>
  obj->Timestamp = obj->ReloadValue;
 8007398:	6861      	ldr	r1, [r4, #4]
  obj->IsRunning = false;
 800739a:	7223      	strb	r3, [r4, #8]
  obj->Timestamp = obj->ReloadValue;
 800739c:	6021      	str	r1, [r4, #0]
  if( TimerListHead == NULL )
 800739e:	2a00      	cmp	r2, #0
 80073a0:	d10b      	bne.n	80073ba <TimerStart+0x3a>
    HW_RTC_SetTimerContext( );
 80073a2:	f7fb f961 	bl	8002668 <HW_RTC_SetTimerContext>
      TimerInsertNewHeadTimer( obj);
 80073a6:	0020      	movs	r0, r4
 80073a8:	f7ff ffd4 	bl	8007354 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ac:	f385 8810 	msr	PRIMASK, r5
}
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
    if( cur == obj )
 80073b2:	429c      	cmp	r4, r3
 80073b4:	d0fa      	beq.n	80073ac <TimerStart+0x2c>
    cur = cur->Next;
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	e7ec      	b.n	8007394 <TimerStart+0x14>
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 80073ba:	f7fb f84d 	bl	8002458 <HW_RTC_GetTimerElapsedTime>
    obj->Timestamp += elapsedTime;
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	18c0      	adds	r0, r0, r3
    if( obj->Timestamp < TimerListHead->Timestamp )
 80073c2:	6833      	ldr	r3, [r6, #0]
    obj->Timestamp += elapsedTime;
 80073c4:	6020      	str	r0, [r4, #0]
    if( obj->Timestamp < TimerListHead->Timestamp )
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	4290      	cmp	r0, r2
 80073ca:	d3ec      	bcc.n	80073a6 <TimerStart+0x26>
  TimerEvent_t* next = TimerListHead->Next;
 80073cc:	691a      	ldr	r2, [r3, #16]
  while (cur->Next != NULL )
 80073ce:	6919      	ldr	r1, [r3, #16]
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d102      	bne.n	80073da <TimerStart+0x5a>
  cur->Next = obj;
 80073d4:	611c      	str	r4, [r3, #16]
  obj->Next = NULL;
 80073d6:	6121      	str	r1, [r4, #16]
 80073d8:	e7e8      	b.n	80073ac <TimerStart+0x2c>
    if( obj->Timestamp  > next->Timestamp )
 80073da:	6811      	ldr	r1, [r2, #0]
 80073dc:	4288      	cmp	r0, r1
 80073de:	d902      	bls.n	80073e6 <TimerStart+0x66>
        next = next->Next;
 80073e0:	0013      	movs	r3, r2
 80073e2:	6912      	ldr	r2, [r2, #16]
 80073e4:	e7f3      	b.n	80073ce <TimerStart+0x4e>
        cur->Next = obj;
 80073e6:	611c      	str	r4, [r3, #16]
        obj->Next = next;
 80073e8:	6122      	str	r2, [r4, #16]
 80073ea:	e7df      	b.n	80073ac <TimerStart+0x2c>
 80073ec:	200004bc 	.word	0x200004bc

080073f0 <TimerIrqHandler>:
{
 80073f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t old =  HW_RTC_GetTimerContext( );
 80073f2:	f7fb f985 	bl	8002700 <HW_RTC_GetTimerContext>
 80073f6:	0004      	movs	r4, r0
  uint32_t now =  HW_RTC_SetTimerContext( );
 80073f8:	f7fb f936 	bl	8002668 <HW_RTC_SetTimerContext>
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 80073fc:	1b00      	subs	r0, r0, r4
  if ( TimerListHead != NULL )
 80073fe:	4c18      	ldr	r4, [pc, #96]	; (8007460 <TimerIrqHandler+0x70>)
 8007400:	6822      	ldr	r2, [r4, #0]
 8007402:	2a00      	cmp	r2, #0
 8007404:	d013      	beq.n	800742e <TimerIrqHandler+0x3e>
 8007406:	0013      	movs	r3, r2
        next->Timestamp = 0 ;
 8007408:	2500      	movs	r5, #0
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d105      	bne.n	800741c <TimerIrqHandler+0x2c>
    TimerListHead = TimerListHead->Next;
 8007410:	6913      	ldr	r3, [r2, #16]
 8007412:	6023      	str	r3, [r4, #0]
    exec_cb( cur->Callback );
 8007414:	68d3      	ldr	r3, [r2, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d108      	bne.n	800742c <TimerIrqHandler+0x3c>
 800741a:	e7fe      	b.n	800741a <TimerIrqHandler+0x2a>
      if (next->Timestamp > DeltaContext)
 800741c:	6819      	ldr	r1, [r3, #0]
 800741e:	4288      	cmp	r0, r1
 8007420:	d202      	bcs.n	8007428 <TimerIrqHandler+0x38>
        next->Timestamp -= DeltaContext;
 8007422:	1a09      	subs	r1, r1, r0
 8007424:	6019      	str	r1, [r3, #0]
 8007426:	e7f0      	b.n	800740a <TimerIrqHandler+0x1a>
        next->Timestamp = 0 ;
 8007428:	601d      	str	r5, [r3, #0]
 800742a:	e7ee      	b.n	800740a <TimerIrqHandler+0x1a>
   exec_cb( cur->Callback );
 800742c:	4798      	blx	r3
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d103      	bne.n	800743c <TimerIrqHandler+0x4c>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	2800      	cmp	r0, #0
 8007438:	d10c      	bne.n	8007454 <TimerIrqHandler+0x64>
}
 800743a:	bd70      	pop	{r4, r5, r6, pc}
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 800743c:	681d      	ldr	r5, [r3, #0]
 800743e:	f7fb f80b 	bl	8002458 <HW_RTC_GetTimerElapsedTime>
 8007442:	4285      	cmp	r5, r0
 8007444:	d2f6      	bcs.n	8007434 <TimerIrqHandler+0x44>
   cur = TimerListHead;
 8007446:	6823      	ldr	r3, [r4, #0]
   TimerListHead = TimerListHead->Next;
 8007448:	691a      	ldr	r2, [r3, #16]
   exec_cb( cur->Callback );
 800744a:	68db      	ldr	r3, [r3, #12]
   TimerListHead = TimerListHead->Next;
 800744c:	6022      	str	r2, [r4, #0]
   exec_cb( cur->Callback );
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1ec      	bne.n	800742c <TimerIrqHandler+0x3c>
 8007452:	e7fe      	b.n	8007452 <TimerIrqHandler+0x62>
  if(( TimerListHead != NULL ) && (TimerListHead->IsRunning == false))
 8007454:	7a03      	ldrb	r3, [r0, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ef      	bne.n	800743a <TimerIrqHandler+0x4a>
    TimerSetTimeout( TimerListHead );
 800745a:	f7ff ff65 	bl	8007328 <TimerSetTimeout>
}
 800745e:	e7ec      	b.n	800743a <TimerIrqHandler+0x4a>
 8007460:	200004bc 	.word	0x200004bc

08007464 <TimerStop>:
{
 8007464:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007466:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800746a:	b672      	cpsid	i
  TimerEvent_t* prev = TimerListHead;
 800746c:	4d12      	ldr	r5, [pc, #72]	; (80074b8 <TimerStop+0x54>)
 800746e:	682b      	ldr	r3, [r5, #0]
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8007470:	2b00      	cmp	r3, #0
 8007472:	d001      	beq.n	8007478 <TimerStop+0x14>
 8007474:	2800      	cmp	r0, #0
 8007476:	d102      	bne.n	800747e <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007478:	f386 8810 	msr	PRIMASK, r6
}  
 800747c:	bd70      	pop	{r4, r5, r6, pc}
  if( TimerListHead == obj ) // Stop the Head                  
 800747e:	4283      	cmp	r3, r0
 8007480:	d111      	bne.n	80074a6 <TimerStop+0x42>
    if( TimerListHead->IsRunning == true ) // The head is already running 
 8007482:	7a1a      	ldrb	r2, [r3, #8]
 8007484:	691c      	ldr	r4, [r3, #16]
 8007486:	2a00      	cmp	r2, #0
 8007488:	d00a      	beq.n	80074a0 <TimerStop+0x3c>
      TimerListHead->IsRunning = false;
 800748a:	2200      	movs	r2, #0
 800748c:	721a      	strb	r2, [r3, #8]
      if( TimerListHead->Next != NULL )
 800748e:	4294      	cmp	r4, r2
 8007490:	d004      	beq.n	800749c <TimerStop+0x38>
        TimerSetTimeout( TimerListHead );
 8007492:	0020      	movs	r0, r4
        TimerListHead = TimerListHead->Next;
 8007494:	602c      	str	r4, [r5, #0]
        TimerSetTimeout( TimerListHead );
 8007496:	f7ff ff47 	bl	8007328 <TimerSetTimeout>
 800749a:	e7ed      	b.n	8007478 <TimerStop+0x14>
        HW_RTC_StopAlarm( );
 800749c:	f7fa fff0 	bl	8002480 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 80074a0:	602c      	str	r4, [r5, #0]
 80074a2:	e7e9      	b.n	8007478 <TimerStop+0x14>
 80074a4:	0013      	movs	r3, r2
        cur = cur->Next;
 80074a6:	691a      	ldr	r2, [r3, #16]
    while( cur != NULL )
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	d0e5      	beq.n	8007478 <TimerStop+0x14>
      if( cur == obj )
 80074ac:	4290      	cmp	r0, r2
 80074ae:	d1f9      	bne.n	80074a4 <TimerStop+0x40>
        if( cur->Next != NULL )
 80074b0:	6902      	ldr	r2, [r0, #16]
 80074b2:	611a      	str	r2, [r3, #16]
 80074b4:	e7e0      	b.n	8007478 <TimerStop+0x14>
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	200004bc 	.word	0x200004bc

080074bc <TimerSetValue>:
{
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	0005      	movs	r5, r0
  uint32_t ticks = HW_RTC_ms2Tick( value );
 80074c0:	0008      	movs	r0, r1
 80074c2:	f7fa ffb7 	bl	8002434 <HW_RTC_ms2Tick>
 80074c6:	0004      	movs	r4, r0
  TimerStop( obj );
 80074c8:	0028      	movs	r0, r5
 80074ca:	f7ff ffcb 	bl	8007464 <TimerStop>
  minValue = HW_RTC_GetMinimumTimeout( );
 80074ce:	f7fa ffaf 	bl	8002430 <HW_RTC_GetMinimumTimeout>
 80074d2:	4284      	cmp	r4, r0
 80074d4:	d200      	bcs.n	80074d8 <TimerSetValue+0x1c>
 80074d6:	0004      	movs	r4, r0
  obj->Timestamp = ticks;
 80074d8:	602c      	str	r4, [r5, #0]
  obj->ReloadValue = ticks;
 80074da:	606c      	str	r4, [r5, #4]
}
 80074dc:	bd70      	pop	{r4, r5, r6, pc}

080074de <TimerGetCurrentTime>:
{
 80074de:	b510      	push	{r4, lr}
  uint32_t now = HW_RTC_GetTimerValue( );
 80074e0:	f7fa ffc6 	bl	8002470 <HW_RTC_GetTimerValue>
  return  HW_RTC_Tick2ms(now);
 80074e4:	f7fa ffae 	bl	8002444 <HW_RTC_Tick2ms>
}
 80074e8:	bd10      	pop	{r4, pc}

080074ea <TimerGetElapsedTime>:
{
 80074ea:	b570      	push	{r4, r5, r6, lr}
 80074ec:	0005      	movs	r5, r0
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 80074ee:	f7fa ffbf 	bl	8002470 <HW_RTC_GetTimerValue>
 80074f2:	0004      	movs	r4, r0
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 80074f4:	0028      	movs	r0, r5
 80074f6:	f7fa ff9d 	bl	8002434 <HW_RTC_ms2Tick>
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 80074fa:	1a20      	subs	r0, r4, r0
 80074fc:	f7fa ffa2 	bl	8002444 <HW_RTC_Tick2ms>
}
 8007500:	bd70      	pop	{r4, r5, r6, pc}
	...

08007504 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 8007504:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007506:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800750a:	b672      	cpsid	i

  BACKUP_PRIMASK();

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgTraceQueue,&bufSize);
 800750c:	466b      	mov	r3, sp
 800750e:	4e0e      	ldr	r6, [pc, #56]	; (8007548 <Trace_TxCpltCallback+0x44>)
 8007510:	1d9c      	adds	r4, r3, #6
 8007512:	0021      	movs	r1, r4
 8007514:	0030      	movs	r0, r6
 8007516:	f7ff fe61 	bl	80071dc <CircularQueue_Remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  buffer=CircularQueue_Sense(&MsgTraceQueue,&bufSize);
 800751a:	0021      	movs	r1, r4
 800751c:	0030      	movs	r0, r6
 800751e:	f7ff febd 	bl	800729c <CircularQueue_Sense>

  if ( buffer != NULL) 
 8007522:	2800      	cmp	r0, #0
 8007524:	d005      	beq.n	8007532 <Trace_TxCpltCallback+0x2e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007526:	f385 8810 	msr	PRIMASK, r5
  {
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace((uint8_t*)buffer, bufSize);
 800752a:	8821      	ldrh	r1, [r4, #0]
 800752c:	f7fb fcba 	bl	8002ea4 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 8007530:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 8007532:	0001      	movs	r1, r0
 8007534:	2020      	movs	r0, #32
 8007536:	f7ff fd0b 	bl	8006f50 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 800753a:	2201      	movs	r2, #1
 800753c:	4b03      	ldr	r3, [pc, #12]	; (800754c <Trace_TxCpltCallback+0x48>)
 800753e:	701a      	strb	r2, [r3, #0]
 8007540:	f385 8810 	msr	PRIMASK, r5
}
 8007544:	e7f4      	b.n	8007530 <Trace_TxCpltCallback+0x2c>
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	200004c0 	.word	0x200004c0
 800754c:	20000048 	.word	0x20000048

08007550 <TraceInit>:
{
 8007550:	b507      	push	{r0, r1, r2, lr}
  OutputInit(Trace_TxCpltCallback);
 8007552:	4806      	ldr	r0, [pc, #24]	; (800756c <TraceInit+0x1c>)
 8007554:	f7fb fc88 	bl	8002e68 <vcom_Init>
  CircularQueue_Init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8007558:	2302      	movs	r3, #2
 800755a:	2280      	movs	r2, #128	; 0x80
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	0052      	lsls	r2, r2, #1
 8007560:	2300      	movs	r3, #0
 8007562:	4903      	ldr	r1, [pc, #12]	; (8007570 <TraceInit+0x20>)
 8007564:	4803      	ldr	r0, [pc, #12]	; (8007574 <TraceInit+0x24>)
 8007566:	f7ff fd1d 	bl	8006fa4 <CircularQueue_Init>
}
 800756a:	bd07      	pop	{r0, r1, r2, pc}
 800756c:	08007505 	.word	0x08007505
 8007570:	200004e0 	.word	0x200004e0
 8007574:	200004c0 	.word	0x200004c0

08007578 <TraceSend>:
{
 8007578:	b40f      	push	{r0, r1, r2, r3}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800757a:	2180      	movs	r1, #128	; 0x80
{
 800757c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757e:	b0c5      	sub	sp, #276	; 0x114
 8007580:	ab4a      	add	r3, sp, #296	; 0x128
 8007582:	cb04      	ldmia	r3!, {r2}
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 8007584:	0049      	lsls	r1, r1, #1
 8007586:	a804      	add	r0, sp, #16
  va_start( vaArgs, strFormat);
 8007588:	9303      	str	r3, [sp, #12]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 800758a:	f000 f9b3 	bl	80078f4 <vsniprintf>
 800758e:	ab02      	add	r3, sp, #8
 8007590:	1c9d      	adds	r5, r3, #2
 8007592:	8028      	strh	r0, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007594:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007598:	b672      	cpsid	i
  buffer=CircularQueue_Add(&MsgTraceQueue,(uint8_t*)buf, bufSize,1);
 800759a:	4f16      	ldr	r7, [pc, #88]	; (80075f4 <TraceSend+0x7c>)
 800759c:	882a      	ldrh	r2, [r5, #0]
 800759e:	2301      	movs	r3, #1
 80075a0:	a904      	add	r1, sp, #16
 80075a2:	0038      	movs	r0, r7
 80075a4:	f7ff fd11 	bl	8006fca <CircularQueue_Add>
 80075a8:	1e04      	subs	r4, r0, #0
  if ((buffer!=NULL) && (TracePeripheralReady==SET))
 80075aa:	d01f      	beq.n	80075ec <TraceSend+0x74>
 80075ac:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <TraceSend+0x80>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	9301      	str	r3, [sp, #4]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d119      	bne.n	80075ec <TraceSend+0x74>
    buffer=CircularQueue_Sense(&MsgTraceQueue,&bufSize);
 80075b8:	0029      	movs	r1, r5
 80075ba:	0038      	movs	r0, r7
 80075bc:	f7ff fe6e 	bl	800729c <CircularQueue_Sense>
    TracePeripheralReady = RESET;
 80075c0:	2300      	movs	r3, #0
 80075c2:	4a0d      	ldr	r2, [pc, #52]	; (80075f8 <TraceSend+0x80>)
    buffer=CircularQueue_Sense(&MsgTraceQueue,&bufSize);
 80075c4:	0004      	movs	r4, r0
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 80075c6:	9901      	ldr	r1, [sp, #4]
 80075c8:	2020      	movs	r0, #32
    TracePeripheralReady = RESET;
 80075ca:	7013      	strb	r3, [r2, #0]
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 80075cc:	f7ff fcc0 	bl	8006f50 <LPM_SetStopMode>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d0:	f386 8810 	msr	PRIMASK, r6
    OutputTrace((uint8_t*)buffer, bufSize);
 80075d4:	8829      	ldrh	r1, [r5, #0]
 80075d6:	0020      	movs	r0, r4
 80075d8:	f7fb fc64 	bl	8002ea4 <vcom_Trace>
  if (buffer!=NULL)
 80075dc:	4260      	negs	r0, r4
 80075de:	4160      	adcs	r0, r4
 80075e0:	4240      	negs	r0, r0
}
 80075e2:	b045      	add	sp, #276	; 0x114
 80075e4:	bcf0      	pop	{r4, r5, r6, r7}
 80075e6:	bc08      	pop	{r3}
 80075e8:	b004      	add	sp, #16
 80075ea:	4718      	bx	r3
 80075ec:	f386 8810 	msr	PRIMASK, r6
 80075f0:	e7f4      	b.n	80075dc <TraceSend+0x64>
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	200004c0 	.word	0x200004c0
 80075f8:	20000048 	.word	0x20000048

080075fc <memcpy1>:
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80075fc:	2300      	movs	r3, #0
{
 80075fe:	b510      	push	{r4, lr}
    while( size-- )
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 8007604:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 8007606:	5ccc      	ldrb	r4, [r1, r3]
 8007608:	54c4      	strb	r4, [r0, r3]
 800760a:	3301      	adds	r3, #1
 800760c:	e7f8      	b.n	8007600 <memcpy1+0x4>
	...

08007610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007610:	480d      	ldr	r0, [pc, #52]	; (8007648 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8007612:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8007614:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007616:	e003      	b.n	8007620 <LoopCopyDataInit>

08007618 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007618:	4b0c      	ldr	r3, [pc, #48]	; (800764c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800761a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800761c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800761e:	3104      	adds	r1, #4

08007620 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007620:	480b      	ldr	r0, [pc, #44]	; (8007650 <LoopForever+0xa>)
  ldr  r3, =_edata
 8007622:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007624:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007626:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007628:	d3f6      	bcc.n	8007618 <CopyDataInit>
  ldr  r2, =_sbss
 800762a:	4a0b      	ldr	r2, [pc, #44]	; (8007658 <LoopForever+0x12>)
  b  LoopFillZerobss
 800762c:	e002      	b.n	8007634 <LoopFillZerobss>

0800762e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800762e:	2300      	movs	r3, #0
  str  r3, [r2]
 8007630:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007632:	3204      	adds	r2, #4

08007634 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <LoopForever+0x16>)
  cmp  r2, r3
 8007636:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007638:	d3f9      	bcc.n	800762e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800763a:	f7fb fbe7 	bl	8002e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800763e:	f000 f811 	bl	8007664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007642:	f7fb f997 	bl	8002974 <main>

08007646 <LoopForever>:

LoopForever:
    b LoopForever
 8007646:	e7fe      	b.n	8007646 <LoopForever>
   ldr   r0, =_estack
 8007648:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800764c:	080085dc 	.word	0x080085dc
  ldr  r0, =_sdata
 8007650:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007654:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8007658:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 800765c:	200006a0 	.word	0x200006a0

08007660 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007660:	e7fe      	b.n	8007660 <ADC1_COMP_IRQHandler>
	...

08007664 <__libc_init_array>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	2600      	movs	r6, #0
 8007668:	4d0c      	ldr	r5, [pc, #48]	; (800769c <__libc_init_array+0x38>)
 800766a:	4c0d      	ldr	r4, [pc, #52]	; (80076a0 <__libc_init_array+0x3c>)
 800766c:	1b64      	subs	r4, r4, r5
 800766e:	10a4      	asrs	r4, r4, #2
 8007670:	42a6      	cmp	r6, r4
 8007672:	d109      	bne.n	8007688 <__libc_init_array+0x24>
 8007674:	2600      	movs	r6, #0
 8007676:	f000 fddf 	bl	8008238 <_init>
 800767a:	4d0a      	ldr	r5, [pc, #40]	; (80076a4 <__libc_init_array+0x40>)
 800767c:	4c0a      	ldr	r4, [pc, #40]	; (80076a8 <__libc_init_array+0x44>)
 800767e:	1b64      	subs	r4, r4, r5
 8007680:	10a4      	asrs	r4, r4, #2
 8007682:	42a6      	cmp	r6, r4
 8007684:	d105      	bne.n	8007692 <__libc_init_array+0x2e>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	00b3      	lsls	r3, r6, #2
 800768a:	58eb      	ldr	r3, [r5, r3]
 800768c:	4798      	blx	r3
 800768e:	3601      	adds	r6, #1
 8007690:	e7ee      	b.n	8007670 <__libc_init_array+0xc>
 8007692:	00b3      	lsls	r3, r6, #2
 8007694:	58eb      	ldr	r3, [r5, r3]
 8007696:	4798      	blx	r3
 8007698:	3601      	adds	r6, #1
 800769a:	e7f2      	b.n	8007682 <__libc_init_array+0x1e>
 800769c:	080085d4 	.word	0x080085d4
 80076a0:	080085d4 	.word	0x080085d4
 80076a4:	080085d4 	.word	0x080085d4
 80076a8:	080085d8 	.word	0x080085d8

080076ac <malloc>:
 80076ac:	b510      	push	{r4, lr}
 80076ae:	4b03      	ldr	r3, [pc, #12]	; (80076bc <malloc+0x10>)
 80076b0:	0001      	movs	r1, r0
 80076b2:	6818      	ldr	r0, [r3, #0]
 80076b4:	f000 f860 	bl	8007778 <_malloc_r>
 80076b8:	bd10      	pop	{r4, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	2000004c 	.word	0x2000004c

080076c0 <memcpy>:
 80076c0:	2300      	movs	r3, #0
 80076c2:	b510      	push	{r4, lr}
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d100      	bne.n	80076ca <memcpy+0xa>
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	5ccc      	ldrb	r4, [r1, r3]
 80076cc:	54c4      	strb	r4, [r0, r3]
 80076ce:	3301      	adds	r3, #1
 80076d0:	e7f8      	b.n	80076c4 <memcpy+0x4>

080076d2 <memset>:
 80076d2:	0003      	movs	r3, r0
 80076d4:	1882      	adds	r2, r0, r2
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d100      	bne.n	80076dc <memset+0xa>
 80076da:	4770      	bx	lr
 80076dc:	7019      	strb	r1, [r3, #0]
 80076de:	3301      	adds	r3, #1
 80076e0:	e7f9      	b.n	80076d6 <memset+0x4>
	...

080076e4 <_free_r>:
 80076e4:	b570      	push	{r4, r5, r6, lr}
 80076e6:	0005      	movs	r5, r0
 80076e8:	2900      	cmp	r1, #0
 80076ea:	d010      	beq.n	800770e <_free_r+0x2a>
 80076ec:	1f0c      	subs	r4, r1, #4
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	da00      	bge.n	80076f6 <_free_r+0x12>
 80076f4:	18e4      	adds	r4, r4, r3
 80076f6:	0028      	movs	r0, r5
 80076f8:	f000 f908 	bl	800790c <__malloc_lock>
 80076fc:	4a1d      	ldr	r2, [pc, #116]	; (8007774 <_free_r+0x90>)
 80076fe:	6813      	ldr	r3, [r2, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d105      	bne.n	8007710 <_free_r+0x2c>
 8007704:	6063      	str	r3, [r4, #4]
 8007706:	6014      	str	r4, [r2, #0]
 8007708:	0028      	movs	r0, r5
 800770a:	f000 f900 	bl	800790e <__malloc_unlock>
 800770e:	bd70      	pop	{r4, r5, r6, pc}
 8007710:	42a3      	cmp	r3, r4
 8007712:	d909      	bls.n	8007728 <_free_r+0x44>
 8007714:	6821      	ldr	r1, [r4, #0]
 8007716:	1860      	adds	r0, r4, r1
 8007718:	4283      	cmp	r3, r0
 800771a:	d1f3      	bne.n	8007704 <_free_r+0x20>
 800771c:	6818      	ldr	r0, [r3, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	1841      	adds	r1, r0, r1
 8007722:	6021      	str	r1, [r4, #0]
 8007724:	e7ee      	b.n	8007704 <_free_r+0x20>
 8007726:	0013      	movs	r3, r2
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	2a00      	cmp	r2, #0
 800772c:	d001      	beq.n	8007732 <_free_r+0x4e>
 800772e:	42a2      	cmp	r2, r4
 8007730:	d9f9      	bls.n	8007726 <_free_r+0x42>
 8007732:	6819      	ldr	r1, [r3, #0]
 8007734:	1858      	adds	r0, r3, r1
 8007736:	42a0      	cmp	r0, r4
 8007738:	d10b      	bne.n	8007752 <_free_r+0x6e>
 800773a:	6820      	ldr	r0, [r4, #0]
 800773c:	1809      	adds	r1, r1, r0
 800773e:	1858      	adds	r0, r3, r1
 8007740:	6019      	str	r1, [r3, #0]
 8007742:	4282      	cmp	r2, r0
 8007744:	d1e0      	bne.n	8007708 <_free_r+0x24>
 8007746:	6810      	ldr	r0, [r2, #0]
 8007748:	6852      	ldr	r2, [r2, #4]
 800774a:	1841      	adds	r1, r0, r1
 800774c:	6019      	str	r1, [r3, #0]
 800774e:	605a      	str	r2, [r3, #4]
 8007750:	e7da      	b.n	8007708 <_free_r+0x24>
 8007752:	42a0      	cmp	r0, r4
 8007754:	d902      	bls.n	800775c <_free_r+0x78>
 8007756:	230c      	movs	r3, #12
 8007758:	602b      	str	r3, [r5, #0]
 800775a:	e7d5      	b.n	8007708 <_free_r+0x24>
 800775c:	6821      	ldr	r1, [r4, #0]
 800775e:	1860      	adds	r0, r4, r1
 8007760:	4282      	cmp	r2, r0
 8007762:	d103      	bne.n	800776c <_free_r+0x88>
 8007764:	6810      	ldr	r0, [r2, #0]
 8007766:	6852      	ldr	r2, [r2, #4]
 8007768:	1841      	adds	r1, r0, r1
 800776a:	6021      	str	r1, [r4, #0]
 800776c:	6062      	str	r2, [r4, #4]
 800776e:	605c      	str	r4, [r3, #4]
 8007770:	e7ca      	b.n	8007708 <_free_r+0x24>
 8007772:	46c0      	nop			; (mov r8, r8)
 8007774:	200005e0 	.word	0x200005e0

08007778 <_malloc_r>:
 8007778:	2303      	movs	r3, #3
 800777a:	b570      	push	{r4, r5, r6, lr}
 800777c:	1ccd      	adds	r5, r1, #3
 800777e:	439d      	bics	r5, r3
 8007780:	3508      	adds	r5, #8
 8007782:	0006      	movs	r6, r0
 8007784:	2d0c      	cmp	r5, #12
 8007786:	d21e      	bcs.n	80077c6 <_malloc_r+0x4e>
 8007788:	250c      	movs	r5, #12
 800778a:	42a9      	cmp	r1, r5
 800778c:	d81d      	bhi.n	80077ca <_malloc_r+0x52>
 800778e:	0030      	movs	r0, r6
 8007790:	f000 f8bc 	bl	800790c <__malloc_lock>
 8007794:	4a25      	ldr	r2, [pc, #148]	; (800782c <_malloc_r+0xb4>)
 8007796:	6814      	ldr	r4, [r2, #0]
 8007798:	0021      	movs	r1, r4
 800779a:	2900      	cmp	r1, #0
 800779c:	d119      	bne.n	80077d2 <_malloc_r+0x5a>
 800779e:	4c24      	ldr	r4, [pc, #144]	; (8007830 <_malloc_r+0xb8>)
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d103      	bne.n	80077ae <_malloc_r+0x36>
 80077a6:	0030      	movs	r0, r6
 80077a8:	f000 f844 	bl	8007834 <_sbrk_r>
 80077ac:	6020      	str	r0, [r4, #0]
 80077ae:	0029      	movs	r1, r5
 80077b0:	0030      	movs	r0, r6
 80077b2:	f000 f83f 	bl	8007834 <_sbrk_r>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	d12c      	bne.n	8007814 <_malloc_r+0x9c>
 80077ba:	230c      	movs	r3, #12
 80077bc:	0030      	movs	r0, r6
 80077be:	6033      	str	r3, [r6, #0]
 80077c0:	f000 f8a5 	bl	800790e <__malloc_unlock>
 80077c4:	e003      	b.n	80077ce <_malloc_r+0x56>
 80077c6:	2d00      	cmp	r5, #0
 80077c8:	dadf      	bge.n	800778a <_malloc_r+0x12>
 80077ca:	230c      	movs	r3, #12
 80077cc:	6033      	str	r3, [r6, #0]
 80077ce:	2000      	movs	r0, #0
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
 80077d2:	680b      	ldr	r3, [r1, #0]
 80077d4:	1b5b      	subs	r3, r3, r5
 80077d6:	d41a      	bmi.n	800780e <_malloc_r+0x96>
 80077d8:	2b0b      	cmp	r3, #11
 80077da:	d903      	bls.n	80077e4 <_malloc_r+0x6c>
 80077dc:	600b      	str	r3, [r1, #0]
 80077de:	18cc      	adds	r4, r1, r3
 80077e0:	6025      	str	r5, [r4, #0]
 80077e2:	e003      	b.n	80077ec <_malloc_r+0x74>
 80077e4:	428c      	cmp	r4, r1
 80077e6:	d10e      	bne.n	8007806 <_malloc_r+0x8e>
 80077e8:	6863      	ldr	r3, [r4, #4]
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	0030      	movs	r0, r6
 80077ee:	f000 f88e 	bl	800790e <__malloc_unlock>
 80077f2:	0020      	movs	r0, r4
 80077f4:	2207      	movs	r2, #7
 80077f6:	300b      	adds	r0, #11
 80077f8:	1d23      	adds	r3, r4, #4
 80077fa:	4390      	bics	r0, r2
 80077fc:	1ac3      	subs	r3, r0, r3
 80077fe:	d0e7      	beq.n	80077d0 <_malloc_r+0x58>
 8007800:	425a      	negs	r2, r3
 8007802:	50e2      	str	r2, [r4, r3]
 8007804:	e7e4      	b.n	80077d0 <_malloc_r+0x58>
 8007806:	684b      	ldr	r3, [r1, #4]
 8007808:	6063      	str	r3, [r4, #4]
 800780a:	000c      	movs	r4, r1
 800780c:	e7ee      	b.n	80077ec <_malloc_r+0x74>
 800780e:	000c      	movs	r4, r1
 8007810:	6849      	ldr	r1, [r1, #4]
 8007812:	e7c2      	b.n	800779a <_malloc_r+0x22>
 8007814:	2303      	movs	r3, #3
 8007816:	1cc4      	adds	r4, r0, #3
 8007818:	439c      	bics	r4, r3
 800781a:	42a0      	cmp	r0, r4
 800781c:	d0e0      	beq.n	80077e0 <_malloc_r+0x68>
 800781e:	1a21      	subs	r1, r4, r0
 8007820:	0030      	movs	r0, r6
 8007822:	f000 f807 	bl	8007834 <_sbrk_r>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d1da      	bne.n	80077e0 <_malloc_r+0x68>
 800782a:	e7c6      	b.n	80077ba <_malloc_r+0x42>
 800782c:	200005e0 	.word	0x200005e0
 8007830:	200005e4 	.word	0x200005e4

08007834 <_sbrk_r>:
 8007834:	2300      	movs	r3, #0
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	4c06      	ldr	r4, [pc, #24]	; (8007854 <_sbrk_r+0x20>)
 800783a:	0005      	movs	r5, r0
 800783c:	0008      	movs	r0, r1
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	f000 fcea 	bl	8008218 <_sbrk>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d103      	bne.n	8007850 <_sbrk_r+0x1c>
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d000      	beq.n	8007850 <_sbrk_r+0x1c>
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	bd70      	pop	{r4, r5, r6, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	2000069c 	.word	0x2000069c

08007858 <siprintf>:
 8007858:	b40e      	push	{r1, r2, r3}
 800785a:	b510      	push	{r4, lr}
 800785c:	b09d      	sub	sp, #116	; 0x74
 800785e:	a902      	add	r1, sp, #8
 8007860:	9002      	str	r0, [sp, #8]
 8007862:	6108      	str	r0, [r1, #16]
 8007864:	480b      	ldr	r0, [pc, #44]	; (8007894 <siprintf+0x3c>)
 8007866:	2482      	movs	r4, #130	; 0x82
 8007868:	6088      	str	r0, [r1, #8]
 800786a:	6148      	str	r0, [r1, #20]
 800786c:	2001      	movs	r0, #1
 800786e:	4240      	negs	r0, r0
 8007870:	ab1f      	add	r3, sp, #124	; 0x7c
 8007872:	81c8      	strh	r0, [r1, #14]
 8007874:	4808      	ldr	r0, [pc, #32]	; (8007898 <siprintf+0x40>)
 8007876:	cb04      	ldmia	r3!, {r2}
 8007878:	00a4      	lsls	r4, r4, #2
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	818c      	strh	r4, [r1, #12]
 8007880:	f000 f8a8 	bl	80079d4 <_svfiprintf_r>
 8007884:	2300      	movs	r3, #0
 8007886:	9a02      	ldr	r2, [sp, #8]
 8007888:	7013      	strb	r3, [r2, #0]
 800788a:	b01d      	add	sp, #116	; 0x74
 800788c:	bc10      	pop	{r4}
 800788e:	bc08      	pop	{r3}
 8007890:	b003      	add	sp, #12
 8007892:	4718      	bx	r3
 8007894:	7fffffff 	.word	0x7fffffff
 8007898:	2000004c 	.word	0x2000004c

0800789c <_vsniprintf_r>:
 800789c:	b530      	push	{r4, r5, lr}
 800789e:	0014      	movs	r4, r2
 80078a0:	b09b      	sub	sp, #108	; 0x6c
 80078a2:	0005      	movs	r5, r0
 80078a4:	001a      	movs	r2, r3
 80078a6:	2c00      	cmp	r4, #0
 80078a8:	da05      	bge.n	80078b6 <_vsniprintf_r+0x1a>
 80078aa:	238b      	movs	r3, #139	; 0x8b
 80078ac:	6003      	str	r3, [r0, #0]
 80078ae:	2001      	movs	r0, #1
 80078b0:	4240      	negs	r0, r0
 80078b2:	b01b      	add	sp, #108	; 0x6c
 80078b4:	bd30      	pop	{r4, r5, pc}
 80078b6:	2382      	movs	r3, #130	; 0x82
 80078b8:	4668      	mov	r0, sp
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	8183      	strh	r3, [r0, #12]
 80078be:	2300      	movs	r3, #0
 80078c0:	9100      	str	r1, [sp, #0]
 80078c2:	9104      	str	r1, [sp, #16]
 80078c4:	429c      	cmp	r4, r3
 80078c6:	d000      	beq.n	80078ca <_vsniprintf_r+0x2e>
 80078c8:	1e63      	subs	r3, r4, #1
 80078ca:	9302      	str	r3, [sp, #8]
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	2301      	movs	r3, #1
 80078d0:	4669      	mov	r1, sp
 80078d2:	425b      	negs	r3, r3
 80078d4:	81cb      	strh	r3, [r1, #14]
 80078d6:	0028      	movs	r0, r5
 80078d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80078da:	f000 f87b 	bl	80079d4 <_svfiprintf_r>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	da01      	bge.n	80078e6 <_vsniprintf_r+0x4a>
 80078e2:	238b      	movs	r3, #139	; 0x8b
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	2c00      	cmp	r4, #0
 80078e8:	d0e3      	beq.n	80078b2 <_vsniprintf_r+0x16>
 80078ea:	2300      	movs	r3, #0
 80078ec:	9a00      	ldr	r2, [sp, #0]
 80078ee:	7013      	strb	r3, [r2, #0]
 80078f0:	e7df      	b.n	80078b2 <_vsniprintf_r+0x16>
	...

080078f4 <vsniprintf>:
 80078f4:	b507      	push	{r0, r1, r2, lr}
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	0013      	movs	r3, r2
 80078fa:	000a      	movs	r2, r1
 80078fc:	0001      	movs	r1, r0
 80078fe:	4802      	ldr	r0, [pc, #8]	; (8007908 <vsniprintf+0x14>)
 8007900:	6800      	ldr	r0, [r0, #0]
 8007902:	f7ff ffcb 	bl	800789c <_vsniprintf_r>
 8007906:	bd0e      	pop	{r1, r2, r3, pc}
 8007908:	2000004c 	.word	0x2000004c

0800790c <__malloc_lock>:
 800790c:	4770      	bx	lr

0800790e <__malloc_unlock>:
 800790e:	4770      	bx	lr

08007910 <__ssputs_r>:
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007912:	688e      	ldr	r6, [r1, #8]
 8007914:	b085      	sub	sp, #20
 8007916:	0007      	movs	r7, r0
 8007918:	000c      	movs	r4, r1
 800791a:	9203      	str	r2, [sp, #12]
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	429e      	cmp	r6, r3
 8007920:	d839      	bhi.n	8007996 <__ssputs_r+0x86>
 8007922:	2390      	movs	r3, #144	; 0x90
 8007924:	898a      	ldrh	r2, [r1, #12]
 8007926:	00db      	lsls	r3, r3, #3
 8007928:	421a      	tst	r2, r3
 800792a:	d034      	beq.n	8007996 <__ssputs_r+0x86>
 800792c:	2503      	movs	r5, #3
 800792e:	6909      	ldr	r1, [r1, #16]
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	1a5b      	subs	r3, r3, r1
 8007934:	9302      	str	r3, [sp, #8]
 8007936:	6963      	ldr	r3, [r4, #20]
 8007938:	9802      	ldr	r0, [sp, #8]
 800793a:	435d      	muls	r5, r3
 800793c:	0feb      	lsrs	r3, r5, #31
 800793e:	195d      	adds	r5, r3, r5
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	106d      	asrs	r5, r5, #1
 8007944:	3301      	adds	r3, #1
 8007946:	181b      	adds	r3, r3, r0
 8007948:	42ab      	cmp	r3, r5
 800794a:	d900      	bls.n	800794e <__ssputs_r+0x3e>
 800794c:	001d      	movs	r5, r3
 800794e:	0553      	lsls	r3, r2, #21
 8007950:	d532      	bpl.n	80079b8 <__ssputs_r+0xa8>
 8007952:	0029      	movs	r1, r5
 8007954:	0038      	movs	r0, r7
 8007956:	f7ff ff0f 	bl	8007778 <_malloc_r>
 800795a:	1e06      	subs	r6, r0, #0
 800795c:	d109      	bne.n	8007972 <__ssputs_r+0x62>
 800795e:	230c      	movs	r3, #12
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	2340      	movs	r3, #64	; 0x40
 8007964:	2001      	movs	r0, #1
 8007966:	89a2      	ldrh	r2, [r4, #12]
 8007968:	4240      	negs	r0, r0
 800796a:	4313      	orrs	r3, r2
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	b005      	add	sp, #20
 8007970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007972:	9a02      	ldr	r2, [sp, #8]
 8007974:	6921      	ldr	r1, [r4, #16]
 8007976:	f7ff fea3 	bl	80076c0 <memcpy>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	4a14      	ldr	r2, [pc, #80]	; (80079d0 <__ssputs_r+0xc0>)
 800797e:	401a      	ands	r2, r3
 8007980:	2380      	movs	r3, #128	; 0x80
 8007982:	4313      	orrs	r3, r2
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	9b02      	ldr	r3, [sp, #8]
 8007988:	6126      	str	r6, [r4, #16]
 800798a:	18f6      	adds	r6, r6, r3
 800798c:	6026      	str	r6, [r4, #0]
 800798e:	6165      	str	r5, [r4, #20]
 8007990:	9e01      	ldr	r6, [sp, #4]
 8007992:	1aed      	subs	r5, r5, r3
 8007994:	60a5      	str	r5, [r4, #8]
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	42b3      	cmp	r3, r6
 800799a:	d200      	bcs.n	800799e <__ssputs_r+0x8e>
 800799c:	001e      	movs	r6, r3
 800799e:	0032      	movs	r2, r6
 80079a0:	9903      	ldr	r1, [sp, #12]
 80079a2:	6820      	ldr	r0, [r4, #0]
 80079a4:	f000 faad 	bl	8007f02 <memmove>
 80079a8:	68a3      	ldr	r3, [r4, #8]
 80079aa:	2000      	movs	r0, #0
 80079ac:	1b9b      	subs	r3, r3, r6
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	199e      	adds	r6, r3, r6
 80079b4:	6026      	str	r6, [r4, #0]
 80079b6:	e7da      	b.n	800796e <__ssputs_r+0x5e>
 80079b8:	002a      	movs	r2, r5
 80079ba:	0038      	movs	r0, r7
 80079bc:	f000 fab3 	bl	8007f26 <_realloc_r>
 80079c0:	1e06      	subs	r6, r0, #0
 80079c2:	d1e0      	bne.n	8007986 <__ssputs_r+0x76>
 80079c4:	6921      	ldr	r1, [r4, #16]
 80079c6:	0038      	movs	r0, r7
 80079c8:	f7ff fe8c 	bl	80076e4 <_free_r>
 80079cc:	e7c7      	b.n	800795e <__ssputs_r+0x4e>
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	fffffb7f 	.word	0xfffffb7f

080079d4 <_svfiprintf_r>:
 80079d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079d6:	b09f      	sub	sp, #124	; 0x7c
 80079d8:	9002      	str	r0, [sp, #8]
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	898b      	ldrh	r3, [r1, #12]
 80079de:	000f      	movs	r7, r1
 80079e0:	0016      	movs	r6, r2
 80079e2:	061b      	lsls	r3, r3, #24
 80079e4:	d511      	bpl.n	8007a0a <_svfiprintf_r+0x36>
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10e      	bne.n	8007a0a <_svfiprintf_r+0x36>
 80079ec:	2140      	movs	r1, #64	; 0x40
 80079ee:	f7ff fec3 	bl	8007778 <_malloc_r>
 80079f2:	6038      	str	r0, [r7, #0]
 80079f4:	6138      	str	r0, [r7, #16]
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d105      	bne.n	8007a06 <_svfiprintf_r+0x32>
 80079fa:	230c      	movs	r3, #12
 80079fc:	9a02      	ldr	r2, [sp, #8]
 80079fe:	3801      	subs	r0, #1
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	b01f      	add	sp, #124	; 0x7c
 8007a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a06:	2340      	movs	r3, #64	; 0x40
 8007a08:	617b      	str	r3, [r7, #20]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	ad06      	add	r5, sp, #24
 8007a0e:	616b      	str	r3, [r5, #20]
 8007a10:	3320      	adds	r3, #32
 8007a12:	766b      	strb	r3, [r5, #25]
 8007a14:	3310      	adds	r3, #16
 8007a16:	76ab      	strb	r3, [r5, #26]
 8007a18:	0034      	movs	r4, r6
 8007a1a:	7823      	ldrb	r3, [r4, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d147      	bne.n	8007ab0 <_svfiprintf_r+0xdc>
 8007a20:	1ba3      	subs	r3, r4, r6
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	d00d      	beq.n	8007a42 <_svfiprintf_r+0x6e>
 8007a26:	1ba3      	subs	r3, r4, r6
 8007a28:	0032      	movs	r2, r6
 8007a2a:	0039      	movs	r1, r7
 8007a2c:	9802      	ldr	r0, [sp, #8]
 8007a2e:	f7ff ff6f 	bl	8007910 <__ssputs_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d100      	bne.n	8007a38 <_svfiprintf_r+0x64>
 8007a36:	e0b5      	b.n	8007ba4 <_svfiprintf_r+0x1d0>
 8007a38:	696a      	ldr	r2, [r5, #20]
 8007a3a:	9b04      	ldr	r3, [sp, #16]
 8007a3c:	4694      	mov	ip, r2
 8007a3e:	4463      	add	r3, ip
 8007a40:	616b      	str	r3, [r5, #20]
 8007a42:	7823      	ldrb	r3, [r4, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d100      	bne.n	8007a4a <_svfiprintf_r+0x76>
 8007a48:	e0ac      	b.n	8007ba4 <_svfiprintf_r+0x1d0>
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4252      	negs	r2, r2
 8007a50:	606a      	str	r2, [r5, #4]
 8007a52:	a902      	add	r1, sp, #8
 8007a54:	3254      	adds	r2, #84	; 0x54
 8007a56:	1852      	adds	r2, r2, r1
 8007a58:	3401      	adds	r4, #1
 8007a5a:	602b      	str	r3, [r5, #0]
 8007a5c:	60eb      	str	r3, [r5, #12]
 8007a5e:	60ab      	str	r3, [r5, #8]
 8007a60:	7013      	strb	r3, [r2, #0]
 8007a62:	65ab      	str	r3, [r5, #88]	; 0x58
 8007a64:	4e58      	ldr	r6, [pc, #352]	; (8007bc8 <_svfiprintf_r+0x1f4>)
 8007a66:	2205      	movs	r2, #5
 8007a68:	7821      	ldrb	r1, [r4, #0]
 8007a6a:	0030      	movs	r0, r6
 8007a6c:	f000 fa3e 	bl	8007eec <memchr>
 8007a70:	1c62      	adds	r2, r4, #1
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d120      	bne.n	8007ab8 <_svfiprintf_r+0xe4>
 8007a76:	6829      	ldr	r1, [r5, #0]
 8007a78:	06cb      	lsls	r3, r1, #27
 8007a7a:	d504      	bpl.n	8007a86 <_svfiprintf_r+0xb2>
 8007a7c:	2353      	movs	r3, #83	; 0x53
 8007a7e:	ae02      	add	r6, sp, #8
 8007a80:	3020      	adds	r0, #32
 8007a82:	199b      	adds	r3, r3, r6
 8007a84:	7018      	strb	r0, [r3, #0]
 8007a86:	070b      	lsls	r3, r1, #28
 8007a88:	d504      	bpl.n	8007a94 <_svfiprintf_r+0xc0>
 8007a8a:	2353      	movs	r3, #83	; 0x53
 8007a8c:	202b      	movs	r0, #43	; 0x2b
 8007a8e:	ae02      	add	r6, sp, #8
 8007a90:	199b      	adds	r3, r3, r6
 8007a92:	7018      	strb	r0, [r3, #0]
 8007a94:	7823      	ldrb	r3, [r4, #0]
 8007a96:	2b2a      	cmp	r3, #42	; 0x2a
 8007a98:	d016      	beq.n	8007ac8 <_svfiprintf_r+0xf4>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	210a      	movs	r1, #10
 8007a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa0:	7822      	ldrb	r2, [r4, #0]
 8007aa2:	3a30      	subs	r2, #48	; 0x30
 8007aa4:	2a09      	cmp	r2, #9
 8007aa6:	d955      	bls.n	8007b54 <_svfiprintf_r+0x180>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d015      	beq.n	8007ad8 <_svfiprintf_r+0x104>
 8007aac:	9309      	str	r3, [sp, #36]	; 0x24
 8007aae:	e013      	b.n	8007ad8 <_svfiprintf_r+0x104>
 8007ab0:	2b25      	cmp	r3, #37	; 0x25
 8007ab2:	d0b5      	beq.n	8007a20 <_svfiprintf_r+0x4c>
 8007ab4:	3401      	adds	r4, #1
 8007ab6:	e7b0      	b.n	8007a1a <_svfiprintf_r+0x46>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	1b80      	subs	r0, r0, r6
 8007abc:	4083      	lsls	r3, r0
 8007abe:	6829      	ldr	r1, [r5, #0]
 8007ac0:	0014      	movs	r4, r2
 8007ac2:	430b      	orrs	r3, r1
 8007ac4:	602b      	str	r3, [r5, #0]
 8007ac6:	e7cd      	b.n	8007a64 <_svfiprintf_r+0x90>
 8007ac8:	9b05      	ldr	r3, [sp, #20]
 8007aca:	1d18      	adds	r0, r3, #4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	9005      	str	r0, [sp, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	db39      	blt.n	8007b48 <_svfiprintf_r+0x174>
 8007ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad6:	0014      	movs	r4, r2
 8007ad8:	7823      	ldrb	r3, [r4, #0]
 8007ada:	2b2e      	cmp	r3, #46	; 0x2e
 8007adc:	d10b      	bne.n	8007af6 <_svfiprintf_r+0x122>
 8007ade:	7863      	ldrb	r3, [r4, #1]
 8007ae0:	1c62      	adds	r2, r4, #1
 8007ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ae4:	d13e      	bne.n	8007b64 <_svfiprintf_r+0x190>
 8007ae6:	9b05      	ldr	r3, [sp, #20]
 8007ae8:	3402      	adds	r4, #2
 8007aea:	1d1a      	adds	r2, r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	9205      	str	r2, [sp, #20]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	db34      	blt.n	8007b5e <_svfiprintf_r+0x18a>
 8007af4:	9307      	str	r3, [sp, #28]
 8007af6:	4e35      	ldr	r6, [pc, #212]	; (8007bcc <_svfiprintf_r+0x1f8>)
 8007af8:	7821      	ldrb	r1, [r4, #0]
 8007afa:	2203      	movs	r2, #3
 8007afc:	0030      	movs	r0, r6
 8007afe:	f000 f9f5 	bl	8007eec <memchr>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d006      	beq.n	8007b14 <_svfiprintf_r+0x140>
 8007b06:	2340      	movs	r3, #64	; 0x40
 8007b08:	1b80      	subs	r0, r0, r6
 8007b0a:	4083      	lsls	r3, r0
 8007b0c:	682a      	ldr	r2, [r5, #0]
 8007b0e:	3401      	adds	r4, #1
 8007b10:	4313      	orrs	r3, r2
 8007b12:	602b      	str	r3, [r5, #0]
 8007b14:	7821      	ldrb	r1, [r4, #0]
 8007b16:	2206      	movs	r2, #6
 8007b18:	482d      	ldr	r0, [pc, #180]	; (8007bd0 <_svfiprintf_r+0x1fc>)
 8007b1a:	1c66      	adds	r6, r4, #1
 8007b1c:	7629      	strb	r1, [r5, #24]
 8007b1e:	f000 f9e5 	bl	8007eec <memchr>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d046      	beq.n	8007bb4 <_svfiprintf_r+0x1e0>
 8007b26:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <_svfiprintf_r+0x200>)
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d12f      	bne.n	8007b8c <_svfiprintf_r+0x1b8>
 8007b2c:	6829      	ldr	r1, [r5, #0]
 8007b2e:	9b05      	ldr	r3, [sp, #20]
 8007b30:	2207      	movs	r2, #7
 8007b32:	05c9      	lsls	r1, r1, #23
 8007b34:	d528      	bpl.n	8007b88 <_svfiprintf_r+0x1b4>
 8007b36:	189b      	adds	r3, r3, r2
 8007b38:	4393      	bics	r3, r2
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	9305      	str	r3, [sp, #20]
 8007b3e:	696b      	ldr	r3, [r5, #20]
 8007b40:	9a03      	ldr	r2, [sp, #12]
 8007b42:	189b      	adds	r3, r3, r2
 8007b44:	616b      	str	r3, [r5, #20]
 8007b46:	e767      	b.n	8007a18 <_svfiprintf_r+0x44>
 8007b48:	425b      	negs	r3, r3
 8007b4a:	60eb      	str	r3, [r5, #12]
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	e7c0      	b.n	8007ad6 <_svfiprintf_r+0x102>
 8007b54:	434b      	muls	r3, r1
 8007b56:	3401      	adds	r4, #1
 8007b58:	189b      	adds	r3, r3, r2
 8007b5a:	2001      	movs	r0, #1
 8007b5c:	e7a0      	b.n	8007aa0 <_svfiprintf_r+0xcc>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	425b      	negs	r3, r3
 8007b62:	e7c7      	b.n	8007af4 <_svfiprintf_r+0x120>
 8007b64:	2300      	movs	r3, #0
 8007b66:	0014      	movs	r4, r2
 8007b68:	200a      	movs	r0, #10
 8007b6a:	001a      	movs	r2, r3
 8007b6c:	606b      	str	r3, [r5, #4]
 8007b6e:	7821      	ldrb	r1, [r4, #0]
 8007b70:	3930      	subs	r1, #48	; 0x30
 8007b72:	2909      	cmp	r1, #9
 8007b74:	d903      	bls.n	8007b7e <_svfiprintf_r+0x1aa>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0bd      	beq.n	8007af6 <_svfiprintf_r+0x122>
 8007b7a:	9207      	str	r2, [sp, #28]
 8007b7c:	e7bb      	b.n	8007af6 <_svfiprintf_r+0x122>
 8007b7e:	4342      	muls	r2, r0
 8007b80:	3401      	adds	r4, #1
 8007b82:	1852      	adds	r2, r2, r1
 8007b84:	2301      	movs	r3, #1
 8007b86:	e7f2      	b.n	8007b6e <_svfiprintf_r+0x19a>
 8007b88:	3307      	adds	r3, #7
 8007b8a:	e7d5      	b.n	8007b38 <_svfiprintf_r+0x164>
 8007b8c:	ab05      	add	r3, sp, #20
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	003a      	movs	r2, r7
 8007b92:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <_svfiprintf_r+0x204>)
 8007b94:	0029      	movs	r1, r5
 8007b96:	9802      	ldr	r0, [sp, #8]
 8007b98:	e000      	b.n	8007b9c <_svfiprintf_r+0x1c8>
 8007b9a:	bf00      	nop
 8007b9c:	9003      	str	r0, [sp, #12]
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	d1cc      	bne.n	8007b3e <_svfiprintf_r+0x16a>
 8007ba4:	89bb      	ldrh	r3, [r7, #12]
 8007ba6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007ba8:	065b      	lsls	r3, r3, #25
 8007baa:	d400      	bmi.n	8007bae <_svfiprintf_r+0x1da>
 8007bac:	e729      	b.n	8007a02 <_svfiprintf_r+0x2e>
 8007bae:	2001      	movs	r0, #1
 8007bb0:	4240      	negs	r0, r0
 8007bb2:	e726      	b.n	8007a02 <_svfiprintf_r+0x2e>
 8007bb4:	ab05      	add	r3, sp, #20
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	003a      	movs	r2, r7
 8007bba:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <_svfiprintf_r+0x204>)
 8007bbc:	0029      	movs	r1, r5
 8007bbe:	9802      	ldr	r0, [sp, #8]
 8007bc0:	f000 f87a 	bl	8007cb8 <_printf_i>
 8007bc4:	e7ea      	b.n	8007b9c <_svfiprintf_r+0x1c8>
 8007bc6:	46c0      	nop			; (mov r8, r8)
 8007bc8:	08008599 	.word	0x08008599
 8007bcc:	0800859f 	.word	0x0800859f
 8007bd0:	080085a3 	.word	0x080085a3
 8007bd4:	00000000 	.word	0x00000000
 8007bd8:	08007911 	.word	0x08007911

08007bdc <_printf_common>:
 8007bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bde:	0015      	movs	r5, r2
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	688a      	ldr	r2, [r1, #8]
 8007be4:	690b      	ldr	r3, [r1, #16]
 8007be6:	9000      	str	r0, [sp, #0]
 8007be8:	000c      	movs	r4, r1
 8007bea:	4293      	cmp	r3, r2
 8007bec:	da00      	bge.n	8007bf0 <_printf_common+0x14>
 8007bee:	0013      	movs	r3, r2
 8007bf0:	0022      	movs	r2, r4
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	3243      	adds	r2, #67	; 0x43
 8007bf6:	7812      	ldrb	r2, [r2, #0]
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	d001      	beq.n	8007c00 <_printf_common+0x24>
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	069b      	lsls	r3, r3, #26
 8007c04:	d502      	bpl.n	8007c0c <_printf_common+0x30>
 8007c06:	682b      	ldr	r3, [r5, #0]
 8007c08:	3302      	adds	r3, #2
 8007c0a:	602b      	str	r3, [r5, #0]
 8007c0c:	2706      	movs	r7, #6
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	401f      	ands	r7, r3
 8007c12:	d027      	beq.n	8007c64 <_printf_common+0x88>
 8007c14:	0023      	movs	r3, r4
 8007c16:	3343      	adds	r3, #67	; 0x43
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	1e5a      	subs	r2, r3, #1
 8007c1c:	4193      	sbcs	r3, r2
 8007c1e:	6822      	ldr	r2, [r4, #0]
 8007c20:	0692      	lsls	r2, r2, #26
 8007c22:	d430      	bmi.n	8007c86 <_printf_common+0xaa>
 8007c24:	0022      	movs	r2, r4
 8007c26:	9901      	ldr	r1, [sp, #4]
 8007c28:	3243      	adds	r2, #67	; 0x43
 8007c2a:	9800      	ldr	r0, [sp, #0]
 8007c2c:	9e08      	ldr	r6, [sp, #32]
 8007c2e:	47b0      	blx	r6
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d025      	beq.n	8007c80 <_printf_common+0xa4>
 8007c34:	2306      	movs	r3, #6
 8007c36:	6820      	ldr	r0, [r4, #0]
 8007c38:	682a      	ldr	r2, [r5, #0]
 8007c3a:	68e1      	ldr	r1, [r4, #12]
 8007c3c:	4003      	ands	r3, r0
 8007c3e:	2500      	movs	r5, #0
 8007c40:	2b04      	cmp	r3, #4
 8007c42:	d103      	bne.n	8007c4c <_printf_common+0x70>
 8007c44:	1a8d      	subs	r5, r1, r2
 8007c46:	43eb      	mvns	r3, r5
 8007c48:	17db      	asrs	r3, r3, #31
 8007c4a:	401d      	ands	r5, r3
 8007c4c:	68a3      	ldr	r3, [r4, #8]
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	dd01      	ble.n	8007c58 <_printf_common+0x7c>
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	18ed      	adds	r5, r5, r3
 8007c58:	2700      	movs	r7, #0
 8007c5a:	42bd      	cmp	r5, r7
 8007c5c:	d120      	bne.n	8007ca0 <_printf_common+0xc4>
 8007c5e:	2000      	movs	r0, #0
 8007c60:	e010      	b.n	8007c84 <_printf_common+0xa8>
 8007c62:	3701      	adds	r7, #1
 8007c64:	68e3      	ldr	r3, [r4, #12]
 8007c66:	682a      	ldr	r2, [r5, #0]
 8007c68:	1a9b      	subs	r3, r3, r2
 8007c6a:	429f      	cmp	r7, r3
 8007c6c:	dad2      	bge.n	8007c14 <_printf_common+0x38>
 8007c6e:	0022      	movs	r2, r4
 8007c70:	2301      	movs	r3, #1
 8007c72:	3219      	adds	r2, #25
 8007c74:	9901      	ldr	r1, [sp, #4]
 8007c76:	9800      	ldr	r0, [sp, #0]
 8007c78:	9e08      	ldr	r6, [sp, #32]
 8007c7a:	47b0      	blx	r6
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d1f0      	bne.n	8007c62 <_printf_common+0x86>
 8007c80:	2001      	movs	r0, #1
 8007c82:	4240      	negs	r0, r0
 8007c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c86:	2030      	movs	r0, #48	; 0x30
 8007c88:	18e1      	adds	r1, r4, r3
 8007c8a:	3143      	adds	r1, #67	; 0x43
 8007c8c:	7008      	strb	r0, [r1, #0]
 8007c8e:	0021      	movs	r1, r4
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	3145      	adds	r1, #69	; 0x45
 8007c94:	7809      	ldrb	r1, [r1, #0]
 8007c96:	18a2      	adds	r2, r4, r2
 8007c98:	3243      	adds	r2, #67	; 0x43
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	7011      	strb	r1, [r2, #0]
 8007c9e:	e7c1      	b.n	8007c24 <_printf_common+0x48>
 8007ca0:	0022      	movs	r2, r4
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	321a      	adds	r2, #26
 8007ca6:	9901      	ldr	r1, [sp, #4]
 8007ca8:	9800      	ldr	r0, [sp, #0]
 8007caa:	9e08      	ldr	r6, [sp, #32]
 8007cac:	47b0      	blx	r6
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d0e6      	beq.n	8007c80 <_printf_common+0xa4>
 8007cb2:	3701      	adds	r7, #1
 8007cb4:	e7d1      	b.n	8007c5a <_printf_common+0x7e>
	...

08007cb8 <_printf_i>:
 8007cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cba:	b08b      	sub	sp, #44	; 0x2c
 8007cbc:	9206      	str	r2, [sp, #24]
 8007cbe:	000a      	movs	r2, r1
 8007cc0:	3243      	adds	r2, #67	; 0x43
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	9005      	str	r0, [sp, #20]
 8007cc6:	9204      	str	r2, [sp, #16]
 8007cc8:	7e0a      	ldrb	r2, [r1, #24]
 8007cca:	000c      	movs	r4, r1
 8007ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cce:	2a6e      	cmp	r2, #110	; 0x6e
 8007cd0:	d100      	bne.n	8007cd4 <_printf_i+0x1c>
 8007cd2:	e08f      	b.n	8007df4 <_printf_i+0x13c>
 8007cd4:	d817      	bhi.n	8007d06 <_printf_i+0x4e>
 8007cd6:	2a63      	cmp	r2, #99	; 0x63
 8007cd8:	d02c      	beq.n	8007d34 <_printf_i+0x7c>
 8007cda:	d808      	bhi.n	8007cee <_printf_i+0x36>
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	d100      	bne.n	8007ce2 <_printf_i+0x2a>
 8007ce0:	e099      	b.n	8007e16 <_printf_i+0x15e>
 8007ce2:	2a58      	cmp	r2, #88	; 0x58
 8007ce4:	d054      	beq.n	8007d90 <_printf_i+0xd8>
 8007ce6:	0026      	movs	r6, r4
 8007ce8:	3642      	adds	r6, #66	; 0x42
 8007cea:	7032      	strb	r2, [r6, #0]
 8007cec:	e029      	b.n	8007d42 <_printf_i+0x8a>
 8007cee:	2a64      	cmp	r2, #100	; 0x64
 8007cf0:	d001      	beq.n	8007cf6 <_printf_i+0x3e>
 8007cf2:	2a69      	cmp	r2, #105	; 0x69
 8007cf4:	d1f7      	bne.n	8007ce6 <_printf_i+0x2e>
 8007cf6:	6821      	ldr	r1, [r4, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	0608      	lsls	r0, r1, #24
 8007cfc:	d523      	bpl.n	8007d46 <_printf_i+0x8e>
 8007cfe:	1d11      	adds	r1, r2, #4
 8007d00:	6019      	str	r1, [r3, #0]
 8007d02:	6815      	ldr	r5, [r2, #0]
 8007d04:	e025      	b.n	8007d52 <_printf_i+0x9a>
 8007d06:	2a73      	cmp	r2, #115	; 0x73
 8007d08:	d100      	bne.n	8007d0c <_printf_i+0x54>
 8007d0a:	e088      	b.n	8007e1e <_printf_i+0x166>
 8007d0c:	d808      	bhi.n	8007d20 <_printf_i+0x68>
 8007d0e:	2a6f      	cmp	r2, #111	; 0x6f
 8007d10:	d029      	beq.n	8007d66 <_printf_i+0xae>
 8007d12:	2a70      	cmp	r2, #112	; 0x70
 8007d14:	d1e7      	bne.n	8007ce6 <_printf_i+0x2e>
 8007d16:	2220      	movs	r2, #32
 8007d18:	6809      	ldr	r1, [r1, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	6022      	str	r2, [r4, #0]
 8007d1e:	e003      	b.n	8007d28 <_printf_i+0x70>
 8007d20:	2a75      	cmp	r2, #117	; 0x75
 8007d22:	d020      	beq.n	8007d66 <_printf_i+0xae>
 8007d24:	2a78      	cmp	r2, #120	; 0x78
 8007d26:	d1de      	bne.n	8007ce6 <_printf_i+0x2e>
 8007d28:	0022      	movs	r2, r4
 8007d2a:	2178      	movs	r1, #120	; 0x78
 8007d2c:	3245      	adds	r2, #69	; 0x45
 8007d2e:	7011      	strb	r1, [r2, #0]
 8007d30:	4a6c      	ldr	r2, [pc, #432]	; (8007ee4 <_printf_i+0x22c>)
 8007d32:	e030      	b.n	8007d96 <_printf_i+0xde>
 8007d34:	000e      	movs	r6, r1
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	3642      	adds	r6, #66	; 0x42
 8007d3a:	1d11      	adds	r1, r2, #4
 8007d3c:	6019      	str	r1, [r3, #0]
 8007d3e:	6813      	ldr	r3, [r2, #0]
 8007d40:	7033      	strb	r3, [r6, #0]
 8007d42:	2301      	movs	r3, #1
 8007d44:	e079      	b.n	8007e3a <_printf_i+0x182>
 8007d46:	0649      	lsls	r1, r1, #25
 8007d48:	d5d9      	bpl.n	8007cfe <_printf_i+0x46>
 8007d4a:	1d11      	adds	r1, r2, #4
 8007d4c:	6019      	str	r1, [r3, #0]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	5ed5      	ldrsh	r5, [r2, r3]
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	da03      	bge.n	8007d5e <_printf_i+0xa6>
 8007d56:	232d      	movs	r3, #45	; 0x2d
 8007d58:	9a04      	ldr	r2, [sp, #16]
 8007d5a:	426d      	negs	r5, r5
 8007d5c:	7013      	strb	r3, [r2, #0]
 8007d5e:	4b62      	ldr	r3, [pc, #392]	; (8007ee8 <_printf_i+0x230>)
 8007d60:	270a      	movs	r7, #10
 8007d62:	9303      	str	r3, [sp, #12]
 8007d64:	e02f      	b.n	8007dc6 <_printf_i+0x10e>
 8007d66:	6820      	ldr	r0, [r4, #0]
 8007d68:	6819      	ldr	r1, [r3, #0]
 8007d6a:	0605      	lsls	r5, r0, #24
 8007d6c:	d503      	bpl.n	8007d76 <_printf_i+0xbe>
 8007d6e:	1d08      	adds	r0, r1, #4
 8007d70:	6018      	str	r0, [r3, #0]
 8007d72:	680d      	ldr	r5, [r1, #0]
 8007d74:	e005      	b.n	8007d82 <_printf_i+0xca>
 8007d76:	0640      	lsls	r0, r0, #25
 8007d78:	d5f9      	bpl.n	8007d6e <_printf_i+0xb6>
 8007d7a:	680d      	ldr	r5, [r1, #0]
 8007d7c:	1d08      	adds	r0, r1, #4
 8007d7e:	6018      	str	r0, [r3, #0]
 8007d80:	b2ad      	uxth	r5, r5
 8007d82:	4b59      	ldr	r3, [pc, #356]	; (8007ee8 <_printf_i+0x230>)
 8007d84:	2708      	movs	r7, #8
 8007d86:	9303      	str	r3, [sp, #12]
 8007d88:	2a6f      	cmp	r2, #111	; 0x6f
 8007d8a:	d018      	beq.n	8007dbe <_printf_i+0x106>
 8007d8c:	270a      	movs	r7, #10
 8007d8e:	e016      	b.n	8007dbe <_printf_i+0x106>
 8007d90:	3145      	adds	r1, #69	; 0x45
 8007d92:	700a      	strb	r2, [r1, #0]
 8007d94:	4a54      	ldr	r2, [pc, #336]	; (8007ee8 <_printf_i+0x230>)
 8007d96:	9203      	str	r2, [sp, #12]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	6821      	ldr	r1, [r4, #0]
 8007d9c:	1d10      	adds	r0, r2, #4
 8007d9e:	6018      	str	r0, [r3, #0]
 8007da0:	6815      	ldr	r5, [r2, #0]
 8007da2:	0608      	lsls	r0, r1, #24
 8007da4:	d522      	bpl.n	8007dec <_printf_i+0x134>
 8007da6:	07cb      	lsls	r3, r1, #31
 8007da8:	d502      	bpl.n	8007db0 <_printf_i+0xf8>
 8007daa:	2320      	movs	r3, #32
 8007dac:	4319      	orrs	r1, r3
 8007dae:	6021      	str	r1, [r4, #0]
 8007db0:	2710      	movs	r7, #16
 8007db2:	2d00      	cmp	r5, #0
 8007db4:	d103      	bne.n	8007dbe <_printf_i+0x106>
 8007db6:	2320      	movs	r3, #32
 8007db8:	6822      	ldr	r2, [r4, #0]
 8007dba:	439a      	bics	r2, r3
 8007dbc:	6022      	str	r2, [r4, #0]
 8007dbe:	0023      	movs	r3, r4
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	3343      	adds	r3, #67	; 0x43
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	6863      	ldr	r3, [r4, #4]
 8007dc8:	60a3      	str	r3, [r4, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db5c      	blt.n	8007e88 <_printf_i+0x1d0>
 8007dce:	2204      	movs	r2, #4
 8007dd0:	6821      	ldr	r1, [r4, #0]
 8007dd2:	4391      	bics	r1, r2
 8007dd4:	6021      	str	r1, [r4, #0]
 8007dd6:	2d00      	cmp	r5, #0
 8007dd8:	d158      	bne.n	8007e8c <_printf_i+0x1d4>
 8007dda:	9e04      	ldr	r6, [sp, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d064      	beq.n	8007eaa <_printf_i+0x1f2>
 8007de0:	0026      	movs	r6, r4
 8007de2:	9b03      	ldr	r3, [sp, #12]
 8007de4:	3642      	adds	r6, #66	; 0x42
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	7033      	strb	r3, [r6, #0]
 8007dea:	e05e      	b.n	8007eaa <_printf_i+0x1f2>
 8007dec:	0648      	lsls	r0, r1, #25
 8007dee:	d5da      	bpl.n	8007da6 <_printf_i+0xee>
 8007df0:	b2ad      	uxth	r5, r5
 8007df2:	e7d8      	b.n	8007da6 <_printf_i+0xee>
 8007df4:	6809      	ldr	r1, [r1, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	0608      	lsls	r0, r1, #24
 8007dfa:	d505      	bpl.n	8007e08 <_printf_i+0x150>
 8007dfc:	1d11      	adds	r1, r2, #4
 8007dfe:	6019      	str	r1, [r3, #0]
 8007e00:	6813      	ldr	r3, [r2, #0]
 8007e02:	6962      	ldr	r2, [r4, #20]
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	e006      	b.n	8007e16 <_printf_i+0x15e>
 8007e08:	0649      	lsls	r1, r1, #25
 8007e0a:	d5f7      	bpl.n	8007dfc <_printf_i+0x144>
 8007e0c:	1d11      	adds	r1, r2, #4
 8007e0e:	6019      	str	r1, [r3, #0]
 8007e10:	6813      	ldr	r3, [r2, #0]
 8007e12:	8aa2      	ldrh	r2, [r4, #20]
 8007e14:	801a      	strh	r2, [r3, #0]
 8007e16:	2300      	movs	r3, #0
 8007e18:	9e04      	ldr	r6, [sp, #16]
 8007e1a:	6123      	str	r3, [r4, #16]
 8007e1c:	e054      	b.n	8007ec8 <_printf_i+0x210>
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	1d11      	adds	r1, r2, #4
 8007e22:	6019      	str	r1, [r3, #0]
 8007e24:	6816      	ldr	r6, [r2, #0]
 8007e26:	2100      	movs	r1, #0
 8007e28:	6862      	ldr	r2, [r4, #4]
 8007e2a:	0030      	movs	r0, r6
 8007e2c:	f000 f85e 	bl	8007eec <memchr>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d001      	beq.n	8007e38 <_printf_i+0x180>
 8007e34:	1b80      	subs	r0, r0, r6
 8007e36:	6060      	str	r0, [r4, #4]
 8007e38:	6863      	ldr	r3, [r4, #4]
 8007e3a:	6123      	str	r3, [r4, #16]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	9a04      	ldr	r2, [sp, #16]
 8007e40:	7013      	strb	r3, [r2, #0]
 8007e42:	e041      	b.n	8007ec8 <_printf_i+0x210>
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	0032      	movs	r2, r6
 8007e48:	9906      	ldr	r1, [sp, #24]
 8007e4a:	9805      	ldr	r0, [sp, #20]
 8007e4c:	9d07      	ldr	r5, [sp, #28]
 8007e4e:	47a8      	blx	r5
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d043      	beq.n	8007edc <_printf_i+0x224>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	2500      	movs	r5, #0
 8007e58:	079b      	lsls	r3, r3, #30
 8007e5a:	d40f      	bmi.n	8007e7c <_printf_i+0x1c4>
 8007e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5e:	68e0      	ldr	r0, [r4, #12]
 8007e60:	4298      	cmp	r0, r3
 8007e62:	da3d      	bge.n	8007ee0 <_printf_i+0x228>
 8007e64:	0018      	movs	r0, r3
 8007e66:	e03b      	b.n	8007ee0 <_printf_i+0x228>
 8007e68:	0022      	movs	r2, r4
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	3219      	adds	r2, #25
 8007e6e:	9906      	ldr	r1, [sp, #24]
 8007e70:	9805      	ldr	r0, [sp, #20]
 8007e72:	9e07      	ldr	r6, [sp, #28]
 8007e74:	47b0      	blx	r6
 8007e76:	1c43      	adds	r3, r0, #1
 8007e78:	d030      	beq.n	8007edc <_printf_i+0x224>
 8007e7a:	3501      	adds	r5, #1
 8007e7c:	68e3      	ldr	r3, [r4, #12]
 8007e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e80:	1a9b      	subs	r3, r3, r2
 8007e82:	429d      	cmp	r5, r3
 8007e84:	dbf0      	blt.n	8007e68 <_printf_i+0x1b0>
 8007e86:	e7e9      	b.n	8007e5c <_printf_i+0x1a4>
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	d0a9      	beq.n	8007de0 <_printf_i+0x128>
 8007e8c:	9e04      	ldr	r6, [sp, #16]
 8007e8e:	0028      	movs	r0, r5
 8007e90:	0039      	movs	r1, r7
 8007e92:	f7f8 f9c9 	bl	8000228 <__aeabi_uidivmod>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	3e01      	subs	r6, #1
 8007e9a:	5c5b      	ldrb	r3, [r3, r1]
 8007e9c:	0028      	movs	r0, r5
 8007e9e:	7033      	strb	r3, [r6, #0]
 8007ea0:	0039      	movs	r1, r7
 8007ea2:	f7f8 f93b 	bl	800011c <__udivsi3>
 8007ea6:	1e05      	subs	r5, r0, #0
 8007ea8:	d1f1      	bne.n	8007e8e <_printf_i+0x1d6>
 8007eaa:	2f08      	cmp	r7, #8
 8007eac:	d109      	bne.n	8007ec2 <_printf_i+0x20a>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	07db      	lsls	r3, r3, #31
 8007eb2:	d506      	bpl.n	8007ec2 <_printf_i+0x20a>
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	6922      	ldr	r2, [r4, #16]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	dc02      	bgt.n	8007ec2 <_printf_i+0x20a>
 8007ebc:	2330      	movs	r3, #48	; 0x30
 8007ebe:	3e01      	subs	r6, #1
 8007ec0:	7033      	strb	r3, [r6, #0]
 8007ec2:	9b04      	ldr	r3, [sp, #16]
 8007ec4:	1b9b      	subs	r3, r3, r6
 8007ec6:	6123      	str	r3, [r4, #16]
 8007ec8:	9b07      	ldr	r3, [sp, #28]
 8007eca:	aa09      	add	r2, sp, #36	; 0x24
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	0021      	movs	r1, r4
 8007ed0:	9b06      	ldr	r3, [sp, #24]
 8007ed2:	9805      	ldr	r0, [sp, #20]
 8007ed4:	f7ff fe82 	bl	8007bdc <_printf_common>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d1b3      	bne.n	8007e44 <_printf_i+0x18c>
 8007edc:	2001      	movs	r0, #1
 8007ede:	4240      	negs	r0, r0
 8007ee0:	b00b      	add	sp, #44	; 0x2c
 8007ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee4:	080085bb 	.word	0x080085bb
 8007ee8:	080085aa 	.word	0x080085aa

08007eec <memchr>:
 8007eec:	b2c9      	uxtb	r1, r1
 8007eee:	1882      	adds	r2, r0, r2
 8007ef0:	4290      	cmp	r0, r2
 8007ef2:	d101      	bne.n	8007ef8 <memchr+0xc>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	4770      	bx	lr
 8007ef8:	7803      	ldrb	r3, [r0, #0]
 8007efa:	428b      	cmp	r3, r1
 8007efc:	d0fb      	beq.n	8007ef6 <memchr+0xa>
 8007efe:	3001      	adds	r0, #1
 8007f00:	e7f6      	b.n	8007ef0 <memchr+0x4>

08007f02 <memmove>:
 8007f02:	b510      	push	{r4, lr}
 8007f04:	4288      	cmp	r0, r1
 8007f06:	d902      	bls.n	8007f0e <memmove+0xc>
 8007f08:	188b      	adds	r3, r1, r2
 8007f0a:	4298      	cmp	r0, r3
 8007f0c:	d308      	bcc.n	8007f20 <memmove+0x1e>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d007      	beq.n	8007f24 <memmove+0x22>
 8007f14:	5ccc      	ldrb	r4, [r1, r3]
 8007f16:	54c4      	strb	r4, [r0, r3]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	e7f9      	b.n	8007f10 <memmove+0xe>
 8007f1c:	5c8b      	ldrb	r3, [r1, r2]
 8007f1e:	5483      	strb	r3, [r0, r2]
 8007f20:	3a01      	subs	r2, #1
 8007f22:	d2fb      	bcs.n	8007f1c <memmove+0x1a>
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <_realloc_r>:
 8007f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f28:	0007      	movs	r7, r0
 8007f2a:	000d      	movs	r5, r1
 8007f2c:	0016      	movs	r6, r2
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	d105      	bne.n	8007f3e <_realloc_r+0x18>
 8007f32:	0011      	movs	r1, r2
 8007f34:	f7ff fc20 	bl	8007778 <_malloc_r>
 8007f38:	0004      	movs	r4, r0
 8007f3a:	0020      	movs	r0, r4
 8007f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	d103      	bne.n	8007f4a <_realloc_r+0x24>
 8007f42:	f7ff fbcf 	bl	80076e4 <_free_r>
 8007f46:	0034      	movs	r4, r6
 8007f48:	e7f7      	b.n	8007f3a <_realloc_r+0x14>
 8007f4a:	f000 f812 	bl	8007f72 <_malloc_usable_size_r>
 8007f4e:	002c      	movs	r4, r5
 8007f50:	4286      	cmp	r6, r0
 8007f52:	d9f2      	bls.n	8007f3a <_realloc_r+0x14>
 8007f54:	0031      	movs	r1, r6
 8007f56:	0038      	movs	r0, r7
 8007f58:	f7ff fc0e 	bl	8007778 <_malloc_r>
 8007f5c:	1e04      	subs	r4, r0, #0
 8007f5e:	d0ec      	beq.n	8007f3a <_realloc_r+0x14>
 8007f60:	0029      	movs	r1, r5
 8007f62:	0032      	movs	r2, r6
 8007f64:	f7ff fbac 	bl	80076c0 <memcpy>
 8007f68:	0029      	movs	r1, r5
 8007f6a:	0038      	movs	r0, r7
 8007f6c:	f7ff fbba 	bl	80076e4 <_free_r>
 8007f70:	e7e3      	b.n	8007f3a <_realloc_r+0x14>

08007f72 <_malloc_usable_size_r>:
 8007f72:	1f0b      	subs	r3, r1, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	1f18      	subs	r0, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da01      	bge.n	8007f80 <_malloc_usable_size_r+0xe>
 8007f7c:	580b      	ldr	r3, [r1, r0]
 8007f7e:	18c0      	adds	r0, r0, r3
 8007f80:	4770      	bx	lr
	...

08007f84 <ceil>:
 8007f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f86:	004b      	lsls	r3, r1, #1
 8007f88:	4a39      	ldr	r2, [pc, #228]	; (8008070 <ceil+0xec>)
 8007f8a:	0d5b      	lsrs	r3, r3, #21
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	189e      	adds	r6, r3, r2
 8007f90:	9003      	str	r0, [sp, #12]
 8007f92:	000c      	movs	r4, r1
 8007f94:	0005      	movs	r5, r0
 8007f96:	2e13      	cmp	r6, #19
 8007f98:	dc32      	bgt.n	8008000 <ceil+0x7c>
 8007f9a:	2e00      	cmp	r6, #0
 8007f9c:	da13      	bge.n	8007fc6 <ceil+0x42>
 8007f9e:	4a35      	ldr	r2, [pc, #212]	; (8008074 <ceil+0xf0>)
 8007fa0:	4b35      	ldr	r3, [pc, #212]	; (8008078 <ceil+0xf4>)
 8007fa2:	f7f8 fb6d 	bl	8000680 <__aeabi_dadd>
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f7f8 fa57 	bl	800045c <__aeabi_dcmpgt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d006      	beq.n	8007fc0 <ceil+0x3c>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	db57      	blt.n	8008066 <ceil+0xe2>
 8007fb6:	432c      	orrs	r4, r5
 8007fb8:	2500      	movs	r5, #0
 8007fba:	42ac      	cmp	r4, r5
 8007fbc:	d000      	beq.n	8007fc0 <ceil+0x3c>
 8007fbe:	4c2f      	ldr	r4, [pc, #188]	; (800807c <ceil+0xf8>)
 8007fc0:	0028      	movs	r0, r5
 8007fc2:	0021      	movs	r1, r4
 8007fc4:	e026      	b.n	8008014 <ceil+0x90>
 8007fc6:	4f2e      	ldr	r7, [pc, #184]	; (8008080 <ceil+0xfc>)
 8007fc8:	4137      	asrs	r7, r6
 8007fca:	003b      	movs	r3, r7
 8007fcc:	400b      	ands	r3, r1
 8007fce:	4303      	orrs	r3, r0
 8007fd0:	d020      	beq.n	8008014 <ceil+0x90>
 8007fd2:	9000      	str	r0, [sp, #0]
 8007fd4:	9101      	str	r1, [sp, #4]
 8007fd6:	4a27      	ldr	r2, [pc, #156]	; (8008074 <ceil+0xf0>)
 8007fd8:	4b27      	ldr	r3, [pc, #156]	; (8008078 <ceil+0xf4>)
 8007fda:	9800      	ldr	r0, [sp, #0]
 8007fdc:	9901      	ldr	r1, [sp, #4]
 8007fde:	f7f8 fb4f 	bl	8000680 <__aeabi_dadd>
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f7f8 fa39 	bl	800045c <__aeabi_dcmpgt>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d0e8      	beq.n	8007fc0 <ceil+0x3c>
 8007fee:	2c00      	cmp	r4, #0
 8007ff0:	dd03      	ble.n	8007ffa <ceil+0x76>
 8007ff2:	2380      	movs	r3, #128	; 0x80
 8007ff4:	035b      	lsls	r3, r3, #13
 8007ff6:	4133      	asrs	r3, r6
 8007ff8:	18e4      	adds	r4, r4, r3
 8007ffa:	43bc      	bics	r4, r7
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	e7df      	b.n	8007fc0 <ceil+0x3c>
 8008000:	2e33      	cmp	r6, #51	; 0x33
 8008002:	dd09      	ble.n	8008018 <ceil+0x94>
 8008004:	2380      	movs	r3, #128	; 0x80
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	429e      	cmp	r6, r3
 800800a:	d103      	bne.n	8008014 <ceil+0x90>
 800800c:	0002      	movs	r2, r0
 800800e:	000b      	movs	r3, r1
 8008010:	f7f8 fb36 	bl	8000680 <__aeabi_dadd>
 8008014:	b005      	add	sp, #20
 8008016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008018:	2701      	movs	r7, #1
 800801a:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <ceil+0x100>)
 800801c:	427f      	negs	r7, r7
 800801e:	189b      	adds	r3, r3, r2
 8008020:	40df      	lsrs	r7, r3
 8008022:	4207      	tst	r7, r0
 8008024:	d0f6      	beq.n	8008014 <ceil+0x90>
 8008026:	9000      	str	r0, [sp, #0]
 8008028:	9101      	str	r1, [sp, #4]
 800802a:	4a12      	ldr	r2, [pc, #72]	; (8008074 <ceil+0xf0>)
 800802c:	4b12      	ldr	r3, [pc, #72]	; (8008078 <ceil+0xf4>)
 800802e:	9800      	ldr	r0, [sp, #0]
 8008030:	9901      	ldr	r1, [sp, #4]
 8008032:	f7f8 fb25 	bl	8000680 <__aeabi_dadd>
 8008036:	2200      	movs	r2, #0
 8008038:	2300      	movs	r3, #0
 800803a:	f7f8 fa0f 	bl	800045c <__aeabi_dcmpgt>
 800803e:	2800      	cmp	r0, #0
 8008040:	d0be      	beq.n	8007fc0 <ceil+0x3c>
 8008042:	2c00      	cmp	r4, #0
 8008044:	dd02      	ble.n	800804c <ceil+0xc8>
 8008046:	2e14      	cmp	r6, #20
 8008048:	d102      	bne.n	8008050 <ceil+0xcc>
 800804a:	3401      	adds	r4, #1
 800804c:	43bd      	bics	r5, r7
 800804e:	e7b7      	b.n	8007fc0 <ceil+0x3c>
 8008050:	2334      	movs	r3, #52	; 0x34
 8008052:	1b9e      	subs	r6, r3, r6
 8008054:	3b33      	subs	r3, #51	; 0x33
 8008056:	40b3      	lsls	r3, r6
 8008058:	18ed      	adds	r5, r5, r3
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	429d      	cmp	r5, r3
 800805e:	419b      	sbcs	r3, r3
 8008060:	425b      	negs	r3, r3
 8008062:	18e4      	adds	r4, r4, r3
 8008064:	e7f2      	b.n	800804c <ceil+0xc8>
 8008066:	2480      	movs	r4, #128	; 0x80
 8008068:	2500      	movs	r5, #0
 800806a:	0624      	lsls	r4, r4, #24
 800806c:	e7a8      	b.n	8007fc0 <ceil+0x3c>
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	fffffc01 	.word	0xfffffc01
 8008074:	8800759c 	.word	0x8800759c
 8008078:	7e37e43c 	.word	0x7e37e43c
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	000fffff 	.word	0x000fffff
 8008084:	fffffbed 	.word	0xfffffbed

08008088 <floor>:
 8008088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800808a:	004b      	lsls	r3, r1, #1
 800808c:	4a39      	ldr	r2, [pc, #228]	; (8008174 <floor+0xec>)
 800808e:	0d5b      	lsrs	r3, r3, #21
 8008090:	b085      	sub	sp, #20
 8008092:	189e      	adds	r6, r3, r2
 8008094:	9003      	str	r0, [sp, #12]
 8008096:	000c      	movs	r4, r1
 8008098:	0005      	movs	r5, r0
 800809a:	2e13      	cmp	r6, #19
 800809c:	dc34      	bgt.n	8008108 <floor+0x80>
 800809e:	2e00      	cmp	r6, #0
 80080a0:	da15      	bge.n	80080ce <floor+0x46>
 80080a2:	4a35      	ldr	r2, [pc, #212]	; (8008178 <floor+0xf0>)
 80080a4:	4b35      	ldr	r3, [pc, #212]	; (800817c <floor+0xf4>)
 80080a6:	f7f8 faeb 	bl	8000680 <__aeabi_dadd>
 80080aa:	2200      	movs	r2, #0
 80080ac:	2300      	movs	r3, #0
 80080ae:	f7f8 f9d5 	bl	800045c <__aeabi_dcmpgt>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d008      	beq.n	80080c8 <floor+0x40>
 80080b6:	2c00      	cmp	r4, #0
 80080b8:	da59      	bge.n	800816e <floor+0xe6>
 80080ba:	0063      	lsls	r3, r4, #1
 80080bc:	085b      	lsrs	r3, r3, #1
 80080be:	432b      	orrs	r3, r5
 80080c0:	2500      	movs	r5, #0
 80080c2:	42ab      	cmp	r3, r5
 80080c4:	d000      	beq.n	80080c8 <floor+0x40>
 80080c6:	4c2e      	ldr	r4, [pc, #184]	; (8008180 <floor+0xf8>)
 80080c8:	0028      	movs	r0, r5
 80080ca:	0021      	movs	r1, r4
 80080cc:	e026      	b.n	800811c <floor+0x94>
 80080ce:	4f2d      	ldr	r7, [pc, #180]	; (8008184 <floor+0xfc>)
 80080d0:	4137      	asrs	r7, r6
 80080d2:	003b      	movs	r3, r7
 80080d4:	400b      	ands	r3, r1
 80080d6:	4303      	orrs	r3, r0
 80080d8:	d020      	beq.n	800811c <floor+0x94>
 80080da:	9000      	str	r0, [sp, #0]
 80080dc:	9101      	str	r1, [sp, #4]
 80080de:	4a26      	ldr	r2, [pc, #152]	; (8008178 <floor+0xf0>)
 80080e0:	4b26      	ldr	r3, [pc, #152]	; (800817c <floor+0xf4>)
 80080e2:	9800      	ldr	r0, [sp, #0]
 80080e4:	9901      	ldr	r1, [sp, #4]
 80080e6:	f7f8 facb 	bl	8000680 <__aeabi_dadd>
 80080ea:	2200      	movs	r2, #0
 80080ec:	2300      	movs	r3, #0
 80080ee:	f7f8 f9b5 	bl	800045c <__aeabi_dcmpgt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d0e8      	beq.n	80080c8 <floor+0x40>
 80080f6:	2c00      	cmp	r4, #0
 80080f8:	da03      	bge.n	8008102 <floor+0x7a>
 80080fa:	2380      	movs	r3, #128	; 0x80
 80080fc:	035b      	lsls	r3, r3, #13
 80080fe:	4133      	asrs	r3, r6
 8008100:	18e4      	adds	r4, r4, r3
 8008102:	43bc      	bics	r4, r7
 8008104:	2500      	movs	r5, #0
 8008106:	e7df      	b.n	80080c8 <floor+0x40>
 8008108:	2e33      	cmp	r6, #51	; 0x33
 800810a:	dd09      	ble.n	8008120 <floor+0x98>
 800810c:	2380      	movs	r3, #128	; 0x80
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	429e      	cmp	r6, r3
 8008112:	d103      	bne.n	800811c <floor+0x94>
 8008114:	0002      	movs	r2, r0
 8008116:	000b      	movs	r3, r1
 8008118:	f7f8 fab2 	bl	8000680 <__aeabi_dadd>
 800811c:	b005      	add	sp, #20
 800811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008120:	2701      	movs	r7, #1
 8008122:	4a19      	ldr	r2, [pc, #100]	; (8008188 <floor+0x100>)
 8008124:	427f      	negs	r7, r7
 8008126:	189b      	adds	r3, r3, r2
 8008128:	40df      	lsrs	r7, r3
 800812a:	4207      	tst	r7, r0
 800812c:	d0f6      	beq.n	800811c <floor+0x94>
 800812e:	9000      	str	r0, [sp, #0]
 8008130:	9101      	str	r1, [sp, #4]
 8008132:	4a11      	ldr	r2, [pc, #68]	; (8008178 <floor+0xf0>)
 8008134:	4b11      	ldr	r3, [pc, #68]	; (800817c <floor+0xf4>)
 8008136:	9800      	ldr	r0, [sp, #0]
 8008138:	9901      	ldr	r1, [sp, #4]
 800813a:	f7f8 faa1 	bl	8000680 <__aeabi_dadd>
 800813e:	2200      	movs	r2, #0
 8008140:	2300      	movs	r3, #0
 8008142:	f7f8 f98b 	bl	800045c <__aeabi_dcmpgt>
 8008146:	2800      	cmp	r0, #0
 8008148:	d0be      	beq.n	80080c8 <floor+0x40>
 800814a:	2c00      	cmp	r4, #0
 800814c:	da02      	bge.n	8008154 <floor+0xcc>
 800814e:	2e14      	cmp	r6, #20
 8008150:	d102      	bne.n	8008158 <floor+0xd0>
 8008152:	3401      	adds	r4, #1
 8008154:	43bd      	bics	r5, r7
 8008156:	e7b7      	b.n	80080c8 <floor+0x40>
 8008158:	2334      	movs	r3, #52	; 0x34
 800815a:	1b9e      	subs	r6, r3, r6
 800815c:	3b33      	subs	r3, #51	; 0x33
 800815e:	40b3      	lsls	r3, r6
 8008160:	18ed      	adds	r5, r5, r3
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	429d      	cmp	r5, r3
 8008166:	419b      	sbcs	r3, r3
 8008168:	425b      	negs	r3, r3
 800816a:	18e4      	adds	r4, r4, r3
 800816c:	e7f2      	b.n	8008154 <floor+0xcc>
 800816e:	2500      	movs	r5, #0
 8008170:	002c      	movs	r4, r5
 8008172:	e7a9      	b.n	80080c8 <floor+0x40>
 8008174:	fffffc01 	.word	0xfffffc01
 8008178:	8800759c 	.word	0x8800759c
 800817c:	7e37e43c 	.word	0x7e37e43c
 8008180:	bff00000 	.word	0xbff00000
 8008184:	000fffff 	.word	0x000fffff
 8008188:	fffffbed 	.word	0xfffffbed

0800818c <round>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	004a      	lsls	r2, r1, #1
 8008190:	4d1d      	ldr	r5, [pc, #116]	; (8008208 <round+0x7c>)
 8008192:	0d52      	lsrs	r2, r2, #21
 8008194:	1955      	adds	r5, r2, r5
 8008196:	000e      	movs	r6, r1
 8008198:	2d13      	cmp	r5, #19
 800819a:	dc18      	bgt.n	80081ce <round+0x42>
 800819c:	2d00      	cmp	r5, #0
 800819e:	da09      	bge.n	80081b4 <round+0x28>
 80081a0:	0fcb      	lsrs	r3, r1, #31
 80081a2:	07db      	lsls	r3, r3, #31
 80081a4:	2200      	movs	r2, #0
 80081a6:	1c69      	adds	r1, r5, #1
 80081a8:	d101      	bne.n	80081ae <round+0x22>
 80081aa:	4918      	ldr	r1, [pc, #96]	; (800820c <round+0x80>)
 80081ac:	430b      	orrs	r3, r1
 80081ae:	0019      	movs	r1, r3
 80081b0:	0010      	movs	r0, r2
 80081b2:	e016      	b.n	80081e2 <round+0x56>
 80081b4:	4a16      	ldr	r2, [pc, #88]	; (8008210 <round+0x84>)
 80081b6:	412a      	asrs	r2, r5
 80081b8:	420a      	tst	r2, r1
 80081ba:	d101      	bne.n	80081c0 <round+0x34>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d010      	beq.n	80081e2 <round+0x56>
 80081c0:	2380      	movs	r3, #128	; 0x80
 80081c2:	031b      	lsls	r3, r3, #12
 80081c4:	412b      	asrs	r3, r5
 80081c6:	199b      	adds	r3, r3, r6
 80081c8:	4393      	bics	r3, r2
 80081ca:	2200      	movs	r2, #0
 80081cc:	e7ef      	b.n	80081ae <round+0x22>
 80081ce:	2d33      	cmp	r5, #51	; 0x33
 80081d0:	dd08      	ble.n	80081e4 <round+0x58>
 80081d2:	2380      	movs	r3, #128	; 0x80
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	429d      	cmp	r5, r3
 80081d8:	d103      	bne.n	80081e2 <round+0x56>
 80081da:	0002      	movs	r2, r0
 80081dc:	000b      	movs	r3, r1
 80081de:	f7f8 fa4f 	bl	8000680 <__aeabi_dadd>
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	4e0b      	ldr	r6, [pc, #44]	; (8008214 <round+0x88>)
 80081e6:	1992      	adds	r2, r2, r6
 80081e8:	2601      	movs	r6, #1
 80081ea:	4276      	negs	r6, r6
 80081ec:	40d6      	lsrs	r6, r2
 80081ee:	4206      	tst	r6, r0
 80081f0:	d0f7      	beq.n	80081e2 <round+0x56>
 80081f2:	2233      	movs	r2, #51	; 0x33
 80081f4:	1b55      	subs	r5, r2, r5
 80081f6:	3a32      	subs	r2, #50	; 0x32
 80081f8:	40aa      	lsls	r2, r5
 80081fa:	1812      	adds	r2, r2, r0
 80081fc:	4282      	cmp	r2, r0
 80081fe:	41a4      	sbcs	r4, r4
 8008200:	4264      	negs	r4, r4
 8008202:	190b      	adds	r3, r1, r4
 8008204:	43b2      	bics	r2, r6
 8008206:	e7d2      	b.n	80081ae <round+0x22>
 8008208:	fffffc01 	.word	0xfffffc01
 800820c:	3ff00000 	.word	0x3ff00000
 8008210:	000fffff 	.word	0x000fffff
 8008214:	fffffbed 	.word	0xfffffbed

08008218 <_sbrk>:
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <_sbrk+0x18>)
 800821a:	0002      	movs	r2, r0
 800821c:	6819      	ldr	r1, [r3, #0]
 800821e:	2900      	cmp	r1, #0
 8008220:	d101      	bne.n	8008226 <_sbrk+0xe>
 8008222:	4904      	ldr	r1, [pc, #16]	; (8008234 <_sbrk+0x1c>)
 8008224:	6019      	str	r1, [r3, #0]
 8008226:	6818      	ldr	r0, [r3, #0]
 8008228:	1882      	adds	r2, r0, r2
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	4770      	bx	lr
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	200005e8 	.word	0x200005e8
 8008234:	200006a0 	.word	0x200006a0

08008238 <_init>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr

08008244 <_fini>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr
