/*
 * FreeModbus Libary: BARE Port
 * Copyright (C) 2006 Christian Walter <wolti@sil.at>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * File: $Id: porttimer.c,v 1.1 2006/08/22 21:35:13 wolti Exp $
 */
/* Board Configuration File */

#include "main.h"
#include "serie.h"

/* Standard includes. */
#include <stdio.h>

/* Scheduler includes. */
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "semphr.h"

/* Library includes. */
#include "stm32l432xx.h"
#include "stm32l4xx_it.h"

/* ----------------------- Platform includes --------------------------------*/

/* ----------------------- Modbus includes ----------------------------------*/
#include "port.h"
#include "mb.h"
#include "mbport.h"
/*#include "stm32f10x.h"*/

/* Timer handler declaration */
TIM_HandleTypeDef TimHandle;
/*Timer Output Compare Configuration Structure declaration */
TIM_OC_InitTypeDef sConfig;
/* ----------------------- Start implementation -----------------------------*/
static uint16_t sPeriod50us = 0;
uint16_t capture = 0;
uint16_t TimerValue = 0;


BOOL xMBPortTimersInit( USHORT usTim1Timerout50us ) //配置50us时钟
{
  /* TIM2 clock enable */
  __HAL_RCC_TIM2_CLK_ENABLE();


  /* Enable the interrupt for TIM2 */
  HAL_NVIC_SetPriority(TIM2_IRQn, MODBUS_TIMER_ISR_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn);

  /* Compute the prescaler value */
	uint16_t PrescalerValue = 0;

	/* Get Timer Clock */
	//uint32_t uBaseTimerFreq_TIM2 = RCC_Clocks.PCLK1_Frequency*2;
  uint32_t uBaseTimerFreq_TIM2 = HAL_RCC_GetPCLK1Freq()*2;
	PrescalerValue = (uint16_t) (uBaseTimerFreq_TIM2 / 20000) - 1;

  /* Time base configuration */
  TimHandle.Instance                = TIM2;
  TimHandle.Init.Prescaler          = PrescalerValue;
  TimHandle.Init.Period             = usTim1Timerout50us;
  TimHandle.Init.ClockDivision      = 0;
  TimHandle.Init.CounterMode        = TIM_COUNTERMODE_UP;
  TimHandle.Init.AutoReloadPreload       = TIM_AUTORELOAD_PRELOAD_DISABLE;

  HAL_TIM_Base_Init(&TimHandle); 

  /* Output Compare Timing Mode configuration: Channel1 */
  sConfig.OCMode        = TIM_OCMODE_TIMING;
  sConfig.OCPolarity    = TIM_OCPOLARITY_HIGH;
  sConfig.Pulse         = (uint16_t) usTim1Timerout50us;

  HAL_TIM_OC_ConfigChannel(&TimHandle, &sConfig, TIM_CHANNEL_1);

  //TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
  __HAL_TIM_ENABLE_OCxPRELOAD(&TimHandle, TIM_CHANNEL_1);

  /* TIM IT disable */
  //TIM_ITConfig(TIM2, TIM_IT_CC1, DISABLE);
  __HAL_TIM_DISABLE_IT(&TimHandle, TIM_IT_CC1);

  /* TIM2 disable counter */
  //TIM_Cmd(TIM2, DISABLE);
  __HAL_TIM_DISABLE(&TimHandle);

	TimerValue = usTim1Timerout50us;

	return TRUE;
}


void vMBPortTimersEnable(  ) //打开时钟
{
  __HAL_TIM_CLEAR_IT(&TimHandle, TIM_IT_CC1);
  __HAL_TIM_SET_AUTORELOAD(&TimHandle, TIM_AUTORELOAD_PRELOAD_ENABLE);
  __HAL_TIM_ENABLE_IT(&TimHandle, TIM_IT_CC1);
  __HAL_TIM_SET_COUNTER(&TimHandle, 0x0000);
  __HAL_TIM_ENABLE(&TimHandle);
}

void vMBPortTimersDisable(  ) //关闭时钟
{
  __HAL_TIM_DISABLE(&TimHandle);
  __HAL_TIM_SET_COUNTER(&TimHandle, 0x0000);
  __HAL_TIM_DISABLE_IT(&TimHandle, TIM_IT_CC1);
  __HAL_TIM_SET_AUTORELOAD(&TimHandle, TIM_AUTORELOAD_PRELOAD_DISABLE);
  __HAL_TIM_CLEAR_IT(&TimHandle, TIM_IT_CC1);
}

void
vMBPortTimersDelay( USHORT usTimeOutMS )
{
	vTaskDelay( usTimeOutMS / portTICK_RATE_MS );
}

/* Create an ISR which is called whenever the timer has expired. This function
 * must then call pxMBPortCBTimerExpired( ) to notify the protocol stack that
 * the timer has expired.
 */


void TIM2_IRQHandler(void)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(&TimHandle, TIM_FLAG_CC1) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(&TimHandle, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(&TimHandle, TIM_IT_CC1);
        TimHandle.Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        vMBPortSetWithinException( TRUE );
        /* DEBUG */
//        HW_PinWrite(LED_H1, (BitAction)(1 - HW_PinRead(LED_H1)));
        /* DEBUG */
        pxMBPortCBTimerExpired();
        vMBPortSetWithinException( FALSE );

        TimHandle.Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
}

